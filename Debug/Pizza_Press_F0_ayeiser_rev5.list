
Pizza_Press_F0_ayeiser_rev5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f34  0800ac04  0800ac04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb38  0800bb38  00020688  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb38  0800bb38  00020688  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb38  0800bb38  00020688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb38  0800bb38  0001bb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb3c  0800bb3c  0001bb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000688  20000000  0800bb40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000688  0800c1c8  00020688  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b90  0800c1c8  00020b90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020688  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a75c  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003970  00000000  00000000  0003ae0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0003e780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  0003fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017256  00000000  00000000  00041380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dfd7  00000000  00000000  000585d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fbbc  00000000  00000000  000765ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  000f61bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000688 	.word	0x20000688
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800abec 	.word	0x0800abec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000068c 	.word	0x2000068c
 8000104:	0800abec 	.word	0x0800abec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fa3d 	bl	80008a0 <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 f9c9 	bl	80007c8 <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fa2f 	bl	80008a0 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fa25 	bl	80008a0 <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f9d5 	bl	8000814 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 f9cb 	bl	8000814 <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_fadd>:
 800048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048e:	46c6      	mov	lr, r8
 8000490:	0243      	lsls	r3, r0, #9
 8000492:	0a5b      	lsrs	r3, r3, #9
 8000494:	024e      	lsls	r6, r1, #9
 8000496:	0045      	lsls	r5, r0, #1
 8000498:	004f      	lsls	r7, r1, #1
 800049a:	00da      	lsls	r2, r3, #3
 800049c:	0fc4      	lsrs	r4, r0, #31
 800049e:	469c      	mov	ip, r3
 80004a0:	0a70      	lsrs	r0, r6, #9
 80004a2:	4690      	mov	r8, r2
 80004a4:	b500      	push	{lr}
 80004a6:	0e2d      	lsrs	r5, r5, #24
 80004a8:	0e3f      	lsrs	r7, r7, #24
 80004aa:	0fc9      	lsrs	r1, r1, #31
 80004ac:	09b6      	lsrs	r6, r6, #6
 80004ae:	428c      	cmp	r4, r1
 80004b0:	d04b      	beq.n	800054a <__aeabi_fadd+0xbe>
 80004b2:	1bea      	subs	r2, r5, r7
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	dd36      	ble.n	8000526 <__aeabi_fadd+0x9a>
 80004b8:	2f00      	cmp	r7, #0
 80004ba:	d061      	beq.n	8000580 <__aeabi_fadd+0xf4>
 80004bc:	2dff      	cmp	r5, #255	; 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fadd+0x36>
 80004c0:	e0ad      	b.n	800061e <__aeabi_fadd+0x192>
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	04db      	lsls	r3, r3, #19
 80004c6:	431e      	orrs	r6, r3
 80004c8:	2a1b      	cmp	r2, #27
 80004ca:	dc00      	bgt.n	80004ce <__aeabi_fadd+0x42>
 80004cc:	e0d3      	b.n	8000676 <__aeabi_fadd+0x1ea>
 80004ce:	2001      	movs	r0, #1
 80004d0:	4643      	mov	r3, r8
 80004d2:	1a18      	subs	r0, r3, r0
 80004d4:	0143      	lsls	r3, r0, #5
 80004d6:	d400      	bmi.n	80004da <__aeabi_fadd+0x4e>
 80004d8:	e08c      	b.n	80005f4 <__aeabi_fadd+0x168>
 80004da:	0180      	lsls	r0, r0, #6
 80004dc:	0987      	lsrs	r7, r0, #6
 80004de:	0038      	movs	r0, r7
 80004e0:	f000 fd64 	bl	8000fac <__clzsi2>
 80004e4:	3805      	subs	r0, #5
 80004e6:	4087      	lsls	r7, r0
 80004e8:	4285      	cmp	r5, r0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_fadd+0x62>
 80004ec:	e0b6      	b.n	800065c <__aeabi_fadd+0x1d0>
 80004ee:	1a2d      	subs	r5, r5, r0
 80004f0:	48b3      	ldr	r0, [pc, #716]	; (80007c0 <__aeabi_fadd+0x334>)
 80004f2:	4038      	ands	r0, r7
 80004f4:	0743      	lsls	r3, r0, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fadd+0x76>
 80004f8:	230f      	movs	r3, #15
 80004fa:	4003      	ands	r3, r0
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fadd+0x76>
 8000500:	3004      	adds	r0, #4
 8000502:	0143      	lsls	r3, r0, #5
 8000504:	d400      	bmi.n	8000508 <__aeabi_fadd+0x7c>
 8000506:	e078      	b.n	80005fa <__aeabi_fadd+0x16e>
 8000508:	1c6a      	adds	r2, r5, #1
 800050a:	2dfe      	cmp	r5, #254	; 0xfe
 800050c:	d065      	beq.n	80005da <__aeabi_fadd+0x14e>
 800050e:	0180      	lsls	r0, r0, #6
 8000510:	0a43      	lsrs	r3, r0, #9
 8000512:	469c      	mov	ip, r3
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	4663      	mov	r3, ip
 8000518:	05d0      	lsls	r0, r2, #23
 800051a:	4318      	orrs	r0, r3
 800051c:	07e4      	lsls	r4, r4, #31
 800051e:	4320      	orrs	r0, r4
 8000520:	bc80      	pop	{r7}
 8000522:	46b8      	mov	r8, r7
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	2a00      	cmp	r2, #0
 8000528:	d035      	beq.n	8000596 <__aeabi_fadd+0x10a>
 800052a:	1b7a      	subs	r2, r7, r5
 800052c:	2d00      	cmp	r5, #0
 800052e:	d000      	beq.n	8000532 <__aeabi_fadd+0xa6>
 8000530:	e0af      	b.n	8000692 <__aeabi_fadd+0x206>
 8000532:	4643      	mov	r3, r8
 8000534:	2b00      	cmp	r3, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0xae>
 8000538:	e0a7      	b.n	800068a <__aeabi_fadd+0x1fe>
 800053a:	1e53      	subs	r3, r2, #1
 800053c:	2a01      	cmp	r2, #1
 800053e:	d100      	bne.n	8000542 <__aeabi_fadd+0xb6>
 8000540:	e12f      	b.n	80007a2 <__aeabi_fadd+0x316>
 8000542:	2aff      	cmp	r2, #255	; 0xff
 8000544:	d069      	beq.n	800061a <__aeabi_fadd+0x18e>
 8000546:	001a      	movs	r2, r3
 8000548:	e0aa      	b.n	80006a0 <__aeabi_fadd+0x214>
 800054a:	1be9      	subs	r1, r5, r7
 800054c:	2900      	cmp	r1, #0
 800054e:	dd70      	ble.n	8000632 <__aeabi_fadd+0x1a6>
 8000550:	2f00      	cmp	r7, #0
 8000552:	d037      	beq.n	80005c4 <__aeabi_fadd+0x138>
 8000554:	2dff      	cmp	r5, #255	; 0xff
 8000556:	d062      	beq.n	800061e <__aeabi_fadd+0x192>
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	04db      	lsls	r3, r3, #19
 800055c:	431e      	orrs	r6, r3
 800055e:	291b      	cmp	r1, #27
 8000560:	dc00      	bgt.n	8000564 <__aeabi_fadd+0xd8>
 8000562:	e0b0      	b.n	80006c6 <__aeabi_fadd+0x23a>
 8000564:	2001      	movs	r0, #1
 8000566:	4440      	add	r0, r8
 8000568:	0143      	lsls	r3, r0, #5
 800056a:	d543      	bpl.n	80005f4 <__aeabi_fadd+0x168>
 800056c:	3501      	adds	r5, #1
 800056e:	2dff      	cmp	r5, #255	; 0xff
 8000570:	d033      	beq.n	80005da <__aeabi_fadd+0x14e>
 8000572:	2301      	movs	r3, #1
 8000574:	4a93      	ldr	r2, [pc, #588]	; (80007c4 <__aeabi_fadd+0x338>)
 8000576:	4003      	ands	r3, r0
 8000578:	0840      	lsrs	r0, r0, #1
 800057a:	4010      	ands	r0, r2
 800057c:	4318      	orrs	r0, r3
 800057e:	e7b9      	b.n	80004f4 <__aeabi_fadd+0x68>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0xfa>
 8000584:	e083      	b.n	800068e <__aeabi_fadd+0x202>
 8000586:	1e51      	subs	r1, r2, #1
 8000588:	2a01      	cmp	r2, #1
 800058a:	d100      	bne.n	800058e <__aeabi_fadd+0x102>
 800058c:	e0d8      	b.n	8000740 <__aeabi_fadd+0x2b4>
 800058e:	2aff      	cmp	r2, #255	; 0xff
 8000590:	d045      	beq.n	800061e <__aeabi_fadd+0x192>
 8000592:	000a      	movs	r2, r1
 8000594:	e798      	b.n	80004c8 <__aeabi_fadd+0x3c>
 8000596:	27fe      	movs	r7, #254	; 0xfe
 8000598:	1c6a      	adds	r2, r5, #1
 800059a:	4217      	tst	r7, r2
 800059c:	d000      	beq.n	80005a0 <__aeabi_fadd+0x114>
 800059e:	e086      	b.n	80006ae <__aeabi_fadd+0x222>
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fadd+0x11a>
 80005a4:	e0b7      	b.n	8000716 <__aeabi_fadd+0x28a>
 80005a6:	4643      	mov	r3, r8
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x122>
 80005ac:	e0f3      	b.n	8000796 <__aeabi_fadd+0x30a>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d0b0      	beq.n	8000516 <__aeabi_fadd+0x8a>
 80005b4:	1b98      	subs	r0, r3, r6
 80005b6:	0143      	lsls	r3, r0, #5
 80005b8:	d400      	bmi.n	80005bc <__aeabi_fadd+0x130>
 80005ba:	e0fa      	b.n	80007b2 <__aeabi_fadd+0x326>
 80005bc:	4643      	mov	r3, r8
 80005be:	000c      	movs	r4, r1
 80005c0:	1af0      	subs	r0, r6, r3
 80005c2:	e797      	b.n	80004f4 <__aeabi_fadd+0x68>
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x13e>
 80005c8:	e0c8      	b.n	800075c <__aeabi_fadd+0x2d0>
 80005ca:	1e4a      	subs	r2, r1, #1
 80005cc:	2901      	cmp	r1, #1
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0x146>
 80005d0:	e0ae      	b.n	8000730 <__aeabi_fadd+0x2a4>
 80005d2:	29ff      	cmp	r1, #255	; 0xff
 80005d4:	d023      	beq.n	800061e <__aeabi_fadd+0x192>
 80005d6:	0011      	movs	r1, r2
 80005d8:	e7c1      	b.n	800055e <__aeabi_fadd+0xd2>
 80005da:	2300      	movs	r3, #0
 80005dc:	22ff      	movs	r2, #255	; 0xff
 80005de:	469c      	mov	ip, r3
 80005e0:	e799      	b.n	8000516 <__aeabi_fadd+0x8a>
 80005e2:	21fe      	movs	r1, #254	; 0xfe
 80005e4:	1c6a      	adds	r2, r5, #1
 80005e6:	4211      	tst	r1, r2
 80005e8:	d077      	beq.n	80006da <__aeabi_fadd+0x24e>
 80005ea:	2aff      	cmp	r2, #255	; 0xff
 80005ec:	d0f5      	beq.n	80005da <__aeabi_fadd+0x14e>
 80005ee:	0015      	movs	r5, r2
 80005f0:	4446      	add	r6, r8
 80005f2:	0870      	lsrs	r0, r6, #1
 80005f4:	0743      	lsls	r3, r0, #29
 80005f6:	d000      	beq.n	80005fa <__aeabi_fadd+0x16e>
 80005f8:	e77e      	b.n	80004f8 <__aeabi_fadd+0x6c>
 80005fa:	08c3      	lsrs	r3, r0, #3
 80005fc:	2dff      	cmp	r5, #255	; 0xff
 80005fe:	d00e      	beq.n	800061e <__aeabi_fadd+0x192>
 8000600:	025b      	lsls	r3, r3, #9
 8000602:	0a5b      	lsrs	r3, r3, #9
 8000604:	469c      	mov	ip, r3
 8000606:	b2ea      	uxtb	r2, r5
 8000608:	e785      	b.n	8000516 <__aeabi_fadd+0x8a>
 800060a:	2e00      	cmp	r6, #0
 800060c:	d007      	beq.n	800061e <__aeabi_fadd+0x192>
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	03d2      	lsls	r2, r2, #15
 8000612:	4213      	tst	r3, r2
 8000614:	d003      	beq.n	800061e <__aeabi_fadd+0x192>
 8000616:	4210      	tst	r0, r2
 8000618:	d101      	bne.n	800061e <__aeabi_fadd+0x192>
 800061a:	000c      	movs	r4, r1
 800061c:	0003      	movs	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0db      	beq.n	80005da <__aeabi_fadd+0x14e>
 8000622:	2080      	movs	r0, #128	; 0x80
 8000624:	03c0      	lsls	r0, r0, #15
 8000626:	4318      	orrs	r0, r3
 8000628:	0240      	lsls	r0, r0, #9
 800062a:	0a43      	lsrs	r3, r0, #9
 800062c:	469c      	mov	ip, r3
 800062e:	22ff      	movs	r2, #255	; 0xff
 8000630:	e771      	b.n	8000516 <__aeabi_fadd+0x8a>
 8000632:	2900      	cmp	r1, #0
 8000634:	d0d5      	beq.n	80005e2 <__aeabi_fadd+0x156>
 8000636:	1b7a      	subs	r2, r7, r5
 8000638:	2d00      	cmp	r5, #0
 800063a:	d160      	bne.n	80006fe <__aeabi_fadd+0x272>
 800063c:	4643      	mov	r3, r8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d024      	beq.n	800068c <__aeabi_fadd+0x200>
 8000642:	1e53      	subs	r3, r2, #1
 8000644:	2a01      	cmp	r2, #1
 8000646:	d073      	beq.n	8000730 <__aeabi_fadd+0x2a4>
 8000648:	2aff      	cmp	r2, #255	; 0xff
 800064a:	d0e7      	beq.n	800061c <__aeabi_fadd+0x190>
 800064c:	001a      	movs	r2, r3
 800064e:	2a1b      	cmp	r2, #27
 8000650:	dc00      	bgt.n	8000654 <__aeabi_fadd+0x1c8>
 8000652:	e085      	b.n	8000760 <__aeabi_fadd+0x2d4>
 8000654:	2001      	movs	r0, #1
 8000656:	003d      	movs	r5, r7
 8000658:	1980      	adds	r0, r0, r6
 800065a:	e785      	b.n	8000568 <__aeabi_fadd+0xdc>
 800065c:	2320      	movs	r3, #32
 800065e:	003a      	movs	r2, r7
 8000660:	1b45      	subs	r5, r0, r5
 8000662:	0038      	movs	r0, r7
 8000664:	3501      	adds	r5, #1
 8000666:	40ea      	lsrs	r2, r5
 8000668:	1b5d      	subs	r5, r3, r5
 800066a:	40a8      	lsls	r0, r5
 800066c:	1e43      	subs	r3, r0, #1
 800066e:	4198      	sbcs	r0, r3
 8000670:	2500      	movs	r5, #0
 8000672:	4310      	orrs	r0, r2
 8000674:	e73e      	b.n	80004f4 <__aeabi_fadd+0x68>
 8000676:	2320      	movs	r3, #32
 8000678:	0030      	movs	r0, r6
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	0031      	movs	r1, r6
 800067e:	4098      	lsls	r0, r3
 8000680:	40d1      	lsrs	r1, r2
 8000682:	1e43      	subs	r3, r0, #1
 8000684:	4198      	sbcs	r0, r3
 8000686:	4308      	orrs	r0, r1
 8000688:	e722      	b.n	80004d0 <__aeabi_fadd+0x44>
 800068a:	000c      	movs	r4, r1
 800068c:	0003      	movs	r3, r0
 800068e:	0015      	movs	r5, r2
 8000690:	e7b4      	b.n	80005fc <__aeabi_fadd+0x170>
 8000692:	2fff      	cmp	r7, #255	; 0xff
 8000694:	d0c1      	beq.n	800061a <__aeabi_fadd+0x18e>
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	4640      	mov	r0, r8
 800069a:	04db      	lsls	r3, r3, #19
 800069c:	4318      	orrs	r0, r3
 800069e:	4680      	mov	r8, r0
 80006a0:	2a1b      	cmp	r2, #27
 80006a2:	dd51      	ble.n	8000748 <__aeabi_fadd+0x2bc>
 80006a4:	2001      	movs	r0, #1
 80006a6:	000c      	movs	r4, r1
 80006a8:	003d      	movs	r5, r7
 80006aa:	1a30      	subs	r0, r6, r0
 80006ac:	e712      	b.n	80004d4 <__aeabi_fadd+0x48>
 80006ae:	4643      	mov	r3, r8
 80006b0:	1b9f      	subs	r7, r3, r6
 80006b2:	017b      	lsls	r3, r7, #5
 80006b4:	d42b      	bmi.n	800070e <__aeabi_fadd+0x282>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x230>
 80006ba:	e710      	b.n	80004de <__aeabi_fadd+0x52>
 80006bc:	2300      	movs	r3, #0
 80006be:	2400      	movs	r4, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	469c      	mov	ip, r3
 80006c4:	e727      	b.n	8000516 <__aeabi_fadd+0x8a>
 80006c6:	2320      	movs	r3, #32
 80006c8:	0032      	movs	r2, r6
 80006ca:	0030      	movs	r0, r6
 80006cc:	40ca      	lsrs	r2, r1
 80006ce:	1a59      	subs	r1, r3, r1
 80006d0:	4088      	lsls	r0, r1
 80006d2:	1e43      	subs	r3, r0, #1
 80006d4:	4198      	sbcs	r0, r3
 80006d6:	4310      	orrs	r0, r2
 80006d8:	e745      	b.n	8000566 <__aeabi_fadd+0xda>
 80006da:	2d00      	cmp	r5, #0
 80006dc:	d14a      	bne.n	8000774 <__aeabi_fadd+0x2e8>
 80006de:	4643      	mov	r3, r8
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d063      	beq.n	80007ac <__aeabi_fadd+0x320>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x260>
 80006ea:	e714      	b.n	8000516 <__aeabi_fadd+0x8a>
 80006ec:	0030      	movs	r0, r6
 80006ee:	4440      	add	r0, r8
 80006f0:	0143      	lsls	r3, r0, #5
 80006f2:	d400      	bmi.n	80006f6 <__aeabi_fadd+0x26a>
 80006f4:	e77e      	b.n	80005f4 <__aeabi_fadd+0x168>
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <__aeabi_fadd+0x334>)
 80006f8:	3501      	adds	r5, #1
 80006fa:	4018      	ands	r0, r3
 80006fc:	e77a      	b.n	80005f4 <__aeabi_fadd+0x168>
 80006fe:	2fff      	cmp	r7, #255	; 0xff
 8000700:	d08c      	beq.n	800061c <__aeabi_fadd+0x190>
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	4641      	mov	r1, r8
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	4319      	orrs	r1, r3
 800070a:	4688      	mov	r8, r1
 800070c:	e79f      	b.n	800064e <__aeabi_fadd+0x1c2>
 800070e:	4643      	mov	r3, r8
 8000710:	000c      	movs	r4, r1
 8000712:	1af7      	subs	r7, r6, r3
 8000714:	e6e3      	b.n	80004de <__aeabi_fadd+0x52>
 8000716:	4642      	mov	r2, r8
 8000718:	2a00      	cmp	r2, #0
 800071a:	d000      	beq.n	800071e <__aeabi_fadd+0x292>
 800071c:	e775      	b.n	800060a <__aeabi_fadd+0x17e>
 800071e:	2e00      	cmp	r6, #0
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x298>
 8000722:	e77a      	b.n	800061a <__aeabi_fadd+0x18e>
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	03db      	lsls	r3, r3, #15
 8000728:	2400      	movs	r4, #0
 800072a:	469c      	mov	ip, r3
 800072c:	22ff      	movs	r2, #255	; 0xff
 800072e:	e6f2      	b.n	8000516 <__aeabi_fadd+0x8a>
 8000730:	0030      	movs	r0, r6
 8000732:	4440      	add	r0, r8
 8000734:	2501      	movs	r5, #1
 8000736:	0143      	lsls	r3, r0, #5
 8000738:	d400      	bmi.n	800073c <__aeabi_fadd+0x2b0>
 800073a:	e75b      	b.n	80005f4 <__aeabi_fadd+0x168>
 800073c:	2502      	movs	r5, #2
 800073e:	e718      	b.n	8000572 <__aeabi_fadd+0xe6>
 8000740:	4643      	mov	r3, r8
 8000742:	2501      	movs	r5, #1
 8000744:	1b98      	subs	r0, r3, r6
 8000746:	e6c5      	b.n	80004d4 <__aeabi_fadd+0x48>
 8000748:	2320      	movs	r3, #32
 800074a:	4644      	mov	r4, r8
 800074c:	4640      	mov	r0, r8
 800074e:	40d4      	lsrs	r4, r2
 8000750:	1a9a      	subs	r2, r3, r2
 8000752:	4090      	lsls	r0, r2
 8000754:	1e43      	subs	r3, r0, #1
 8000756:	4198      	sbcs	r0, r3
 8000758:	4320      	orrs	r0, r4
 800075a:	e7a4      	b.n	80006a6 <__aeabi_fadd+0x21a>
 800075c:	000d      	movs	r5, r1
 800075e:	e74d      	b.n	80005fc <__aeabi_fadd+0x170>
 8000760:	2320      	movs	r3, #32
 8000762:	4641      	mov	r1, r8
 8000764:	4640      	mov	r0, r8
 8000766:	40d1      	lsrs	r1, r2
 8000768:	1a9a      	subs	r2, r3, r2
 800076a:	4090      	lsls	r0, r2
 800076c:	1e43      	subs	r3, r0, #1
 800076e:	4198      	sbcs	r0, r3
 8000770:	4308      	orrs	r0, r1
 8000772:	e770      	b.n	8000656 <__aeabi_fadd+0x1ca>
 8000774:	4642      	mov	r2, r8
 8000776:	2a00      	cmp	r2, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x2f0>
 800077a:	e74f      	b.n	800061c <__aeabi_fadd+0x190>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x2f6>
 8000780:	e74d      	b.n	800061e <__aeabi_fadd+0x192>
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	03d2      	lsls	r2, r2, #15
 8000786:	4213      	tst	r3, r2
 8000788:	d100      	bne.n	800078c <__aeabi_fadd+0x300>
 800078a:	e748      	b.n	800061e <__aeabi_fadd+0x192>
 800078c:	4210      	tst	r0, r2
 800078e:	d000      	beq.n	8000792 <__aeabi_fadd+0x306>
 8000790:	e745      	b.n	800061e <__aeabi_fadd+0x192>
 8000792:	0003      	movs	r3, r0
 8000794:	e743      	b.n	800061e <__aeabi_fadd+0x192>
 8000796:	2e00      	cmp	r6, #0
 8000798:	d090      	beq.n	80006bc <__aeabi_fadd+0x230>
 800079a:	000c      	movs	r4, r1
 800079c:	4684      	mov	ip, r0
 800079e:	2200      	movs	r2, #0
 80007a0:	e6b9      	b.n	8000516 <__aeabi_fadd+0x8a>
 80007a2:	4643      	mov	r3, r8
 80007a4:	000c      	movs	r4, r1
 80007a6:	1af0      	subs	r0, r6, r3
 80007a8:	3501      	adds	r5, #1
 80007aa:	e693      	b.n	80004d4 <__aeabi_fadd+0x48>
 80007ac:	4684      	mov	ip, r0
 80007ae:	2200      	movs	r2, #0
 80007b0:	e6b1      	b.n	8000516 <__aeabi_fadd+0x8a>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x32c>
 80007b6:	e71d      	b.n	80005f4 <__aeabi_fadd+0x168>
 80007b8:	2300      	movs	r3, #0
 80007ba:	2400      	movs	r4, #0
 80007bc:	469c      	mov	ip, r3
 80007be:	e6aa      	b.n	8000516 <__aeabi_fadd+0x8a>
 80007c0:	fbffffff 	.word	0xfbffffff
 80007c4:	7dffffff 	.word	0x7dffffff

080007c8 <__eqsf2>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	0042      	lsls	r2, r0, #1
 80007cc:	0245      	lsls	r5, r0, #9
 80007ce:	024e      	lsls	r6, r1, #9
 80007d0:	004c      	lsls	r4, r1, #1
 80007d2:	0fc3      	lsrs	r3, r0, #31
 80007d4:	0a6d      	lsrs	r5, r5, #9
 80007d6:	2001      	movs	r0, #1
 80007d8:	0e12      	lsrs	r2, r2, #24
 80007da:	0a76      	lsrs	r6, r6, #9
 80007dc:	0e24      	lsrs	r4, r4, #24
 80007de:	0fc9      	lsrs	r1, r1, #31
 80007e0:	2aff      	cmp	r2, #255	; 0xff
 80007e2:	d006      	beq.n	80007f2 <__eqsf2+0x2a>
 80007e4:	2cff      	cmp	r4, #255	; 0xff
 80007e6:	d003      	beq.n	80007f0 <__eqsf2+0x28>
 80007e8:	42a2      	cmp	r2, r4
 80007ea:	d101      	bne.n	80007f0 <__eqsf2+0x28>
 80007ec:	42b5      	cmp	r5, r6
 80007ee:	d006      	beq.n	80007fe <__eqsf2+0x36>
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d1fc      	bne.n	80007f0 <__eqsf2+0x28>
 80007f6:	2cff      	cmp	r4, #255	; 0xff
 80007f8:	d1fa      	bne.n	80007f0 <__eqsf2+0x28>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d1f8      	bne.n	80007f0 <__eqsf2+0x28>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d006      	beq.n	8000810 <__eqsf2+0x48>
 8000802:	2001      	movs	r0, #1
 8000804:	2a00      	cmp	r2, #0
 8000806:	d1f3      	bne.n	80007f0 <__eqsf2+0x28>
 8000808:	0028      	movs	r0, r5
 800080a:	1e43      	subs	r3, r0, #1
 800080c:	4198      	sbcs	r0, r3
 800080e:	e7ef      	b.n	80007f0 <__eqsf2+0x28>
 8000810:	2000      	movs	r0, #0
 8000812:	e7ed      	b.n	80007f0 <__eqsf2+0x28>

08000814 <__gesf2>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	0042      	lsls	r2, r0, #1
 8000818:	0245      	lsls	r5, r0, #9
 800081a:	024e      	lsls	r6, r1, #9
 800081c:	004c      	lsls	r4, r1, #1
 800081e:	0fc3      	lsrs	r3, r0, #31
 8000820:	0a6d      	lsrs	r5, r5, #9
 8000822:	0e12      	lsrs	r2, r2, #24
 8000824:	0a76      	lsrs	r6, r6, #9
 8000826:	0e24      	lsrs	r4, r4, #24
 8000828:	0fc8      	lsrs	r0, r1, #31
 800082a:	2aff      	cmp	r2, #255	; 0xff
 800082c:	d01b      	beq.n	8000866 <__gesf2+0x52>
 800082e:	2cff      	cmp	r4, #255	; 0xff
 8000830:	d00e      	beq.n	8000850 <__gesf2+0x3c>
 8000832:	2a00      	cmp	r2, #0
 8000834:	d11b      	bne.n	800086e <__gesf2+0x5a>
 8000836:	2c00      	cmp	r4, #0
 8000838:	d101      	bne.n	800083e <__gesf2+0x2a>
 800083a:	2e00      	cmp	r6, #0
 800083c:	d01c      	beq.n	8000878 <__gesf2+0x64>
 800083e:	2d00      	cmp	r5, #0
 8000840:	d00c      	beq.n	800085c <__gesf2+0x48>
 8000842:	4283      	cmp	r3, r0
 8000844:	d01c      	beq.n	8000880 <__gesf2+0x6c>
 8000846:	2102      	movs	r1, #2
 8000848:	1e58      	subs	r0, r3, #1
 800084a:	4008      	ands	r0, r1
 800084c:	3801      	subs	r0, #1
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	2e00      	cmp	r6, #0
 8000852:	d122      	bne.n	800089a <__gesf2+0x86>
 8000854:	2a00      	cmp	r2, #0
 8000856:	d1f4      	bne.n	8000842 <__gesf2+0x2e>
 8000858:	2d00      	cmp	r5, #0
 800085a:	d1f2      	bne.n	8000842 <__gesf2+0x2e>
 800085c:	2800      	cmp	r0, #0
 800085e:	d1f6      	bne.n	800084e <__gesf2+0x3a>
 8000860:	2001      	movs	r0, #1
 8000862:	4240      	negs	r0, r0
 8000864:	e7f3      	b.n	800084e <__gesf2+0x3a>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d117      	bne.n	800089a <__gesf2+0x86>
 800086a:	2cff      	cmp	r4, #255	; 0xff
 800086c:	d0f0      	beq.n	8000850 <__gesf2+0x3c>
 800086e:	2c00      	cmp	r4, #0
 8000870:	d1e7      	bne.n	8000842 <__gesf2+0x2e>
 8000872:	2e00      	cmp	r6, #0
 8000874:	d1e5      	bne.n	8000842 <__gesf2+0x2e>
 8000876:	e7e6      	b.n	8000846 <__gesf2+0x32>
 8000878:	2000      	movs	r0, #0
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e7      	beq.n	800084e <__gesf2+0x3a>
 800087e:	e7e2      	b.n	8000846 <__gesf2+0x32>
 8000880:	42a2      	cmp	r2, r4
 8000882:	dc05      	bgt.n	8000890 <__gesf2+0x7c>
 8000884:	dbea      	blt.n	800085c <__gesf2+0x48>
 8000886:	42b5      	cmp	r5, r6
 8000888:	d802      	bhi.n	8000890 <__gesf2+0x7c>
 800088a:	d3e7      	bcc.n	800085c <__gesf2+0x48>
 800088c:	2000      	movs	r0, #0
 800088e:	e7de      	b.n	800084e <__gesf2+0x3a>
 8000890:	4243      	negs	r3, r0
 8000892:	4158      	adcs	r0, r3
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	3801      	subs	r0, #1
 8000898:	e7d9      	b.n	800084e <__gesf2+0x3a>
 800089a:	2002      	movs	r0, #2
 800089c:	4240      	negs	r0, r0
 800089e:	e7d6      	b.n	800084e <__gesf2+0x3a>

080008a0 <__lesf2>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	0042      	lsls	r2, r0, #1
 80008a4:	0245      	lsls	r5, r0, #9
 80008a6:	024e      	lsls	r6, r1, #9
 80008a8:	004c      	lsls	r4, r1, #1
 80008aa:	0fc3      	lsrs	r3, r0, #31
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e12      	lsrs	r2, r2, #24
 80008b0:	0a76      	lsrs	r6, r6, #9
 80008b2:	0e24      	lsrs	r4, r4, #24
 80008b4:	0fc8      	lsrs	r0, r1, #31
 80008b6:	2aff      	cmp	r2, #255	; 0xff
 80008b8:	d00b      	beq.n	80008d2 <__lesf2+0x32>
 80008ba:	2cff      	cmp	r4, #255	; 0xff
 80008bc:	d00d      	beq.n	80008da <__lesf2+0x3a>
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d11f      	bne.n	8000902 <__lesf2+0x62>
 80008c2:	2c00      	cmp	r4, #0
 80008c4:	d116      	bne.n	80008f4 <__lesf2+0x54>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d114      	bne.n	80008f4 <__lesf2+0x54>
 80008ca:	2000      	movs	r0, #0
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d010      	beq.n	80008f2 <__lesf2+0x52>
 80008d0:	e009      	b.n	80008e6 <__lesf2+0x46>
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d10c      	bne.n	80008f0 <__lesf2+0x50>
 80008d6:	2cff      	cmp	r4, #255	; 0xff
 80008d8:	d113      	bne.n	8000902 <__lesf2+0x62>
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d108      	bne.n	80008f0 <__lesf2+0x50>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d008      	beq.n	80008f4 <__lesf2+0x54>
 80008e2:	4283      	cmp	r3, r0
 80008e4:	d012      	beq.n	800090c <__lesf2+0x6c>
 80008e6:	2102      	movs	r1, #2
 80008e8:	1e58      	subs	r0, r3, #1
 80008ea:	4008      	ands	r0, r1
 80008ec:	3801      	subs	r0, #1
 80008ee:	e000      	b.n	80008f2 <__lesf2+0x52>
 80008f0:	2002      	movs	r0, #2
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d1f4      	bne.n	80008e2 <__lesf2+0x42>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d1fa      	bne.n	80008f2 <__lesf2+0x52>
 80008fc:	2001      	movs	r0, #1
 80008fe:	4240      	negs	r0, r0
 8000900:	e7f7      	b.n	80008f2 <__lesf2+0x52>
 8000902:	2c00      	cmp	r4, #0
 8000904:	d1ed      	bne.n	80008e2 <__lesf2+0x42>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d1eb      	bne.n	80008e2 <__lesf2+0x42>
 800090a:	e7ec      	b.n	80008e6 <__lesf2+0x46>
 800090c:	42a2      	cmp	r2, r4
 800090e:	dc05      	bgt.n	800091c <__lesf2+0x7c>
 8000910:	dbf2      	blt.n	80008f8 <__lesf2+0x58>
 8000912:	42b5      	cmp	r5, r6
 8000914:	d802      	bhi.n	800091c <__lesf2+0x7c>
 8000916:	d3ef      	bcc.n	80008f8 <__lesf2+0x58>
 8000918:	2000      	movs	r0, #0
 800091a:	e7ea      	b.n	80008f2 <__lesf2+0x52>
 800091c:	4243      	negs	r3, r0
 800091e:	4158      	adcs	r0, r3
 8000920:	0040      	lsls	r0, r0, #1
 8000922:	3801      	subs	r0, #1
 8000924:	e7e5      	b.n	80008f2 <__lesf2+0x52>
 8000926:	46c0      	nop			; (mov r8, r8)

08000928 <__aeabi_fmul>:
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092a:	464f      	mov	r7, r9
 800092c:	4646      	mov	r6, r8
 800092e:	46d6      	mov	lr, sl
 8000930:	0244      	lsls	r4, r0, #9
 8000932:	0045      	lsls	r5, r0, #1
 8000934:	b5c0      	push	{r6, r7, lr}
 8000936:	0a64      	lsrs	r4, r4, #9
 8000938:	1c0f      	adds	r7, r1, #0
 800093a:	0e2d      	lsrs	r5, r5, #24
 800093c:	0fc6      	lsrs	r6, r0, #31
 800093e:	2d00      	cmp	r5, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_fmul+0x1c>
 8000942:	e08d      	b.n	8000a60 <__aeabi_fmul+0x138>
 8000944:	2dff      	cmp	r5, #255	; 0xff
 8000946:	d100      	bne.n	800094a <__aeabi_fmul+0x22>
 8000948:	e092      	b.n	8000a70 <__aeabi_fmul+0x148>
 800094a:	2300      	movs	r3, #0
 800094c:	2080      	movs	r0, #128	; 0x80
 800094e:	4699      	mov	r9, r3
 8000950:	469a      	mov	sl, r3
 8000952:	00e4      	lsls	r4, r4, #3
 8000954:	04c0      	lsls	r0, r0, #19
 8000956:	4304      	orrs	r4, r0
 8000958:	3d7f      	subs	r5, #127	; 0x7f
 800095a:	0278      	lsls	r0, r7, #9
 800095c:	0a43      	lsrs	r3, r0, #9
 800095e:	4698      	mov	r8, r3
 8000960:	007b      	lsls	r3, r7, #1
 8000962:	0e1b      	lsrs	r3, r3, #24
 8000964:	0fff      	lsrs	r7, r7, #31
 8000966:	2b00      	cmp	r3, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fmul+0x44>
 800096a:	e070      	b.n	8000a4e <__aeabi_fmul+0x126>
 800096c:	2bff      	cmp	r3, #255	; 0xff
 800096e:	d100      	bne.n	8000972 <__aeabi_fmul+0x4a>
 8000970:	e086      	b.n	8000a80 <__aeabi_fmul+0x158>
 8000972:	4642      	mov	r2, r8
 8000974:	00d0      	lsls	r0, r2, #3
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	3b7f      	subs	r3, #127	; 0x7f
 800097a:	18ed      	adds	r5, r5, r3
 800097c:	2300      	movs	r3, #0
 800097e:	04d2      	lsls	r2, r2, #19
 8000980:	4302      	orrs	r2, r0
 8000982:	4690      	mov	r8, r2
 8000984:	469c      	mov	ip, r3
 8000986:	0031      	movs	r1, r6
 8000988:	464b      	mov	r3, r9
 800098a:	4079      	eors	r1, r7
 800098c:	1c68      	adds	r0, r5, #1
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d81c      	bhi.n	80009cc <__aeabi_fmul+0xa4>
 8000992:	4a76      	ldr	r2, [pc, #472]	; (8000b6c <__aeabi_fmul+0x244>)
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	58d3      	ldr	r3, [r2, r3]
 8000998:	469f      	mov	pc, r3
 800099a:	0039      	movs	r1, r7
 800099c:	4644      	mov	r4, r8
 800099e:	46e2      	mov	sl, ip
 80009a0:	4653      	mov	r3, sl
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d00f      	beq.n	80009c6 <__aeabi_fmul+0x9e>
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d100      	bne.n	80009ac <__aeabi_fmul+0x84>
 80009aa:	e0d7      	b.n	8000b5c <__aeabi_fmul+0x234>
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d137      	bne.n	8000a20 <__aeabi_fmul+0xf8>
 80009b0:	2000      	movs	r0, #0
 80009b2:	2400      	movs	r4, #0
 80009b4:	05c0      	lsls	r0, r0, #23
 80009b6:	4320      	orrs	r0, r4
 80009b8:	07c9      	lsls	r1, r1, #31
 80009ba:	4308      	orrs	r0, r1
 80009bc:	bce0      	pop	{r5, r6, r7}
 80009be:	46ba      	mov	sl, r7
 80009c0:	46b1      	mov	r9, r6
 80009c2:	46a8      	mov	r8, r5
 80009c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c6:	20ff      	movs	r0, #255	; 0xff
 80009c8:	2400      	movs	r4, #0
 80009ca:	e7f3      	b.n	80009b4 <__aeabi_fmul+0x8c>
 80009cc:	0c26      	lsrs	r6, r4, #16
 80009ce:	0424      	lsls	r4, r4, #16
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	4644      	mov	r4, r8
 80009d4:	0424      	lsls	r4, r4, #16
 80009d6:	0c24      	lsrs	r4, r4, #16
 80009d8:	4643      	mov	r3, r8
 80009da:	0027      	movs	r7, r4
 80009dc:	0c1b      	lsrs	r3, r3, #16
 80009de:	4357      	muls	r7, r2
 80009e0:	4374      	muls	r4, r6
 80009e2:	435a      	muls	r2, r3
 80009e4:	435e      	muls	r6, r3
 80009e6:	1912      	adds	r2, r2, r4
 80009e8:	0c3b      	lsrs	r3, r7, #16
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d903      	bls.n	80009f8 <__aeabi_fmul+0xd0>
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	0252      	lsls	r2, r2, #9
 80009f4:	4694      	mov	ip, r2
 80009f6:	4466      	add	r6, ip
 80009f8:	043f      	lsls	r7, r7, #16
 80009fa:	041a      	lsls	r2, r3, #16
 80009fc:	0c3f      	lsrs	r7, r7, #16
 80009fe:	19d2      	adds	r2, r2, r7
 8000a00:	0194      	lsls	r4, r2, #6
 8000a02:	1e67      	subs	r7, r4, #1
 8000a04:	41bc      	sbcs	r4, r7
 8000a06:	0c1b      	lsrs	r3, r3, #16
 8000a08:	0e92      	lsrs	r2, r2, #26
 8000a0a:	199b      	adds	r3, r3, r6
 8000a0c:	4314      	orrs	r4, r2
 8000a0e:	019b      	lsls	r3, r3, #6
 8000a10:	431c      	orrs	r4, r3
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	d400      	bmi.n	8000a18 <__aeabi_fmul+0xf0>
 8000a16:	e09b      	b.n	8000b50 <__aeabi_fmul+0x228>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	0862      	lsrs	r2, r4, #1
 8000a1c:	401c      	ands	r4, r3
 8000a1e:	4314      	orrs	r4, r2
 8000a20:	0002      	movs	r2, r0
 8000a22:	327f      	adds	r2, #127	; 0x7f
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	dd64      	ble.n	8000af2 <__aeabi_fmul+0x1ca>
 8000a28:	0763      	lsls	r3, r4, #29
 8000a2a:	d004      	beq.n	8000a36 <__aeabi_fmul+0x10e>
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	4023      	ands	r3, r4
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d000      	beq.n	8000a36 <__aeabi_fmul+0x10e>
 8000a34:	3404      	adds	r4, #4
 8000a36:	0123      	lsls	r3, r4, #4
 8000a38:	d503      	bpl.n	8000a42 <__aeabi_fmul+0x11a>
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <__aeabi_fmul+0x248>)
 8000a3e:	3280      	adds	r2, #128	; 0x80
 8000a40:	401c      	ands	r4, r3
 8000a42:	2afe      	cmp	r2, #254	; 0xfe
 8000a44:	dcbf      	bgt.n	80009c6 <__aeabi_fmul+0x9e>
 8000a46:	01a4      	lsls	r4, r4, #6
 8000a48:	0a64      	lsrs	r4, r4, #9
 8000a4a:	b2d0      	uxtb	r0, r2
 8000a4c:	e7b2      	b.n	80009b4 <__aeabi_fmul+0x8c>
 8000a4e:	4643      	mov	r3, r8
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d13d      	bne.n	8000ad0 <__aeabi_fmul+0x1a8>
 8000a54:	464a      	mov	r2, r9
 8000a56:	3301      	adds	r3, #1
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	4691      	mov	r9, r2
 8000a5c:	469c      	mov	ip, r3
 8000a5e:	e792      	b.n	8000986 <__aeabi_fmul+0x5e>
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d129      	bne.n	8000ab8 <__aeabi_fmul+0x190>
 8000a64:	2304      	movs	r3, #4
 8000a66:	4699      	mov	r9, r3
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	2500      	movs	r5, #0
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	e774      	b.n	800095a <__aeabi_fmul+0x32>
 8000a70:	2c00      	cmp	r4, #0
 8000a72:	d11b      	bne.n	8000aac <__aeabi_fmul+0x184>
 8000a74:	2308      	movs	r3, #8
 8000a76:	4699      	mov	r9, r3
 8000a78:	3b06      	subs	r3, #6
 8000a7a:	25ff      	movs	r5, #255	; 0xff
 8000a7c:	469a      	mov	sl, r3
 8000a7e:	e76c      	b.n	800095a <__aeabi_fmul+0x32>
 8000a80:	4643      	mov	r3, r8
 8000a82:	35ff      	adds	r5, #255	; 0xff
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10b      	bne.n	8000aa0 <__aeabi_fmul+0x178>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	4691      	mov	r9, r2
 8000a90:	469c      	mov	ip, r3
 8000a92:	e778      	b.n	8000986 <__aeabi_fmul+0x5e>
 8000a94:	4653      	mov	r3, sl
 8000a96:	0031      	movs	r1, r6
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fmul+0x176>
 8000a9c:	e783      	b.n	80009a6 <__aeabi_fmul+0x7e>
 8000a9e:	e792      	b.n	80009c6 <__aeabi_fmul+0x9e>
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	4691      	mov	r9, r2
 8000aa8:	469c      	mov	ip, r3
 8000aaa:	e76c      	b.n	8000986 <__aeabi_fmul+0x5e>
 8000aac:	230c      	movs	r3, #12
 8000aae:	4699      	mov	r9, r3
 8000ab0:	3b09      	subs	r3, #9
 8000ab2:	25ff      	movs	r5, #255	; 0xff
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	e750      	b.n	800095a <__aeabi_fmul+0x32>
 8000ab8:	0020      	movs	r0, r4
 8000aba:	f000 fa77 	bl	8000fac <__clzsi2>
 8000abe:	2576      	movs	r5, #118	; 0x76
 8000ac0:	1f43      	subs	r3, r0, #5
 8000ac2:	409c      	lsls	r4, r3
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	426d      	negs	r5, r5
 8000ac8:	4699      	mov	r9, r3
 8000aca:	469a      	mov	sl, r3
 8000acc:	1a2d      	subs	r5, r5, r0
 8000ace:	e744      	b.n	800095a <__aeabi_fmul+0x32>
 8000ad0:	4640      	mov	r0, r8
 8000ad2:	f000 fa6b 	bl	8000fac <__clzsi2>
 8000ad6:	4642      	mov	r2, r8
 8000ad8:	1f43      	subs	r3, r0, #5
 8000ada:	409a      	lsls	r2, r3
 8000adc:	2300      	movs	r3, #0
 8000ade:	1a2d      	subs	r5, r5, r0
 8000ae0:	4690      	mov	r8, r2
 8000ae2:	469c      	mov	ip, r3
 8000ae4:	3d76      	subs	r5, #118	; 0x76
 8000ae6:	e74e      	b.n	8000986 <__aeabi_fmul+0x5e>
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	2100      	movs	r1, #0
 8000aec:	20ff      	movs	r0, #255	; 0xff
 8000aee:	03e4      	lsls	r4, r4, #15
 8000af0:	e760      	b.n	80009b4 <__aeabi_fmul+0x8c>
 8000af2:	2301      	movs	r3, #1
 8000af4:	1a9b      	subs	r3, r3, r2
 8000af6:	2b1b      	cmp	r3, #27
 8000af8:	dd00      	ble.n	8000afc <__aeabi_fmul+0x1d4>
 8000afa:	e759      	b.n	80009b0 <__aeabi_fmul+0x88>
 8000afc:	0022      	movs	r2, r4
 8000afe:	309e      	adds	r0, #158	; 0x9e
 8000b00:	40da      	lsrs	r2, r3
 8000b02:	4084      	lsls	r4, r0
 8000b04:	0013      	movs	r3, r2
 8000b06:	1e62      	subs	r2, r4, #1
 8000b08:	4194      	sbcs	r4, r2
 8000b0a:	431c      	orrs	r4, r3
 8000b0c:	0763      	lsls	r3, r4, #29
 8000b0e:	d004      	beq.n	8000b1a <__aeabi_fmul+0x1f2>
 8000b10:	230f      	movs	r3, #15
 8000b12:	4023      	ands	r3, r4
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d000      	beq.n	8000b1a <__aeabi_fmul+0x1f2>
 8000b18:	3404      	adds	r4, #4
 8000b1a:	0163      	lsls	r3, r4, #5
 8000b1c:	d51a      	bpl.n	8000b54 <__aeabi_fmul+0x22c>
 8000b1e:	2001      	movs	r0, #1
 8000b20:	2400      	movs	r4, #0
 8000b22:	e747      	b.n	80009b4 <__aeabi_fmul+0x8c>
 8000b24:	2080      	movs	r0, #128	; 0x80
 8000b26:	03c0      	lsls	r0, r0, #15
 8000b28:	4204      	tst	r4, r0
 8000b2a:	d009      	beq.n	8000b40 <__aeabi_fmul+0x218>
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	4203      	tst	r3, r0
 8000b30:	d106      	bne.n	8000b40 <__aeabi_fmul+0x218>
 8000b32:	4644      	mov	r4, r8
 8000b34:	4304      	orrs	r4, r0
 8000b36:	0264      	lsls	r4, r4, #9
 8000b38:	0039      	movs	r1, r7
 8000b3a:	20ff      	movs	r0, #255	; 0xff
 8000b3c:	0a64      	lsrs	r4, r4, #9
 8000b3e:	e739      	b.n	80009b4 <__aeabi_fmul+0x8c>
 8000b40:	2080      	movs	r0, #128	; 0x80
 8000b42:	03c0      	lsls	r0, r0, #15
 8000b44:	4304      	orrs	r4, r0
 8000b46:	0264      	lsls	r4, r4, #9
 8000b48:	0031      	movs	r1, r6
 8000b4a:	20ff      	movs	r0, #255	; 0xff
 8000b4c:	0a64      	lsrs	r4, r4, #9
 8000b4e:	e731      	b.n	80009b4 <__aeabi_fmul+0x8c>
 8000b50:	0028      	movs	r0, r5
 8000b52:	e765      	b.n	8000a20 <__aeabi_fmul+0xf8>
 8000b54:	01a4      	lsls	r4, r4, #6
 8000b56:	2000      	movs	r0, #0
 8000b58:	0a64      	lsrs	r4, r4, #9
 8000b5a:	e72b      	b.n	80009b4 <__aeabi_fmul+0x8c>
 8000b5c:	2080      	movs	r0, #128	; 0x80
 8000b5e:	03c0      	lsls	r0, r0, #15
 8000b60:	4304      	orrs	r4, r0
 8000b62:	0264      	lsls	r4, r4, #9
 8000b64:	20ff      	movs	r0, #255	; 0xff
 8000b66:	0a64      	lsrs	r4, r4, #9
 8000b68:	e724      	b.n	80009b4 <__aeabi_fmul+0x8c>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	0800ae84 	.word	0x0800ae84
 8000b70:	f7ffffff 	.word	0xf7ffffff

08000b74 <__aeabi_fsub>:
 8000b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b76:	46ce      	mov	lr, r9
 8000b78:	4647      	mov	r7, r8
 8000b7a:	0243      	lsls	r3, r0, #9
 8000b7c:	0a5b      	lsrs	r3, r3, #9
 8000b7e:	024e      	lsls	r6, r1, #9
 8000b80:	00da      	lsls	r2, r3, #3
 8000b82:	4694      	mov	ip, r2
 8000b84:	0a72      	lsrs	r2, r6, #9
 8000b86:	4691      	mov	r9, r2
 8000b88:	0045      	lsls	r5, r0, #1
 8000b8a:	004a      	lsls	r2, r1, #1
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	0e2d      	lsrs	r5, r5, #24
 8000b90:	001f      	movs	r7, r3
 8000b92:	0fc4      	lsrs	r4, r0, #31
 8000b94:	0e12      	lsrs	r2, r2, #24
 8000b96:	0fc9      	lsrs	r1, r1, #31
 8000b98:	09b6      	lsrs	r6, r6, #6
 8000b9a:	2aff      	cmp	r2, #255	; 0xff
 8000b9c:	d05b      	beq.n	8000c56 <__aeabi_fsub+0xe2>
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	4041      	eors	r1, r0
 8000ba2:	428c      	cmp	r4, r1
 8000ba4:	d039      	beq.n	8000c1a <__aeabi_fsub+0xa6>
 8000ba6:	1aa8      	subs	r0, r5, r2
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	dd5a      	ble.n	8000c62 <__aeabi_fsub+0xee>
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d06a      	beq.n	8000c86 <__aeabi_fsub+0x112>
 8000bb0:	2dff      	cmp	r5, #255	; 0xff
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_fsub+0x42>
 8000bb4:	e0d9      	b.n	8000d6a <__aeabi_fsub+0x1f6>
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4316      	orrs	r6, r2
 8000bbc:	281b      	cmp	r0, #27
 8000bbe:	dc00      	bgt.n	8000bc2 <__aeabi_fsub+0x4e>
 8000bc0:	e0e9      	b.n	8000d96 <__aeabi_fsub+0x222>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4663      	mov	r3, ip
 8000bc6:	1a18      	subs	r0, r3, r0
 8000bc8:	0143      	lsls	r3, r0, #5
 8000bca:	d400      	bmi.n	8000bce <__aeabi_fsub+0x5a>
 8000bcc:	e0b4      	b.n	8000d38 <__aeabi_fsub+0x1c4>
 8000bce:	0180      	lsls	r0, r0, #6
 8000bd0:	0987      	lsrs	r7, r0, #6
 8000bd2:	0038      	movs	r0, r7
 8000bd4:	f000 f9ea 	bl	8000fac <__clzsi2>
 8000bd8:	3805      	subs	r0, #5
 8000bda:	4087      	lsls	r7, r0
 8000bdc:	4285      	cmp	r5, r0
 8000bde:	dc00      	bgt.n	8000be2 <__aeabi_fsub+0x6e>
 8000be0:	e0cc      	b.n	8000d7c <__aeabi_fsub+0x208>
 8000be2:	1a2d      	subs	r5, r5, r0
 8000be4:	48b5      	ldr	r0, [pc, #724]	; (8000ebc <__aeabi_fsub+0x348>)
 8000be6:	4038      	ands	r0, r7
 8000be8:	0743      	lsls	r3, r0, #29
 8000bea:	d004      	beq.n	8000bf6 <__aeabi_fsub+0x82>
 8000bec:	230f      	movs	r3, #15
 8000bee:	4003      	ands	r3, r0
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_fsub+0x82>
 8000bf4:	3004      	adds	r0, #4
 8000bf6:	0143      	lsls	r3, r0, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x88>
 8000bfa:	e0a0      	b.n	8000d3e <__aeabi_fsub+0x1ca>
 8000bfc:	1c6a      	adds	r2, r5, #1
 8000bfe:	2dfe      	cmp	r5, #254	; 0xfe
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fsub+0x90>
 8000c02:	e08d      	b.n	8000d20 <__aeabi_fsub+0x1ac>
 8000c04:	0180      	lsls	r0, r0, #6
 8000c06:	0a47      	lsrs	r7, r0, #9
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	05d0      	lsls	r0, r2, #23
 8000c0c:	4338      	orrs	r0, r7
 8000c0e:	07e4      	lsls	r4, r4, #31
 8000c10:	4320      	orrs	r0, r4
 8000c12:	bcc0      	pop	{r6, r7}
 8000c14:	46b9      	mov	r9, r7
 8000c16:	46b0      	mov	r8, r6
 8000c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c1a:	1aa8      	subs	r0, r5, r2
 8000c1c:	4680      	mov	r8, r0
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	dd45      	ble.n	8000cae <__aeabi_fsub+0x13a>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d070      	beq.n	8000d08 <__aeabi_fsub+0x194>
 8000c26:	2dff      	cmp	r5, #255	; 0xff
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0xb8>
 8000c2a:	e09e      	b.n	8000d6a <__aeabi_fsub+0x1f6>
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	04db      	lsls	r3, r3, #19
 8000c30:	431e      	orrs	r6, r3
 8000c32:	4643      	mov	r3, r8
 8000c34:	2b1b      	cmp	r3, #27
 8000c36:	dc00      	bgt.n	8000c3a <__aeabi_fsub+0xc6>
 8000c38:	e0d2      	b.n	8000de0 <__aeabi_fsub+0x26c>
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4460      	add	r0, ip
 8000c3e:	0143      	lsls	r3, r0, #5
 8000c40:	d57a      	bpl.n	8000d38 <__aeabi_fsub+0x1c4>
 8000c42:	3501      	adds	r5, #1
 8000c44:	2dff      	cmp	r5, #255	; 0xff
 8000c46:	d06b      	beq.n	8000d20 <__aeabi_fsub+0x1ac>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	4a9d      	ldr	r2, [pc, #628]	; (8000ec0 <__aeabi_fsub+0x34c>)
 8000c4c:	4003      	ands	r3, r0
 8000c4e:	0840      	lsrs	r0, r0, #1
 8000c50:	4010      	ands	r0, r2
 8000c52:	4318      	orrs	r0, r3
 8000c54:	e7c8      	b.n	8000be8 <__aeabi_fsub+0x74>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d020      	beq.n	8000c9c <__aeabi_fsub+0x128>
 8000c5a:	428c      	cmp	r4, r1
 8000c5c:	d023      	beq.n	8000ca6 <__aeabi_fsub+0x132>
 8000c5e:	0028      	movs	r0, r5
 8000c60:	38ff      	subs	r0, #255	; 0xff
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d039      	beq.n	8000cda <__aeabi_fsub+0x166>
 8000c66:	1b57      	subs	r7, r2, r5
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_fsub+0xfa>
 8000c6c:	e09d      	b.n	8000daa <__aeabi_fsub+0x236>
 8000c6e:	4663      	mov	r3, ip
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fsub+0x102>
 8000c74:	e0db      	b.n	8000e2e <__aeabi_fsub+0x2ba>
 8000c76:	1e7b      	subs	r3, r7, #1
 8000c78:	2f01      	cmp	r7, #1
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_fsub+0x10a>
 8000c7c:	e10d      	b.n	8000e9a <__aeabi_fsub+0x326>
 8000c7e:	2fff      	cmp	r7, #255	; 0xff
 8000c80:	d071      	beq.n	8000d66 <__aeabi_fsub+0x1f2>
 8000c82:	001f      	movs	r7, r3
 8000c84:	e098      	b.n	8000db8 <__aeabi_fsub+0x244>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0x118>
 8000c8a:	e0a7      	b.n	8000ddc <__aeabi_fsub+0x268>
 8000c8c:	1e42      	subs	r2, r0, #1
 8000c8e:	2801      	cmp	r0, #1
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fsub+0x120>
 8000c92:	e0e6      	b.n	8000e62 <__aeabi_fsub+0x2ee>
 8000c94:	28ff      	cmp	r0, #255	; 0xff
 8000c96:	d068      	beq.n	8000d6a <__aeabi_fsub+0x1f6>
 8000c98:	0010      	movs	r0, r2
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fsub+0x48>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4041      	eors	r1, r0
 8000ca0:	42a1      	cmp	r1, r4
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_fsub+0x132>
 8000ca4:	e77f      	b.n	8000ba6 <__aeabi_fsub+0x32>
 8000ca6:	20ff      	movs	r0, #255	; 0xff
 8000ca8:	4240      	negs	r0, r0
 8000caa:	4680      	mov	r8, r0
 8000cac:	44a8      	add	r8, r5
 8000cae:	4640      	mov	r0, r8
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d038      	beq.n	8000d26 <__aeabi_fsub+0x1b2>
 8000cb4:	1b51      	subs	r1, r2, r5
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fsub+0x148>
 8000cba:	e0ae      	b.n	8000e1a <__aeabi_fsub+0x2a6>
 8000cbc:	2aff      	cmp	r2, #255	; 0xff
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_fsub+0x14e>
 8000cc0:	e0df      	b.n	8000e82 <__aeabi_fsub+0x30e>
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	4660      	mov	r0, ip
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	4318      	orrs	r0, r3
 8000cca:	4684      	mov	ip, r0
 8000ccc:	291b      	cmp	r1, #27
 8000cce:	dc00      	bgt.n	8000cd2 <__aeabi_fsub+0x15e>
 8000cd0:	e0d9      	b.n	8000e86 <__aeabi_fsub+0x312>
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	0015      	movs	r5, r2
 8000cd6:	1980      	adds	r0, r0, r6
 8000cd8:	e7b1      	b.n	8000c3e <__aeabi_fsub+0xca>
 8000cda:	20fe      	movs	r0, #254	; 0xfe
 8000cdc:	1c6a      	adds	r2, r5, #1
 8000cde:	4210      	tst	r0, r2
 8000ce0:	d171      	bne.n	8000dc6 <__aeabi_fsub+0x252>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_fsub+0x174>
 8000ce6:	e0a6      	b.n	8000e36 <__aeabi_fsub+0x2c2>
 8000ce8:	4663      	mov	r3, ip
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x17c>
 8000cee:	e0d9      	b.n	8000ea4 <__aeabi_fsub+0x330>
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0x184>
 8000cf6:	e788      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000cf8:	1b98      	subs	r0, r3, r6
 8000cfa:	0143      	lsls	r3, r0, #5
 8000cfc:	d400      	bmi.n	8000d00 <__aeabi_fsub+0x18c>
 8000cfe:	e0e1      	b.n	8000ec4 <__aeabi_fsub+0x350>
 8000d00:	4663      	mov	r3, ip
 8000d02:	000c      	movs	r4, r1
 8000d04:	1af0      	subs	r0, r6, r3
 8000d06:	e76f      	b.n	8000be8 <__aeabi_fsub+0x74>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_fsub+0x19a>
 8000d0c:	e0b7      	b.n	8000e7e <__aeabi_fsub+0x30a>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	2801      	cmp	r0, #1
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0x1a4>
 8000d16:	e09c      	b.n	8000e52 <__aeabi_fsub+0x2de>
 8000d18:	28ff      	cmp	r0, #255	; 0xff
 8000d1a:	d026      	beq.n	8000d6a <__aeabi_fsub+0x1f6>
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	e788      	b.n	8000c32 <__aeabi_fsub+0xbe>
 8000d20:	22ff      	movs	r2, #255	; 0xff
 8000d22:	2700      	movs	r7, #0
 8000d24:	e771      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000d26:	20fe      	movs	r0, #254	; 0xfe
 8000d28:	1c6a      	adds	r2, r5, #1
 8000d2a:	4210      	tst	r0, r2
 8000d2c:	d064      	beq.n	8000df8 <__aeabi_fsub+0x284>
 8000d2e:	2aff      	cmp	r2, #255	; 0xff
 8000d30:	d0f6      	beq.n	8000d20 <__aeabi_fsub+0x1ac>
 8000d32:	0015      	movs	r5, r2
 8000d34:	4466      	add	r6, ip
 8000d36:	0870      	lsrs	r0, r6, #1
 8000d38:	0743      	lsls	r3, r0, #29
 8000d3a:	d000      	beq.n	8000d3e <__aeabi_fsub+0x1ca>
 8000d3c:	e756      	b.n	8000bec <__aeabi_fsub+0x78>
 8000d3e:	08c3      	lsrs	r3, r0, #3
 8000d40:	2dff      	cmp	r5, #255	; 0xff
 8000d42:	d012      	beq.n	8000d6a <__aeabi_fsub+0x1f6>
 8000d44:	025b      	lsls	r3, r3, #9
 8000d46:	0a5f      	lsrs	r7, r3, #9
 8000d48:	b2ea      	uxtb	r2, r5
 8000d4a:	e75e      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000d4c:	4662      	mov	r2, ip
 8000d4e:	2a00      	cmp	r2, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_fsub+0x1e0>
 8000d52:	e096      	b.n	8000e82 <__aeabi_fsub+0x30e>
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d008      	beq.n	8000d6a <__aeabi_fsub+0x1f6>
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	03d2      	lsls	r2, r2, #15
 8000d5c:	4213      	tst	r3, r2
 8000d5e:	d004      	beq.n	8000d6a <__aeabi_fsub+0x1f6>
 8000d60:	4648      	mov	r0, r9
 8000d62:	4210      	tst	r0, r2
 8000d64:	d101      	bne.n	8000d6a <__aeabi_fsub+0x1f6>
 8000d66:	000c      	movs	r4, r1
 8000d68:	464b      	mov	r3, r9
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0d8      	beq.n	8000d20 <__aeabi_fsub+0x1ac>
 8000d6e:	2780      	movs	r7, #128	; 0x80
 8000d70:	03ff      	lsls	r7, r7, #15
 8000d72:	431f      	orrs	r7, r3
 8000d74:	027f      	lsls	r7, r7, #9
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	0a7f      	lsrs	r7, r7, #9
 8000d7a:	e746      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	003a      	movs	r2, r7
 8000d80:	1b45      	subs	r5, r0, r5
 8000d82:	0038      	movs	r0, r7
 8000d84:	3501      	adds	r5, #1
 8000d86:	40ea      	lsrs	r2, r5
 8000d88:	1b5d      	subs	r5, r3, r5
 8000d8a:	40a8      	lsls	r0, r5
 8000d8c:	1e43      	subs	r3, r0, #1
 8000d8e:	4198      	sbcs	r0, r3
 8000d90:	2500      	movs	r5, #0
 8000d92:	4310      	orrs	r0, r2
 8000d94:	e728      	b.n	8000be8 <__aeabi_fsub+0x74>
 8000d96:	2320      	movs	r3, #32
 8000d98:	1a1b      	subs	r3, r3, r0
 8000d9a:	0032      	movs	r2, r6
 8000d9c:	409e      	lsls	r6, r3
 8000d9e:	40c2      	lsrs	r2, r0
 8000da0:	0030      	movs	r0, r6
 8000da2:	1e43      	subs	r3, r0, #1
 8000da4:	4198      	sbcs	r0, r3
 8000da6:	4310      	orrs	r0, r2
 8000da8:	e70c      	b.n	8000bc4 <__aeabi_fsub+0x50>
 8000daa:	2aff      	cmp	r2, #255	; 0xff
 8000dac:	d0db      	beq.n	8000d66 <__aeabi_fsub+0x1f2>
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	4660      	mov	r0, ip
 8000db2:	04db      	lsls	r3, r3, #19
 8000db4:	4318      	orrs	r0, r3
 8000db6:	4684      	mov	ip, r0
 8000db8:	2f1b      	cmp	r7, #27
 8000dba:	dd56      	ble.n	8000e6a <__aeabi_fsub+0x2f6>
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	000c      	movs	r4, r1
 8000dc0:	0015      	movs	r5, r2
 8000dc2:	1a30      	subs	r0, r6, r0
 8000dc4:	e700      	b.n	8000bc8 <__aeabi_fsub+0x54>
 8000dc6:	4663      	mov	r3, ip
 8000dc8:	1b9f      	subs	r7, r3, r6
 8000dca:	017b      	lsls	r3, r7, #5
 8000dcc:	d43d      	bmi.n	8000e4a <__aeabi_fsub+0x2d6>
 8000dce:	2f00      	cmp	r7, #0
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_fsub+0x260>
 8000dd2:	e6fe      	b.n	8000bd2 <__aeabi_fsub+0x5e>
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2700      	movs	r7, #0
 8000dda:	e716      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000ddc:	0005      	movs	r5, r0
 8000dde:	e7af      	b.n	8000d40 <__aeabi_fsub+0x1cc>
 8000de0:	0032      	movs	r2, r6
 8000de2:	4643      	mov	r3, r8
 8000de4:	4641      	mov	r1, r8
 8000de6:	40da      	lsrs	r2, r3
 8000de8:	2320      	movs	r3, #32
 8000dea:	1a5b      	subs	r3, r3, r1
 8000dec:	409e      	lsls	r6, r3
 8000dee:	0030      	movs	r0, r6
 8000df0:	1e43      	subs	r3, r0, #1
 8000df2:	4198      	sbcs	r0, r3
 8000df4:	4310      	orrs	r0, r2
 8000df6:	e721      	b.n	8000c3c <__aeabi_fsub+0xc8>
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d1a7      	bne.n	8000d4c <__aeabi_fsub+0x1d8>
 8000dfc:	4663      	mov	r3, ip
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d059      	beq.n	8000eb6 <__aeabi_fsub+0x342>
 8000e02:	2200      	movs	r2, #0
 8000e04:	2e00      	cmp	r6, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_fsub+0x296>
 8000e08:	e6ff      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000e0a:	0030      	movs	r0, r6
 8000e0c:	4460      	add	r0, ip
 8000e0e:	0143      	lsls	r3, r0, #5
 8000e10:	d592      	bpl.n	8000d38 <__aeabi_fsub+0x1c4>
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <__aeabi_fsub+0x348>)
 8000e14:	3501      	adds	r5, #1
 8000e16:	4018      	ands	r0, r3
 8000e18:	e78e      	b.n	8000d38 <__aeabi_fsub+0x1c4>
 8000e1a:	4663      	mov	r3, ip
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d047      	beq.n	8000eb0 <__aeabi_fsub+0x33c>
 8000e20:	1e4b      	subs	r3, r1, #1
 8000e22:	2901      	cmp	r1, #1
 8000e24:	d015      	beq.n	8000e52 <__aeabi_fsub+0x2de>
 8000e26:	29ff      	cmp	r1, #255	; 0xff
 8000e28:	d02b      	beq.n	8000e82 <__aeabi_fsub+0x30e>
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	e74e      	b.n	8000ccc <__aeabi_fsub+0x158>
 8000e2e:	000c      	movs	r4, r1
 8000e30:	464b      	mov	r3, r9
 8000e32:	003d      	movs	r5, r7
 8000e34:	e784      	b.n	8000d40 <__aeabi_fsub+0x1cc>
 8000e36:	4662      	mov	r2, ip
 8000e38:	2a00      	cmp	r2, #0
 8000e3a:	d18b      	bne.n	8000d54 <__aeabi_fsub+0x1e0>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d192      	bne.n	8000d66 <__aeabi_fsub+0x1f2>
 8000e40:	2780      	movs	r7, #128	; 0x80
 8000e42:	2400      	movs	r4, #0
 8000e44:	22ff      	movs	r2, #255	; 0xff
 8000e46:	03ff      	lsls	r7, r7, #15
 8000e48:	e6df      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000e4a:	4663      	mov	r3, ip
 8000e4c:	000c      	movs	r4, r1
 8000e4e:	1af7      	subs	r7, r6, r3
 8000e50:	e6bf      	b.n	8000bd2 <__aeabi_fsub+0x5e>
 8000e52:	0030      	movs	r0, r6
 8000e54:	4460      	add	r0, ip
 8000e56:	2501      	movs	r5, #1
 8000e58:	0143      	lsls	r3, r0, #5
 8000e5a:	d400      	bmi.n	8000e5e <__aeabi_fsub+0x2ea>
 8000e5c:	e76c      	b.n	8000d38 <__aeabi_fsub+0x1c4>
 8000e5e:	2502      	movs	r5, #2
 8000e60:	e6f2      	b.n	8000c48 <__aeabi_fsub+0xd4>
 8000e62:	4663      	mov	r3, ip
 8000e64:	2501      	movs	r5, #1
 8000e66:	1b98      	subs	r0, r3, r6
 8000e68:	e6ae      	b.n	8000bc8 <__aeabi_fsub+0x54>
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	4664      	mov	r4, ip
 8000e6e:	4660      	mov	r0, ip
 8000e70:	40fc      	lsrs	r4, r7
 8000e72:	1bdf      	subs	r7, r3, r7
 8000e74:	40b8      	lsls	r0, r7
 8000e76:	1e43      	subs	r3, r0, #1
 8000e78:	4198      	sbcs	r0, r3
 8000e7a:	4320      	orrs	r0, r4
 8000e7c:	e79f      	b.n	8000dbe <__aeabi_fsub+0x24a>
 8000e7e:	0005      	movs	r5, r0
 8000e80:	e75e      	b.n	8000d40 <__aeabi_fsub+0x1cc>
 8000e82:	464b      	mov	r3, r9
 8000e84:	e771      	b.n	8000d6a <__aeabi_fsub+0x1f6>
 8000e86:	2320      	movs	r3, #32
 8000e88:	4665      	mov	r5, ip
 8000e8a:	4660      	mov	r0, ip
 8000e8c:	40cd      	lsrs	r5, r1
 8000e8e:	1a59      	subs	r1, r3, r1
 8000e90:	4088      	lsls	r0, r1
 8000e92:	1e43      	subs	r3, r0, #1
 8000e94:	4198      	sbcs	r0, r3
 8000e96:	4328      	orrs	r0, r5
 8000e98:	e71c      	b.n	8000cd4 <__aeabi_fsub+0x160>
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	000c      	movs	r4, r1
 8000e9e:	2501      	movs	r5, #1
 8000ea0:	1af0      	subs	r0, r6, r3
 8000ea2:	e691      	b.n	8000bc8 <__aeabi_fsub+0x54>
 8000ea4:	2e00      	cmp	r6, #0
 8000ea6:	d095      	beq.n	8000dd4 <__aeabi_fsub+0x260>
 8000ea8:	000c      	movs	r4, r1
 8000eaa:	464f      	mov	r7, r9
 8000eac:	2200      	movs	r2, #0
 8000eae:	e6ac      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000eb0:	464b      	mov	r3, r9
 8000eb2:	000d      	movs	r5, r1
 8000eb4:	e744      	b.n	8000d40 <__aeabi_fsub+0x1cc>
 8000eb6:	464f      	mov	r7, r9
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e6a6      	b.n	8000c0a <__aeabi_fsub+0x96>
 8000ebc:	fbffffff 	.word	0xfbffffff
 8000ec0:	7dffffff 	.word	0x7dffffff
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d000      	beq.n	8000eca <__aeabi_fsub+0x356>
 8000ec8:	e736      	b.n	8000d38 <__aeabi_fsub+0x1c4>
 8000eca:	2400      	movs	r4, #0
 8000ecc:	2700      	movs	r7, #0
 8000ece:	e69c      	b.n	8000c0a <__aeabi_fsub+0x96>

08000ed0 <__aeabi_f2iz>:
 8000ed0:	0241      	lsls	r1, r0, #9
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	0fc3      	lsrs	r3, r0, #31
 8000ed6:	0a49      	lsrs	r1, r1, #9
 8000ed8:	2000      	movs	r0, #0
 8000eda:	0e12      	lsrs	r2, r2, #24
 8000edc:	2a7e      	cmp	r2, #126	; 0x7e
 8000ede:	dd03      	ble.n	8000ee8 <__aeabi_f2iz+0x18>
 8000ee0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ee2:	dd02      	ble.n	8000eea <__aeabi_f2iz+0x1a>
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <__aeabi_f2iz+0x3c>)
 8000ee6:	1898      	adds	r0, r3, r2
 8000ee8:	4770      	bx	lr
 8000eea:	2080      	movs	r0, #128	; 0x80
 8000eec:	0400      	lsls	r0, r0, #16
 8000eee:	4301      	orrs	r1, r0
 8000ef0:	2a95      	cmp	r2, #149	; 0x95
 8000ef2:	dc07      	bgt.n	8000f04 <__aeabi_f2iz+0x34>
 8000ef4:	2096      	movs	r0, #150	; 0x96
 8000ef6:	1a82      	subs	r2, r0, r2
 8000ef8:	40d1      	lsrs	r1, r2
 8000efa:	4248      	negs	r0, r1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f3      	bne.n	8000ee8 <__aeabi_f2iz+0x18>
 8000f00:	0008      	movs	r0, r1
 8000f02:	e7f1      	b.n	8000ee8 <__aeabi_f2iz+0x18>
 8000f04:	3a96      	subs	r2, #150	; 0x96
 8000f06:	4091      	lsls	r1, r2
 8000f08:	e7f7      	b.n	8000efa <__aeabi_f2iz+0x2a>
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	7fffffff 	.word	0x7fffffff

08000f10 <__aeabi_i2f>:
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d013      	beq.n	8000f3e <__aeabi_i2f+0x2e>
 8000f16:	17c3      	asrs	r3, r0, #31
 8000f18:	18c6      	adds	r6, r0, r3
 8000f1a:	405e      	eors	r6, r3
 8000f1c:	0fc4      	lsrs	r4, r0, #31
 8000f1e:	0030      	movs	r0, r6
 8000f20:	f000 f844 	bl	8000fac <__clzsi2>
 8000f24:	239e      	movs	r3, #158	; 0x9e
 8000f26:	0005      	movs	r5, r0
 8000f28:	1a1b      	subs	r3, r3, r0
 8000f2a:	2b96      	cmp	r3, #150	; 0x96
 8000f2c:	dc0f      	bgt.n	8000f4e <__aeabi_i2f+0x3e>
 8000f2e:	2808      	cmp	r0, #8
 8000f30:	dd01      	ble.n	8000f36 <__aeabi_i2f+0x26>
 8000f32:	3d08      	subs	r5, #8
 8000f34:	40ae      	lsls	r6, r5
 8000f36:	0276      	lsls	r6, r6, #9
 8000f38:	0a76      	lsrs	r6, r6, #9
 8000f3a:	b2d8      	uxtb	r0, r3
 8000f3c:	e002      	b.n	8000f44 <__aeabi_i2f+0x34>
 8000f3e:	2400      	movs	r4, #0
 8000f40:	2000      	movs	r0, #0
 8000f42:	2600      	movs	r6, #0
 8000f44:	05c0      	lsls	r0, r0, #23
 8000f46:	4330      	orrs	r0, r6
 8000f48:	07e4      	lsls	r4, r4, #31
 8000f4a:	4320      	orrs	r0, r4
 8000f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f4e:	2b99      	cmp	r3, #153	; 0x99
 8000f50:	dd0c      	ble.n	8000f6c <__aeabi_i2f+0x5c>
 8000f52:	2205      	movs	r2, #5
 8000f54:	0031      	movs	r1, r6
 8000f56:	1a12      	subs	r2, r2, r0
 8000f58:	40d1      	lsrs	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	0001      	movs	r1, r0
 8000f5e:	0030      	movs	r0, r6
 8000f60:	311b      	adds	r1, #27
 8000f62:	4088      	lsls	r0, r1
 8000f64:	1e41      	subs	r1, r0, #1
 8000f66:	4188      	sbcs	r0, r1
 8000f68:	4302      	orrs	r2, r0
 8000f6a:	0016      	movs	r6, r2
 8000f6c:	2d05      	cmp	r5, #5
 8000f6e:	dc12      	bgt.n	8000f96 <__aeabi_i2f+0x86>
 8000f70:	0031      	movs	r1, r6
 8000f72:	4f0d      	ldr	r7, [pc, #52]	; (8000fa8 <__aeabi_i2f+0x98>)
 8000f74:	4039      	ands	r1, r7
 8000f76:	0772      	lsls	r2, r6, #29
 8000f78:	d009      	beq.n	8000f8e <__aeabi_i2f+0x7e>
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	4030      	ands	r0, r6
 8000f7e:	2804      	cmp	r0, #4
 8000f80:	d005      	beq.n	8000f8e <__aeabi_i2f+0x7e>
 8000f82:	3104      	adds	r1, #4
 8000f84:	014a      	lsls	r2, r1, #5
 8000f86:	d502      	bpl.n	8000f8e <__aeabi_i2f+0x7e>
 8000f88:	239f      	movs	r3, #159	; 0x9f
 8000f8a:	4039      	ands	r1, r7
 8000f8c:	1b5b      	subs	r3, r3, r5
 8000f8e:	0189      	lsls	r1, r1, #6
 8000f90:	0a4e      	lsrs	r6, r1, #9
 8000f92:	b2d8      	uxtb	r0, r3
 8000f94:	e7d6      	b.n	8000f44 <__aeabi_i2f+0x34>
 8000f96:	1f6a      	subs	r2, r5, #5
 8000f98:	4096      	lsls	r6, r2
 8000f9a:	0031      	movs	r1, r6
 8000f9c:	4f02      	ldr	r7, [pc, #8]	; (8000fa8 <__aeabi_i2f+0x98>)
 8000f9e:	4039      	ands	r1, r7
 8000fa0:	0772      	lsls	r2, r6, #29
 8000fa2:	d0f4      	beq.n	8000f8e <__aeabi_i2f+0x7e>
 8000fa4:	e7e9      	b.n	8000f7a <__aeabi_i2f+0x6a>
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	fbffffff 	.word	0xfbffffff

08000fac <__clzsi2>:
 8000fac:	211c      	movs	r1, #28
 8000fae:	2301      	movs	r3, #1
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	4298      	cmp	r0, r3
 8000fb4:	d301      	bcc.n	8000fba <__clzsi2+0xe>
 8000fb6:	0c00      	lsrs	r0, r0, #16
 8000fb8:	3910      	subs	r1, #16
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	d301      	bcc.n	8000fc4 <__clzsi2+0x18>
 8000fc0:	0a00      	lsrs	r0, r0, #8
 8000fc2:	3908      	subs	r1, #8
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d301      	bcc.n	8000fce <__clzsi2+0x22>
 8000fca:	0900      	lsrs	r0, r0, #4
 8000fcc:	3904      	subs	r1, #4
 8000fce:	a202      	add	r2, pc, #8	; (adr r2, 8000fd8 <__clzsi2+0x2c>)
 8000fd0:	5c10      	ldrb	r0, [r2, r0]
 8000fd2:	1840      	adds	r0, r0, r1
 8000fd4:	4770      	bx	lr
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	02020304 	.word	0x02020304
 8000fdc:	01010101 	.word	0x01010101
	...

08000fe8 <SSD1306_InitScreen>:
uint8_t _char_width;
uint8_t _font;

I2C_HandleTypeDef *ssd1306_i2c;

void SSD1306_InitScreen(I2C_HandleTypeDef *hi2c) {   // init screen
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

	ssd1306_i2c = hi2c;
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <SSD1306_InitScreen+0x10c>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]

	int _vccstate = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]

	_vccstate = SSD1306_SWITCHCAPVCC;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	60fb      	str	r3, [r7, #12]
	//GPIOA->ODR |= GPIO_ODR_8;

	// Init sequence
	if (SSD1306_command1(SSD1306_DISPLAYOFF) == HAL_OK) {                   // 0xAE
 8000ffe:	20ae      	movs	r0, #174	; 0xae
 8001000:	f000 f89a 	bl	8001138 <SSD1306_command1>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d164      	bne.n	80010d2 <SSD1306_InitScreen+0xea>
		// if first command doesn't work, give up

		SSD1306_command1(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8001008:	20d5      	movs	r0, #213	; 0xd5
 800100a:	f000 f895 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(0x80);                                  // the suggested ratio 0x80
 800100e:	2080      	movs	r0, #128	; 0x80
 8001010:	f000 f892 	bl	8001138 <SSD1306_command1>

		SSD1306_command1(SSD1306_SETMULTIPLEX);                  // 0xA8
 8001014:	20a8      	movs	r0, #168	; 0xa8
 8001016:	f000 f88f 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(SSD1306_LCDHEIGHT - 1);
 800101a:	203f      	movs	r0, #63	; 0x3f
 800101c:	f000 f88c 	bl	8001138 <SSD1306_command1>

		SSD1306_command1(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8001020:	20d3      	movs	r0, #211	; 0xd3
 8001022:	f000 f889 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(0x0);                                   // no offset
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f886 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(SSD1306_SETSTARTLINE | 0x0);            // line #0
 800102c:	2040      	movs	r0, #64	; 0x40
 800102e:	f000 f883 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(SSD1306_CHARGEPUMP);                    // 0x8D
 8001032:	208d      	movs	r0, #141	; 0x8d
 8001034:	f000 f880 	bl	8001138 <SSD1306_command1>

		if (_vccstate == SSD1306_EXTERNALVCC){
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d103      	bne.n	8001046 <SSD1306_InitScreen+0x5e>
			SSD1306_command1(0x10);
 800103e:	2010      	movs	r0, #16
 8001040:	f000 f87a 	bl	8001138 <SSD1306_command1>
 8001044:	e002      	b.n	800104c <SSD1306_InitScreen+0x64>
		} else {
			SSD1306_command1(0x14);
 8001046:	2014      	movs	r0, #20
 8001048:	f000 f876 	bl	8001138 <SSD1306_command1>
		}

		SSD1306_command1(SSD1306_MEMORYMODE);                    // 0x20
 800104c:	2020      	movs	r0, #32
 800104e:	f000 f873 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(0x00);                                  // 0x0 act like ks0108
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f870 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(SSD1306_SEGREMAP | 0x1);
 8001058:	20a1      	movs	r0, #161	; 0xa1
 800105a:	f000 f86d 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(SSD1306_COMSCANDEC);
 800105e:	20c8      	movs	r0, #200	; 0xc8
 8001060:	f000 f86a 	bl	8001138 <SSD1306_command1>

		SSD1306_command1(SSD1306_SETCOMPINS);                    // 0xDA
 8001064:	20da      	movs	r0, #218	; 0xda
 8001066:	f000 f867 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(0x12);
 800106a:	2012      	movs	r0, #18
 800106c:	f000 f864 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(SSD1306_SETCONTRAST);                   // 0x81
 8001070:	2081      	movs	r0, #129	; 0x81
 8001072:	f000 f861 	bl	8001138 <SSD1306_command1>

		if (_vccstate == SSD1306_EXTERNALVCC){
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d103      	bne.n	8001084 <SSD1306_InitScreen+0x9c>
			SSD1306_command1(0x9F);
 800107c:	209f      	movs	r0, #159	; 0x9f
 800107e:	f000 f85b 	bl	8001138 <SSD1306_command1>
 8001082:	e002      	b.n	800108a <SSD1306_InitScreen+0xa2>
		} else {
			SSD1306_command1(0xCF);
 8001084:	20cf      	movs	r0, #207	; 0xcf
 8001086:	f000 f857 	bl	8001138 <SSD1306_command1>
		}

		SSD1306_command1(SSD1306_SETPRECHARGE);                  // 0xd9
 800108a:	20d9      	movs	r0, #217	; 0xd9
 800108c:	f000 f854 	bl	8001138 <SSD1306_command1>

		if (_vccstate == SSD1306_EXTERNALVCC) {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d103      	bne.n	800109e <SSD1306_InitScreen+0xb6>
			SSD1306_command1(0x22);
 8001096:	2022      	movs	r0, #34	; 0x22
 8001098:	f000 f84e 	bl	8001138 <SSD1306_command1>
 800109c:	e002      	b.n	80010a4 <SSD1306_InitScreen+0xbc>
		} else {
			SSD1306_command1(0xF1);
 800109e:	20f1      	movs	r0, #241	; 0xf1
 80010a0:	f000 f84a 	bl	8001138 <SSD1306_command1>
		}

		SSD1306_command1(SSD1306_SETVCOMDETECT);                 // 0xDB
 80010a4:	20db      	movs	r0, #219	; 0xdb
 80010a6:	f000 f847 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(0x40);
 80010aa:	2040      	movs	r0, #64	; 0x40
 80010ac:	f000 f844 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80010b0:	20a4      	movs	r0, #164	; 0xa4
 80010b2:	f000 f841 	bl	8001138 <SSD1306_command1>
		SSD1306_command1(SSD1306_NORMALDISPLAY);                 // 0xA6
 80010b6:	20a6      	movs	r0, #166	; 0xa6
 80010b8:	f000 f83e 	bl	8001138 <SSD1306_command1>

		SSD1306_command1(SSD1306_DEACTIVATE_SCROLL);
 80010bc:	202e      	movs	r0, #46	; 0x2e
 80010be:	f000 f83b 	bl	8001138 <SSD1306_command1>

		SSD1306_command1(SSD1306_DISPLAYON);//--turn on oled panel
 80010c2:	20af      	movs	r0, #175	; 0xaf
 80010c4:	f000 f838 	bl	8001138 <SSD1306_command1>
		HAL_Delay(10);
 80010c8:	200a      	movs	r0, #10
 80010ca:	f003 fcc5 	bl	8004a58 <HAL_Delay>
		SSD1306_clearDisplay();
 80010ce:	f000 fa33 	bl	8001538 <SSD1306_clearDisplay>


	}

	SSD1306_SetupFrameBuf();   // write initial conditions
 80010d2:	f000 fa5f 	bl	8001594 <SSD1306_SetupFrameBuf>

	_char_width = FONT8x8_WIDTH;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <SSD1306_InitScreen+0x110>)
 80010d8:	2207      	movs	r2, #7
 80010da:	701a      	strb	r2, [r3, #0]
	_font = FONT_8x8;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <SSD1306_InitScreen+0x114>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
	timeout_cnt = TIMEOUT_INIT;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <SSD1306_InitScreen+0x118>)
 80010e4:	22c8      	movs	r2, #200	; 0xc8
 80010e6:	0052      	lsls	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	2000073c 	.word	0x2000073c
 80010f8:	20000738 	.word	0x20000738
 80010fc:	20000739 	.word	0x20000739
 8001100:	20000734 	.word	0x20000734

08001104 <SSD1306_i2cWrite>:

// I2C stuff

HAL_StatusTypeDef SSD1306_i2cWrite( uint8_t *buf, uint16_t num_bytes) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	000a      	movs	r2, r1
 800110e:	1cbb      	adds	r3, r7, #2
 8001110:	801a      	strh	r2, [r3, #0]
	}

	return 1;
	*/

	return HAL_I2C_Master_Transmit(ssd1306_i2c, SSD1306_SLAVE_ADDR,
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <SSD1306_i2cWrite+0x30>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	1cbb      	adds	r3, r7, #2
 8001118:	8819      	ldrh	r1, [r3, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	2301      	movs	r3, #1
 800111e:	425b      	negs	r3, r3
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	000b      	movs	r3, r1
 8001124:	2178      	movs	r1, #120	; 0x78
 8001126:	f004 ff2f 	bl	8005f88 <HAL_I2C_Master_Transmit>
 800112a:	0003      	movs	r3, r0
			buf, num_bytes, HAL_MAX_DELAY);
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000073c 	.word	0x2000073c

08001138 <SSD1306_command1>:
//
//	I2C1->ICR |= I2C_ICR_OVRCF | I2C_ICR_ARLOCF | I2C_ICR_BERRCF;
//	I2C1->ICR |= I2C_ICR_STOPCF | I2C_ICR_NACKCF | I2C_ICR_ADDRCF;
//}

HAL_StatusTypeDef SSD1306_command1(uint8_t c) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	0002      	movs	r2, r0
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	701a      	strb	r2, [r3, #0]

	// I2C
	uint8_t control = 0x00;   // Co = 0, D/C = 0
 8001144:	200f      	movs	r0, #15
 8001146:	183b      	adds	r3, r7, r0
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2];

	cmd[0] = control;
 800114c:	210c      	movs	r1, #12
 800114e:	187b      	adds	r3, r7, r1
 8001150:	183a      	adds	r2, r7, r0
 8001152:	7812      	ldrb	r2, [r2, #0]
 8001154:	701a      	strb	r2, [r3, #0]
	cmd[1] = c;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	1dfa      	adds	r2, r7, #7
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	705a      	strb	r2, [r3, #1]
	return SSD1306_i2cWrite(cmd, 2);
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2102      	movs	r1, #2
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff ffce 	bl	8001104 <SSD1306_i2cWrite>
 8001168:	0003      	movs	r3, r0
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}

08001172 <SSD1306_sendCommand>:

HAL_StatusTypeDef SSD1306_sendCommand(uint8_t command, uint8_t param1, uint8_t param2) {
 8001172:	b590      	push	{r4, r7, lr}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	0004      	movs	r4, r0
 800117a:	0008      	movs	r0, r1
 800117c:	0011      	movs	r1, r2
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	1c22      	adds	r2, r4, #0
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	1dbb      	adds	r3, r7, #6
 8001186:	1c02      	adds	r2, r0, #0
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	1d7b      	adds	r3, r7, #5
 800118c:	1c0a      	adds	r2, r1, #0
 800118e:	701a      	strb	r2, [r3, #0]
	//  Note continuationbit is set, so COMMAND_MODE must be
	//  repeated before each databyte that serves as parameter!

	uint8_t databytes[6];

	databytes[0] = COMMAND_MODE;
 8001190:	2108      	movs	r1, #8
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	701a      	strb	r2, [r3, #0]
	databytes[1] = command;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	1dfa      	adds	r2, r7, #7
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	705a      	strb	r2, [r3, #1]
	databytes[2] = COMMAND_MODE;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	709a      	strb	r2, [r3, #2]
	databytes[3] = param1;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	1dba      	adds	r2, r7, #6
 80011aa:	7812      	ldrb	r2, [r2, #0]
 80011ac:	70da      	strb	r2, [r3, #3]
	databytes[4] = COMMAND_MODE;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	711a      	strb	r2, [r3, #4]
	databytes[5] = param2;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1d7a      	adds	r2, r7, #5
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	715a      	strb	r2, [r3, #5]
	return SSD1306_i2cWrite(databytes, 6);    // Write command
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2106      	movs	r1, #6
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ff9f 	bl	8001104 <SSD1306_i2cWrite>
 80011c6:	0003      	movs	r3, r0

}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b005      	add	sp, #20
 80011ce:	bd90      	pop	{r4, r7, pc}

080011d0 <SSD1306_sendData>:

HAL_StatusTypeDef SSD1306_sendData(uint8_t data){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	701a      	strb	r2, [r3, #0]

	uint8_t databytes[2];

	databytes[0] = DATA_MODE;
 80011dc:	210c      	movs	r1, #12
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2240      	movs	r2, #64	; 0x40
 80011e2:	701a      	strb	r2, [r3, #0]
	databytes[1] = data;
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	705a      	strb	r2, [r3, #1]
	return SSD1306_i2cWrite(databytes, 2);
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2102      	movs	r1, #2
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff87 	bl	8001104 <SSD1306_i2cWrite>
 80011f6:	0003      	movs	r3, r0
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b004      	add	sp, #16
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SSD1306_setPageAddress>:

HAL_StatusTypeDef SSD1306_setPageAddress(uint8_t start, uint8_t end) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	1dbb      	adds	r3, r7, #6
 800120e:	1c0a      	adds	r2, r1, #0
 8001210:	701a      	strb	r2, [r3, #0]
	return SSD1306_sendCommand(SET_PAGE_ADDRESS, start, end);
 8001212:	1dbb      	adds	r3, r7, #6
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0019      	movs	r1, r3
 800121c:	2022      	movs	r0, #34	; 0x22
 800121e:	f7ff ffa8 	bl	8001172 <SSD1306_sendCommand>
 8001222:	0003      	movs	r3, r0
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}

0800122c <SSD1306_setColumnAddress>:
HAL_StatusTypeDef SSD1306_setColumnAddress(uint8_t start, uint8_t end) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	0002      	movs	r2, r0
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	1dbb      	adds	r3, r7, #6
 800123a:	1c0a      	adds	r2, r1, #0
 800123c:	701a      	strb	r2, [r3, #0]
	return SSD1306_sendCommand(SET_COLUMN_ADDRESS, start, end);
 800123e:	1dbb      	adds	r3, r7, #6
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0019      	movs	r1, r3
 8001248:	2021      	movs	r0, #33	; 0x21
 800124a:	f7ff ff92 	bl	8001172 <SSD1306_sendCommand>
 800124e:	0003      	movs	r3, r0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}

08001258 <SSD1306_writeString>:
           _sendData( font_16x12_1[char_index][i] );
      }
}*/


void SSD1306_writeString( uint8_t col, const char * text) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	0002      	movs	r2, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	701a      	strb	r2, [r3, #0]
	// screenbuffered version of above function
	// row is 0 thru 7, col is 0 thr 127
	uint16_t index = 0;
 8001266:	230e      	movs	r3, #14
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2200      	movs	r2, #0
 800126c:	801a      	strh	r2, [r3, #0]
	uint16_t len = strlen(text);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	0018      	movs	r0, r3
 8001272:	f7fe ff49 	bl	8000108 <strlen>
 8001276:	0002      	movs	r2, r0
 8001278:	210c      	movs	r1, #12
 800127a:	187b      	adds	r3, r7, r1
 800127c:	801a      	strh	r2, [r3, #0]
	if (len > 32) {
 800127e:	000a      	movs	r2, r1
 8001280:	18bb      	adds	r3, r7, r2
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	2b20      	cmp	r3, #32
 8001286:	d91a      	bls.n	80012be <SSD1306_writeString+0x66>
		len = 32;
 8001288:	18bb      	adds	r3, r7, r2
 800128a:	2220      	movs	r2, #32
 800128c:	801a      	strh	r2, [r3, #0]
	}

	while ((col < MAX_COL) && (index < len)) {
 800128e:	e016      	b.n	80012be <SSD1306_writeString+0x66>
		// write line, starting at given position
		// dont write if its too long
		SSD1306_writeCharToBuf(col, text[index++]);
 8001290:	220e      	movs	r2, #14
 8001292:	18bb      	adds	r3, r7, r2
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	18ba      	adds	r2, r7, r2
 8001298:	1c59      	adds	r1, r3, #1
 800129a:	8011      	strh	r1, [r2, #0]
 800129c:	001a      	movs	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	189b      	adds	r3, r3, r2
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 f842 	bl	8001334 <SSD1306_writeCharToBuf>
		col+=_char_width;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <SSD1306_writeString+0x88>)
 80012b2:	7819      	ldrb	r1, [r3, #0]
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	1dfa      	adds	r2, r7, #7
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	188a      	adds	r2, r1, r2
 80012bc:	701a      	strb	r2, [r3, #0]
	while ((col < MAX_COL) && (index < len)) {
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b7e      	cmp	r3, #126	; 0x7e
 80012c4:	d807      	bhi.n	80012d6 <SSD1306_writeString+0x7e>
 80012c6:	230e      	movs	r3, #14
 80012c8:	18fa      	adds	r2, r7, r3
 80012ca:	230c      	movs	r3, #12
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3dc      	bcc.n	8001290 <SSD1306_writeString+0x38>
	}

} 
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	20000738 	.word	0x20000738

080012e4 <SSD1306_setFont>:
		col+=_char_width;
	}while(mult != 0);

} 

void SSD1306_setFont( uint8_t font ) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	0002      	movs	r2, r0
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	701a      	strb	r2, [r3, #0]

	_font = font;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <SSD1306_setFont+0x48>)
 80012f2:	1dfa      	adds	r2, r7, #7
 80012f4:	7812      	ldrb	r2, [r2, #0]
 80012f6:	701a      	strb	r2, [r3, #0]

	if (font == FONT_8x8) { _char_width = FONT8x8_WIDTH; }
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <SSD1306_setFont+0x22>
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <SSD1306_setFont+0x4c>)
 8001302:	2207      	movs	r2, #7
 8001304:	701a      	strb	r2, [r3, #0]
	if (font == FONT_16x12_0) { _char_width = FONT16x12_WIDTH; }
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d102      	bne.n	8001314 <SSD1306_setFont+0x30>
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <SSD1306_setFont+0x4c>)
 8001310:	220c      	movs	r2, #12
 8001312:	701a      	strb	r2, [r3, #0]
	if (font == FONT_16x12_1) { _char_width = FONT16x12_WIDTH; }
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d102      	bne.n	8001322 <SSD1306_setFont+0x3e>
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SSD1306_setFont+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	701a      	strb	r2, [r3, #0]

}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	20000739 	.word	0x20000739
 8001330:	20000738 	.word	0x20000738

08001334 <SSD1306_writeCharToBuf>:



void SSD1306_writeCharToBuf( uint8_t col, char chr ) {
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	0002      	movs	r2, r0
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	1dbb      	adds	r3, r7, #6
 8001342:	1c0a      	adds	r2, r1, #0
 8001344:	701a      	strb	r2, [r3, #0]

	uint8_t char_index = chr - 0x20;
 8001346:	230a      	movs	r3, #10
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	1dba      	adds	r2, r7, #6
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	3a20      	subs	r2, #32
 8001350:	701a      	strb	r2, [r3, #0]

	uint16_t k = FRAME_BUF_OFFSET + col;
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b29a      	uxth	r2, r3
 8001358:	230e      	movs	r3, #14
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	320d      	adds	r2, #13
 800135e:	801a      	strh	r2, [r3, #0]

	if (col > MAX_COL) {col = MAX_COL;} //will overwrite but whatever
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	da02      	bge.n	8001370 <SSD1306_writeCharToBuf+0x3c>
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	227f      	movs	r2, #127	; 0x7f
 800136e:	701a      	strb	r2, [r3, #0]



	if (_font == FONT_8x8) {
 8001370:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <SSD1306_writeCharToBuf+0x16c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d12b      	bne.n	80013d0 <SSD1306_writeCharToBuf+0x9c>
		for (uint8_t i = 0; i < FONT8x8_WIDTH; i++) {
 8001378:	230d      	movs	r3, #13
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e020      	b.n	80013c4 <SSD1306_writeCharToBuf+0x90>
			if (k >= (COLUMNS+FRAME_BUF_OFFSET)) { break; }
 8001382:	210e      	movs	r1, #14
 8001384:	187b      	adds	r3, r7, r1
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	2b8c      	cmp	r3, #140	; 0x8c
 800138a:	d900      	bls.n	800138e <SSD1306_writeCharToBuf+0x5a>
 800138c:	e07e      	b.n	800148c <SSD1306_writeCharToBuf+0x158>
			framebuf[k] = font_8x8[char_index][i];
 800138e:	230a      	movs	r3, #10
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	260d      	movs	r6, #13
 8001396:	19bb      	adds	r3, r7, r6
 8001398:	7818      	ldrb	r0, [r3, #0]
 800139a:	000d      	movs	r5, r1
 800139c:	187b      	adds	r3, r7, r1
 800139e:	8819      	ldrh	r1, [r3, #0]
 80013a0:	4c40      	ldr	r4, [pc, #256]	; (80014a4 <SSD1306_writeCharToBuf+0x170>)
 80013a2:	0013      	movs	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	18e3      	adds	r3, r4, r3
 80013aa:	5c1a      	ldrb	r2, [r3, r0]
 80013ac:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <SSD1306_writeCharToBuf+0x174>)
 80013ae:	545a      	strb	r2, [r3, r1]
			k++;
 80013b0:	197b      	adds	r3, r7, r5
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	197b      	adds	r3, r7, r5
 80013b6:	3201      	adds	r2, #1
 80013b8:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < FONT8x8_WIDTH; i++) {
 80013ba:	19bb      	adds	r3, r7, r6
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	19bb      	adds	r3, r7, r6
 80013c0:	3201      	adds	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	230d      	movs	r3, #13
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d9d9      	bls.n	8001382 <SSD1306_writeCharToBuf+0x4e>
			k++;
		}
	}


}
 80013ce:	e062      	b.n	8001496 <SSD1306_writeCharToBuf+0x162>
	} else if (_font == FONT_16x12_0) {
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <SSD1306_writeCharToBuf+0x16c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d12a      	bne.n	800142e <SSD1306_writeCharToBuf+0xfa>
		for (uint8_t i = 0; i < FONT16x12_WIDTH; i++) {
 80013d8:	230c      	movs	r3, #12
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e01f      	b.n	8001422 <SSD1306_writeCharToBuf+0xee>
			if (k >= (COLUMNS+FRAME_BUF_OFFSET)) { break; }
 80013e2:	250e      	movs	r5, #14
 80013e4:	197b      	adds	r3, r7, r5
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b8c      	cmp	r3, #140	; 0x8c
 80013ea:	d851      	bhi.n	8001490 <SSD1306_writeCharToBuf+0x15c>
			framebuf[k] = font_16x12_0[char_index][i];
 80013ec:	230a      	movs	r3, #10
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	260c      	movs	r6, #12
 80013f4:	19bb      	adds	r3, r7, r6
 80013f6:	7818      	ldrb	r0, [r3, #0]
 80013f8:	197b      	adds	r3, r7, r5
 80013fa:	8819      	ldrh	r1, [r3, #0]
 80013fc:	4c2b      	ldr	r4, [pc, #172]	; (80014ac <SSD1306_writeCharToBuf+0x178>)
 80013fe:	0013      	movs	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	189b      	adds	r3, r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	18e3      	adds	r3, r4, r3
 8001408:	5c1a      	ldrb	r2, [r3, r0]
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <SSD1306_writeCharToBuf+0x174>)
 800140c:	545a      	strb	r2, [r3, r1]
			k++;
 800140e:	197b      	adds	r3, r7, r5
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	197b      	adds	r3, r7, r5
 8001414:	3201      	adds	r2, #1
 8001416:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < FONT16x12_WIDTH; i++) {
 8001418:	19bb      	adds	r3, r7, r6
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	19bb      	adds	r3, r7, r6
 800141e:	3201      	adds	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	230c      	movs	r3, #12
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b0b      	cmp	r3, #11
 800142a:	d9da      	bls.n	80013e2 <SSD1306_writeCharToBuf+0xae>
}
 800142c:	e033      	b.n	8001496 <SSD1306_writeCharToBuf+0x162>
	} else if (_font == FONT_16x12_1) {
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <SSD1306_writeCharToBuf+0x16c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d12f      	bne.n	8001496 <SSD1306_writeCharToBuf+0x162>
		for (uint8_t i = 0; i < FONT16x12_WIDTH; i++) {
 8001436:	230b      	movs	r3, #11
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e01f      	b.n	8001480 <SSD1306_writeCharToBuf+0x14c>
			if (k >= (COLUMNS+FRAME_BUF_OFFSET)) { break; }
 8001440:	250e      	movs	r5, #14
 8001442:	197b      	adds	r3, r7, r5
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	2b8c      	cmp	r3, #140	; 0x8c
 8001448:	d824      	bhi.n	8001494 <SSD1306_writeCharToBuf+0x160>
			framebuf[k] = font_16x12_1[char_index][i];
 800144a:	230a      	movs	r3, #10
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	260b      	movs	r6, #11
 8001452:	19bb      	adds	r3, r7, r6
 8001454:	7818      	ldrb	r0, [r3, #0]
 8001456:	197b      	adds	r3, r7, r5
 8001458:	8819      	ldrh	r1, [r3, #0]
 800145a:	4c15      	ldr	r4, [pc, #84]	; (80014b0 <SSD1306_writeCharToBuf+0x17c>)
 800145c:	0013      	movs	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	189b      	adds	r3, r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	18e3      	adds	r3, r4, r3
 8001466:	5c1a      	ldrb	r2, [r3, r0]
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <SSD1306_writeCharToBuf+0x174>)
 800146a:	545a      	strb	r2, [r3, r1]
			k++;
 800146c:	197b      	adds	r3, r7, r5
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	197b      	adds	r3, r7, r5
 8001472:	3201      	adds	r2, #1
 8001474:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < FONT16x12_WIDTH; i++) {
 8001476:	19bb      	adds	r3, r7, r6
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	19bb      	adds	r3, r7, r6
 800147c:	3201      	adds	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	230b      	movs	r3, #11
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b0b      	cmp	r3, #11
 8001488:	d9da      	bls.n	8001440 <SSD1306_writeCharToBuf+0x10c>
}
 800148a:	e004      	b.n	8001496 <SSD1306_writeCharToBuf+0x162>
			if (k >= (COLUMNS+FRAME_BUF_OFFSET)) { break; }
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	e002      	b.n	8001496 <SSD1306_writeCharToBuf+0x162>
			if (k >= (COLUMNS+FRAME_BUF_OFFSET)) { break; }
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	e000      	b.n	8001496 <SSD1306_writeCharToBuf+0x162>
			if (k >= (COLUMNS+FRAME_BUF_OFFSET)) { break; }
 8001494:	46c0      	nop			; (mov r8, r8)
}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b005      	add	sp, #20
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	20000739 	.word	0x20000739
 80014a4:	0800aec4 	.word	0x0800aec4
 80014a8:	200006a4 	.word	0x200006a4
 80014ac:	0800b164 	.word	0x0800b164
 80014b0:	0800b5e4 	.word	0x0800b5e4

080014b4 <SSD1306_writeFrameBufRow>:

HAL_StatusTypeDef SSD1306_writeFrameBufRow( uint8_t page ) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0002      	movs	r2, r0
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	701a      	strb	r2, [r3, #0]

	framebuf[9] = page;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <SSD1306_writeFrameBufRow+0x28>)
 80014c2:	1dfa      	adds	r2, r7, #7
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	725a      	strb	r2, [r3, #9]

	//SSD1306_i2cWrite(framebuf, COLUMNS+FRAME_BUF_OFFSET);   // takes about 3.2ms to write whole thing
	return SSD1306_i2cWrite(framebuf, COLUMNS+FRAME_BUF_OFFSET);  // takes 18 MICROSECONDS!!! sheeeeeet
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SSD1306_writeFrameBufRow+0x28>)
 80014ca:	218d      	movs	r1, #141	; 0x8d
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fe19 	bl	8001104 <SSD1306_i2cWrite>
 80014d2:	0003      	movs	r3, r0
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b002      	add	sp, #8
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200006a4 	.word	0x200006a4

080014e0 <SSD1306_WriteRow>:

HAL_StatusTypeDef SSD1306_WriteRow( uint8_t page ) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	0002      	movs	r2, r0
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	701a      	strb	r2, [r3, #0]
	return SSD1306_writeFrameBufRow( page );
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff ffdf 	bl	80014b4 <SSD1306_writeFrameBufRow>
 80014f6:	0003      	movs	r3, r0
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}

08001500 <SSD1306_ClearBuf>:

void SSD1306_ClearBuf() {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	for (uint8_t j = FRAME_BUF_OFFSET; j < COLUMNS+FRAME_BUF_OFFSET; j++) {
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	220d      	movs	r2, #13
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	e009      	b.n	8001522 <SSD1306_ClearBuf+0x22>
		framebuf[j] = 0;
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <SSD1306_ClearBuf+0x34>)
 8001514:	2100      	movs	r1, #0
 8001516:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = FRAME_BUF_OFFSET; j < COLUMNS+FRAME_BUF_OFFSET; j++) {
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	3201      	adds	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b8c      	cmp	r3, #140	; 0x8c
 8001528:	d9f1      	bls.n	800150e <SSD1306_ClearBuf+0xe>
	}

}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200006a4 	.word	0x200006a4

08001538 <SSD1306_clearDisplay>:
// Standard version
void SSD1306_clearDisplay() {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

	//setDisplayOff();
	SSD1306_setPageAddress(0, MAX_PAGE);  // all pages
 800153e:	2107      	movs	r1, #7
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fe5d 	bl	8001200 <SSD1306_setPageAddress>
	SSD1306_setColumnAddress(0, MAX_COL); // all columns
 8001546:	217f      	movs	r1, #127	; 0x7f
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fe6f 	bl	800122c <SSD1306_setColumnAddress>

	for (uint8_t page = 0; page < PAGES; page++) {
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e015      	b.n	8001582 <SSD1306_clearDisplay+0x4a>
		for (uint8_t col = 0; col < COLUMNS; col++) {
 8001556:	1dbb      	adds	r3, r7, #6
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e007      	b.n	800156e <SSD1306_clearDisplay+0x36>
			SSD1306_sendData(0x00);
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff fe36 	bl	80011d0 <SSD1306_sendData>
		for (uint8_t col = 0; col < COLUMNS; col++) {
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	3201      	adds	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	1dbb      	adds	r3, r7, #6
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b25b      	sxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	daf2      	bge.n	800155e <SSD1306_clearDisplay+0x26>
	for (uint8_t page = 0; page < PAGES; page++) {
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	781a      	ldrb	r2, [r3, #0]
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	3201      	adds	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b07      	cmp	r3, #7
 8001588:	d9e5      	bls.n	8001556 <SSD1306_clearDisplay+0x1e>
		}
	}

}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}

08001594 <SSD1306_SetupFrameBuf>:


void SSD1306_SetupFrameBuf() {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < PAGES; i++) {
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e02b      	b.n	80015fa <SSD1306_SetupFrameBuf+0x66>

		framebuf[0] = COMMAND_MODE;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	701a      	strb	r2, [r3, #0]
		framebuf[1] = SET_COLUMN_ADDRESS;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015aa:	2221      	movs	r2, #33	; 0x21
 80015ac:	705a      	strb	r2, [r3, #1]
		framebuf[2] = COMMAND_MODE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	709a      	strb	r2, [r3, #2]
		framebuf[3] = 0;
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	70da      	strb	r2, [r3, #3]
		framebuf[4] = COMMAND_MODE;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	711a      	strb	r2, [r3, #4]
		framebuf[5] = MAX_COL;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015c2:	227f      	movs	r2, #127	; 0x7f
 80015c4:	715a      	strb	r2, [r3, #5]
		framebuf[6] = COMMAND_MODE;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	719a      	strb	r2, [r3, #6]
		framebuf[7] = SET_PAGE_ADDRESS;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015ce:	2222      	movs	r2, #34	; 0x22
 80015d0:	71da      	strb	r2, [r3, #7]
		framebuf[8] = COMMAND_MODE;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	721a      	strb	r2, [r3, #8]
		framebuf[9] = 0;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015da:	2200      	movs	r2, #0
 80015dc:	725a      	strb	r2, [r3, #9]
		framebuf[10] = COMMAND_MODE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	729a      	strb	r2, [r3, #10]
		framebuf[11] = MAX_PAGE;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	72da      	strb	r2, [r3, #11]
		framebuf[12] = DATA_MODE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <SSD1306_SetupFrameBuf+0x78>)
 80015ec:	2240      	movs	r2, #64	; 0x40
 80015ee:	731a      	strb	r2, [r3, #12]
	for (uint8_t i = 0; i < PAGES; i++) {
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	3201      	adds	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b07      	cmp	r3, #7
 8001600:	d9cf      	bls.n	80015a2 <SSD1306_SetupFrameBuf+0xe>
	}
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200006a4 	.word	0x200006a4

08001610 <backup_settings>:
				.press_time = DEFAULT_PRESS_TIME,
				.burps = DEFAULT_BURPS
		},
};

void backup_settings(Config* config) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	config->flags |= DEFAULT_CONFIG_FLAGS;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	4313      	orrs	r3, r2
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	801a      	strh	r2, [r3, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, config->regs[0]);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <backup_settings+0x64>)
 800162c:	2100      	movs	r1, #0
 800162e:	0018      	movs	r0, r3
 8001630:	f006 fc57 	bl	8007ee2 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, config->regs[1]);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <backup_settings+0x64>)
 800163a:	2101      	movs	r1, #1
 800163c:	0018      	movs	r0, r3
 800163e:	f006 fc50 	bl	8007ee2 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, config->regs[2]);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <backup_settings+0x64>)
 8001648:	2102      	movs	r1, #2
 800164a:	0018      	movs	r0, r3
 800164c:	f006 fc49 	bl	8007ee2 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, config->regs[3]);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <backup_settings+0x64>)
 8001656:	2103      	movs	r1, #3
 8001658:	0018      	movs	r0, r3
 800165a:	f006 fc42 	bl	8007ee2 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, config->regs[4]);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <backup_settings+0x64>)
 8001664:	2104      	movs	r1, #4
 8001666:	0018      	movs	r0, r3
 8001668:	f006 fc3b 	bl	8007ee2 <HAL_RTCEx_BKUPWrite>
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200008bc 	.word	0x200008bc

08001678 <restore_settings>:

void restore_settings(Config* config) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	config->regs[0] = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <restore_settings+0x74>)
 8001682:	2100      	movs	r1, #0
 8001684:	0018      	movs	r0, r3
 8001686:	f006 fc44 	bl	8007f12 <HAL_RTCEx_BKUPRead>
 800168a:	0002      	movs	r2, r0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	601a      	str	r2, [r3, #0]
	config->regs[1] = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <restore_settings+0x74>)
 8001692:	2101      	movs	r1, #1
 8001694:	0018      	movs	r0, r3
 8001696:	f006 fc3c 	bl	8007f12 <HAL_RTCEx_BKUPRead>
 800169a:	0002      	movs	r2, r0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	605a      	str	r2, [r3, #4]
	config->regs[2] = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <restore_settings+0x74>)
 80016a2:	2102      	movs	r1, #2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f006 fc34 	bl	8007f12 <HAL_RTCEx_BKUPRead>
 80016aa:	0002      	movs	r2, r0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
	config->regs[3] = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <restore_settings+0x74>)
 80016b2:	2103      	movs	r1, #3
 80016b4:	0018      	movs	r0, r3
 80016b6:	f006 fc2c 	bl	8007f12 <HAL_RTCEx_BKUPRead>
 80016ba:	0002      	movs	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	60da      	str	r2, [r3, #12]
	config->regs[4] = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <restore_settings+0x74>)
 80016c2:	2104      	movs	r1, #4
 80016c4:	0018      	movs	r0, r3
 80016c6:	f006 fc24 	bl	8007f12 <HAL_RTCEx_BKUPRead>
 80016ca:	0002      	movs	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	611a      	str	r2, [r3, #16]

	if (!(config->flags & DEFAULT_CONFIG_FLAGS)) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	001a      	movs	r2, r3
 80016d6:	2301      	movs	r3, #1
 80016d8:	4013      	ands	r3, r2
 80016da:	d103      	bne.n	80016e4 <restore_settings+0x6c>
		reset_defaults(config);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	0018      	movs	r0, r3
 80016e0:	f000 f806 	bl	80016f0 <reset_defaults>
	}
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200008bc 	.word	0x200008bc

080016f0 <reset_defaults>:

void reset_defaults(Config* config) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	config->flags = DEFAULT_CONFIG_FLAGS;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	801a      	strh	r2, [r3, #0]
	config->top_temp = DEFAULT_TOP_TEMP;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2228      	movs	r2, #40	; 0x28
 8001702:	4252      	negs	r2, r2
 8001704:	805a      	strh	r2, [r3, #2]
	config->bottom_temp = DEFAULT_BOTTOM_TEMP;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2228      	movs	r2, #40	; 0x28
 800170a:	4252      	negs	r2, r2
 800170c:	809a      	strh	r2, [r3, #4]
	config->press_time = DEFAULT_PRESS_TIME;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	22fa      	movs	r2, #250	; 0xfa
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	80da      	strh	r2, [r3, #6]
	config->burps = DEFAULT_BURPS;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	811a      	strh	r2, [r3, #8]
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <config_to_setpoints>:

void config_to_setpoints(Press* press) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	if (press->config.flags & CONFIG_UNITS_FLAG) { // if using celsius
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2250      	movs	r2, #80	; 0x50
 8001730:	5a9b      	ldrh	r3, [r3, r2]
 8001732:	001a      	movs	r2, r3
 8001734:	2304      	movs	r3, #4
 8001736:	4013      	ands	r3, r2
 8001738:	d00a      	beq.n	8001750 <config_to_setpoints+0x2c>
		press->thermal_setpoint.top_temp = press->config.top_temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2252      	movs	r2, #82	; 0x52
 800173e:	5e9a      	ldrsh	r2, [r3, r2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	841a      	strh	r2, [r3, #32]
		press->thermal_setpoint.bottom_temp = press->config.bottom_temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2254      	movs	r2, #84	; 0x54
 8001748:	5e9a      	ldrsh	r2, [r3, r2]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	845a      	strh	r2, [r3, #34]	; 0x22
 800174e:	e01f      	b.n	8001790 <config_to_setpoints+0x6c>
	} else {
		press->thermal_setpoint.top_temp = __F_TO_C(press->config.top_temp);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2252      	movs	r2, #82	; 0x52
 8001754:	5e9b      	ldrsh	r3, [r3, r2]
 8001756:	3b20      	subs	r3, #32
 8001758:	001a      	movs	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	189b      	adds	r3, r3, r2
 8001760:	2109      	movs	r1, #9
 8001762:	0018      	movs	r0, r3
 8001764:	f7fe fd6c 	bl	8000240 <__divsi3>
 8001768:	0003      	movs	r3, r0
 800176a:	b21a      	sxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	841a      	strh	r2, [r3, #32]
		press->thermal_setpoint.bottom_temp = __F_TO_C(press->config.bottom_temp);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2254      	movs	r2, #84	; 0x54
 8001774:	5e9b      	ldrsh	r3, [r3, r2]
 8001776:	3b20      	subs	r3, #32
 8001778:	001a      	movs	r2, r3
 800177a:	0013      	movs	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	189b      	adds	r3, r3, r2
 8001780:	2109      	movs	r1, #9
 8001782:	0018      	movs	r0, r3
 8001784:	f7fe fd5c 	bl	8000240 <__divsi3>
 8001788:	0003      	movs	r3, r0
 800178a:	b21a      	sxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	845a      	strh	r2, [r3, #34]	; 0x22
	}
	press->press_setpoint.press_time_ticks = press->config.press_time;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2256      	movs	r2, #86	; 0x56
 8001794:	5e9b      	ldrsh	r3, [r3, r2]
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	805a      	strh	r2, [r3, #2]
	press->press_setpoint.burps = press->config.burps;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2258      	movs	r2, #88	; 0x58
 80017a0:	5e9a      	ldrsh	r2, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	801a      	strh	r2, [r3, #0]
	press->press_setpoint.auto_mode = press->config.flags & CONFIG_MODE_FLAG;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2250      	movs	r2, #80	; 0x50
 80017aa:	5a9b      	ldrh	r3, [r3, r2]
 80017ac:	001a      	movs	r2, r3
 80017ae:	2302      	movs	r3, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	1e5a      	subs	r2, r3, #1
 80017b4:	4193      	sbcs	r3, r2
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	719a      	strb	r2, [r3, #6]
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_ADC_ConvCpltCallback>:
volatile bool adc_ready;
volatile uint16_t buzzer_ctr = 0;
volatile uint16_t white_led_ctr = 0;
volatile uint16_t blue_led_ctr = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	adc_ready = true;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_ADC_ConvCpltCallback+0x18>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000750 	.word	0x20000750

080017e0 <lights_and_buzzers>:

void lights_and_buzzers(Press *press) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	if (buzzer_ctr > 0) {
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <lights_and_buzzers+0xc4>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <lights_and_buzzers+0x2c>
		buzzer_ctr--;
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <lights_and_buzzers+0xc4>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <lights_and_buzzers+0xc4>)
 80017fe:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <lights_and_buzzers+0xc8>)
 8001802:	210c      	movs	r1, #12
 8001804:	0018      	movs	r0, r3
 8001806:	f007 f9e7 	bl	8008bd8 <HAL_TIM_PWM_Start>
 800180a:	e004      	b.n	8001816 <lights_and_buzzers+0x36>
	} else {
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <lights_and_buzzers+0xc8>)
 800180e:	210c      	movs	r1, #12
 8001810:	0018      	movs	r0, r3
 8001812:	f007 fa99 	bl	8008d48 <HAL_TIM_PWM_Stop>
	}

	if (press->thermal_state.top_ready && press->thermal_state.bottom_ready) {
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	5c9b      	ldrb	r3, [r3, r2]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00b      	beq.n	8001838 <lights_and_buzzers+0x58>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2241      	movs	r2, #65	; 0x41
 8001824:	5c9b      	ldrb	r3, [r3, r2]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <lights_and_buzzers+0x58>
		__WRITE_WHITE_LED(1);
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <lights_and_buzzers+0xcc>)
 800182c:	2201      	movs	r2, #1
 800182e:	2104      	movs	r1, #4
 8001830:	0018      	movs	r0, r3
 8001832:	f004 fada 	bl	8005dea <HAL_GPIO_WritePin>
 8001836:	e012      	b.n	800185e <lights_and_buzzers+0x7e>
	} else if (white_led_ctr++ >= 1000) {
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <lights_and_buzzers+0xd0>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	b291      	uxth	r1, r2
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <lights_and_buzzers+0xd0>)
 8001844:	8011      	strh	r1, [r2, #0]
 8001846:	22fa      	movs	r2, #250	; 0xfa
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	4293      	cmp	r3, r2
 800184c:	d307      	bcc.n	800185e <lights_and_buzzers+0x7e>
		__TOGGLE_WHITE_LED();
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <lights_and_buzzers+0xcc>)
 8001850:	2104      	movs	r1, #4
 8001852:	0018      	movs	r0, r3
 8001854:	f004 fae6 	bl	8005e24 <HAL_GPIO_TogglePin>
		white_led_ctr = 0;
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <lights_and_buzzers+0xd0>)
 800185a:	2200      	movs	r2, #0
 800185c:	801a      	strh	r2, [r3, #0]
	}

	if (press->press_state.mode == PRESS_READY) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7a1b      	ldrb	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <lights_and_buzzers+0x96>
		__WRITE_BLUE_LED(1);
 8001866:	2390      	movs	r3, #144	; 0x90
 8001868:	05db      	lsls	r3, r3, #23
 800186a:	2201      	movs	r2, #1
 800186c:	2140      	movs	r1, #64	; 0x40
 800186e:	0018      	movs	r0, r3
 8001870:	f004 fabb 	bl	8005dea <HAL_GPIO_WritePin>
	} else if (blue_led_ctr++ >= 200) {
		__TOGGLE_BLUE_LED();
		blue_led_ctr = 0;
	}
}
 8001874:	e011      	b.n	800189a <lights_and_buzzers+0xba>
	} else if (blue_led_ctr++ >= 200) {
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <lights_and_buzzers+0xd4>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	b291      	uxth	r1, r2
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <lights_and_buzzers+0xd4>)
 8001882:	8011      	strh	r1, [r2, #0]
 8001884:	2bc7      	cmp	r3, #199	; 0xc7
 8001886:	d908      	bls.n	800189a <lights_and_buzzers+0xba>
		__TOGGLE_BLUE_LED();
 8001888:	2390      	movs	r3, #144	; 0x90
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	0018      	movs	r0, r3
 8001890:	f004 fac8 	bl	8005e24 <HAL_GPIO_TogglePin>
		blue_led_ctr = 0;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <lights_and_buzzers+0xd4>)
 8001896:	2200      	movs	r2, #0
 8001898:	801a      	strh	r2, [r3, #0]
}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	20000752 	.word	0x20000752
 80018a8:	20000988 	.word	0x20000988
 80018ac:	48000400 	.word	0x48000400
 80018b0:	20000754 	.word	0x20000754
 80018b4:	20000756 	.word	0x20000756

080018b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d120      	bne.n	800190c <HAL_TIM_PeriodElapsedCallback+0x54>

		// Process button presses
		// Set flag to update screen (if data changed)

		// execute motor control loop
		debounce_interlock();
 80018ca:	f000 ff1b 	bl	8002704 <debounce_interlock>
		debounce_activate_buttons();
 80018ce:	f000 feef 	bl	80026b0 <debounce_activate_buttons>

		motor_state_machine(&htim1, &press);
 80018d2:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018d6:	0011      	movs	r1, r2
 80018d8:	0018      	movs	r0, r3
 80018da:	f000 f869 	bl	80019b0 <motor_state_machine>

		debounce_menu_buttons();
 80018de:	f000 fea9 	bl	8002634 <debounce_menu_buttons>

		read_thermocouples(&hspi1, &press);
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80018e6:	0011      	movs	r1, r2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 fc17 	bl	800211c <read_thermocouples>
		thermal_control_loop(&hspi1, &press);
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80018f2:	0011      	movs	r1, r2
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 fd1f 	bl	8002338 <thermal_control_loop>
		lights_and_buzzers(&press);
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ff6f 	bl	80017e0 <lights_and_buzzers>
		ticks++;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800190a:	601a      	str	r2, [r3, #0]

	}
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40012c00 	.word	0x40012c00
 8001918:	20000000 	.word	0x20000000
 800191c:	20000940 	.word	0x20000940
 8001920:	200008dc 	.word	0x200008dc
 8001924:	20000740 	.word	0x20000740

08001928 <check_interlocks>:
//		__WRITE_THERMO_BOTTOM1_CS(1);
//		__WRITE_THERMO_BOTTOM2_CS(1);
//	}
//}

uint32_t check_interlocks(Press* press) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	int err = PRESS_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]

	// interlock switches are normally open with pullups
	// 0 is on, 1 is off
	if (tray_interlock.state) {  // if tray is out
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <check_interlocks+0x7c>)
 8001936:	791b      	ldrb	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00f      	beq.n	800195c <check_interlocks+0x34>
		if (press_top_limit.state) {  // if press is not at top
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <check_interlocks+0x80>)
 800193e:	791b      	ldrb	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <check_interlocks+0x24>
			err |= ERR_INTERLOCK;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2201      	movs	r2, #1
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
		}
		if (press->press_state.mode != PRESS_READY) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7a1b      	ldrb	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <check_interlocks+0x34>
			err |= ERR_INTERLOCK;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	4313      	orrs	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
		}
	}

	if (!press_top_limit.state && !press_bottom_limit.state) {
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <check_interlocks+0x80>)
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	4053      	eors	r3, r2
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00a      	beq.n	8001980 <check_interlocks+0x58>
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <check_interlocks+0x84>)
 800196c:	791b      	ldrb	r3, [r3, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	4053      	eors	r3, r2
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <check_interlocks+0x58>
		err |= ERR_BAD_SWITCH;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2208      	movs	r2, #8
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
	}

	if (err != PRESS_OK) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d008      	beq.n	8001998 <check_interlocks+0x70>
		press->press_state.mode = PRESS_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	721a      	strb	r2, [r3, #8]
		press->press_state.error_code |= err;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	61da      	str	r2, [r3, #28]
	}

	return err;
 8001998:	68fb      	ldr	r3, [r7, #12]
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	20000790 	.word	0x20000790
 80019a8:	20000780 	.word	0x20000780
 80019ac:	20000788 	.word	0x20000788

080019b0 <motor_state_machine>:

void motor_state_machine(TIM_HandleTypeDef *htim, Press* press) {
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	if (!press->press_setpoint.enable) {
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	79db      	ldrb	r3, [r3, #7]
 80019be:	2201      	movs	r2, #1
 80019c0:	4053      	eors	r3, r2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <motor_state_machine+0x3a>
		press->press_state.motor_setpoint = 0.0f;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
		press->press_state.current_limit = MAX_CURRENT;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	4add      	ldr	r2, [pc, #884]	; (8001d48 <motor_state_machine+0x398>)
 80019d2:	619a      	str	r2, [r3, #24]
		press->press_state.motor_slew_limited_setpoint = 0.0f;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
		motor_pwm_update(&htim1, press, shunt_current);
 80019da:	4bdc      	ldr	r3, [pc, #880]	; (8001d4c <motor_state_machine+0x39c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	4bdb      	ldr	r3, [pc, #876]	; (8001d50 <motor_state_machine+0x3a0>)
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fa82 	bl	8001eec <motor_pwm_update>
		return;
 80019e8:	e241      	b.n	8001e6e <motor_state_machine+0x4be>
	}

	bool top_lim = press_top_limit.state;
 80019ea:	230f      	movs	r3, #15
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	4ad9      	ldr	r2, [pc, #868]	; (8001d54 <motor_state_machine+0x3a4>)
 80019f0:	7912      	ldrb	r2, [r2, #4]
 80019f2:	701a      	strb	r2, [r3, #0]
	bool bottom_lim = press_bottom_limit.state;
 80019f4:	230e      	movs	r3, #14
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	4ad7      	ldr	r2, [pc, #860]	; (8001d58 <motor_state_machine+0x3a8>)
 80019fa:	7912      	ldrb	r2, [r2, #4]
 80019fc:	701a      	strb	r2, [r3, #0]
	bool tray_open = tray_interlock.state;
 80019fe:	210d      	movs	r1, #13
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	4ad6      	ldr	r2, [pc, #856]	; (8001d5c <motor_state_machine+0x3ac>)
 8001a04:	7912      	ldrb	r2, [r2, #4]
 8001a06:	701a      	strb	r2, [r3, #0]

	bool left_button = activate_left_button.state;
 8001a08:	200c      	movs	r0, #12
 8001a0a:	183b      	adds	r3, r7, r0
 8001a0c:	4ad4      	ldr	r2, [pc, #848]	; (8001d60 <motor_state_machine+0x3b0>)
 8001a0e:	7912      	ldrb	r2, [r2, #4]
 8001a10:	701a      	strb	r2, [r3, #0]
	bool right_button = activate_right_button.state;
 8001a12:	240b      	movs	r4, #11
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	4ad3      	ldr	r2, [pc, #844]	; (8001d64 <motor_state_machine+0x3b4>)
 8001a18:	7912      	ldrb	r2, [r2, #4]
 8001a1a:	701a      	strb	r2, [r3, #0]

	bool press_active = (!left_button) && (!right_button) && (!tray_open);
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4053      	eors	r3, r2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00f      	beq.n	8001a4a <motor_state_machine+0x9a>
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4053      	eors	r3, r2
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <motor_state_machine+0x9a>
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4053      	eors	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <motor_state_machine+0x9a>
 8001a46:	2201      	movs	r2, #1
 8001a48:	e000      	b.n	8001a4c <motor_state_machine+0x9c>
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	400a      	ands	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]

	// Throw an error state if the interlock is tripped
	check_interlocks(press);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff ff63 	bl	8001928 <check_interlocks>

	shunt_current = get_shunt_current(&hadc);
 8001a62:	4bc1      	ldr	r3, [pc, #772]	; (8001d68 <motor_state_machine+0x3b8>)
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 fa17 	bl	8001e98 <get_shunt_current>
 8001a6a:	1c02      	adds	r2, r0, #0
 8001a6c:	4bb7      	ldr	r3, [pc, #732]	; (8001d4c <motor_state_machine+0x39c>)
 8001a6e:	601a      	str	r2, [r3, #0]
	shunt_current_sqr_filt = (1.0f - CURRENT_FILT) * shunt_current_sqr_filt + CURRENT_FILT * shunt_current*shunt_current;
 8001a70:	4bbe      	ldr	r3, [pc, #760]	; (8001d6c <motor_state_machine+0x3bc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	49be      	ldr	r1, [pc, #760]	; (8001d70 <motor_state_machine+0x3c0>)
 8001a76:	1c18      	adds	r0, r3, #0
 8001a78:	f7fe ff56 	bl	8000928 <__aeabi_fmul>
 8001a7c:	1c03      	adds	r3, r0, #0
 8001a7e:	1c1c      	adds	r4, r3, #0
 8001a80:	4bb2      	ldr	r3, [pc, #712]	; (8001d4c <motor_state_machine+0x39c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	49bb      	ldr	r1, [pc, #748]	; (8001d74 <motor_state_machine+0x3c4>)
 8001a86:	1c18      	adds	r0, r3, #0
 8001a88:	f7fe ff4e 	bl	8000928 <__aeabi_fmul>
 8001a8c:	1c03      	adds	r3, r0, #0
 8001a8e:	1c1a      	adds	r2, r3, #0
 8001a90:	4bae      	ldr	r3, [pc, #696]	; (8001d4c <motor_state_machine+0x39c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c19      	adds	r1, r3, #0
 8001a96:	1c10      	adds	r0, r2, #0
 8001a98:	f7fe ff46 	bl	8000928 <__aeabi_fmul>
 8001a9c:	1c03      	adds	r3, r0, #0
 8001a9e:	1c19      	adds	r1, r3, #0
 8001aa0:	1c20      	adds	r0, r4, #0
 8001aa2:	f7fe fcf3 	bl	800048c <__aeabi_fadd>
 8001aa6:	1c03      	adds	r3, r0, #0
 8001aa8:	1c1a      	adds	r2, r3, #0
 8001aaa:	4bb0      	ldr	r3, [pc, #704]	; (8001d6c <motor_state_machine+0x3bc>)
 8001aac:	601a      	str	r2, [r3, #0]
	if (shunt_current_sqr_filt > MAX_CURRENT_SQR) {
 8001aae:	4baf      	ldr	r3, [pc, #700]	; (8001d6c <motor_state_machine+0x3bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	49b1      	ldr	r1, [pc, #708]	; (8001d78 <motor_state_machine+0x3c8>)
 8001ab4:	1c18      	adds	r0, r3, #0
 8001ab6:	f7fe fcd5 	bl	8000464 <__aeabi_fcmpgt>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d008      	beq.n	8001ad0 <motor_state_machine+0x120>
		press->press_state.mode = PRESS_ERROR;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	721a      	strb	r2, [r3, #8]
		press->press_state.error_code |= ERR_OVERCURRENT;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	431a      	orrs	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	61da      	str	r2, [r3, #28]
	}
	max_current = max(max_current, shunt_current);
 8001ad0:	4baa      	ldr	r3, [pc, #680]	; (8001d7c <motor_state_machine+0x3cc>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b9d      	ldr	r3, [pc, #628]	; (8001d4c <motor_state_machine+0x39c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	1c19      	adds	r1, r3, #0
 8001ada:	1c10      	adds	r0, r2, #0
 8001adc:	f7fe fcc2 	bl	8000464 <__aeabi_fcmpgt>
 8001ae0:	1e03      	subs	r3, r0, #0
 8001ae2:	d002      	beq.n	8001aea <motor_state_machine+0x13a>
 8001ae4:	4ba5      	ldr	r3, [pc, #660]	; (8001d7c <motor_state_machine+0x3cc>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	e001      	b.n	8001aee <motor_state_machine+0x13e>
 8001aea:	4b98      	ldr	r3, [pc, #608]	; (8001d4c <motor_state_machine+0x39c>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4ba3      	ldr	r3, [pc, #652]	; (8001d7c <motor_state_machine+0x3cc>)
 8001af0:	601a      	str	r2, [r3, #0]
	max_current = max(max_current, -shunt_current);
 8001af2:	4b96      	ldr	r3, [pc, #600]	; (8001d4c <motor_state_machine+0x39c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0612      	lsls	r2, r2, #24
 8001afa:	405a      	eors	r2, r3
 8001afc:	4b9f      	ldr	r3, [pc, #636]	; (8001d7c <motor_state_machine+0x3cc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c19      	adds	r1, r3, #0
 8001b02:	1c10      	adds	r0, r2, #0
 8001b04:	f7fe fc9a 	bl	800043c <__aeabi_fcmplt>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d002      	beq.n	8001b12 <motor_state_machine+0x162>
 8001b0c:	4b9b      	ldr	r3, [pc, #620]	; (8001d7c <motor_state_machine+0x3cc>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	e004      	b.n	8001b1c <motor_state_machine+0x16c>
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <motor_state_machine+0x39c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	0612      	lsls	r2, r2, #24
 8001b1a:	405a      	eors	r2, r3
 8001b1c:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <motor_state_machine+0x3cc>)
 8001b1e:	601a      	str	r2, [r3, #0]
	/*
	 * TODO: Implement overcurrent protection
	 */

	switch (press->press_state.mode) {
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	7a1b      	ldrb	r3, [r3, #8]
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	d900      	bls.n	8001b2a <motor_state_machine+0x17a>
 8001b28:	e17d      	b.n	8001e26 <motor_state_machine+0x476>
 8001b2a:	009a      	lsls	r2, r3, #2
 8001b2c:	4b94      	ldr	r3, [pc, #592]	; (8001d80 <motor_state_machine+0x3d0>)
 8001b2e:	18d3      	adds	r3, r2, r3
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	469f      	mov	pc, r3
	case PRESS_READY:
		max_current = 0.0f;
 8001b34:	4b91      	ldr	r3, [pc, #580]	; (8001d7c <motor_state_machine+0x3cc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
		press->press_state.burping = 0;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	725a      	strb	r2, [r3, #9]
		press->press_state.current_limit = MAX_CURRENT_NORMAL;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4a90      	ldr	r2, [pc, #576]	; (8001d84 <motor_state_machine+0x3d4>)
 8001b44:	619a      	str	r2, [r3, #24]
		press->press_state.motor_setpoint = 0.0f;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
		config_to_setpoints(press);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7ff fde8 	bl	8001724 <config_to_setpoints>
		if (top_lim) {  // if somehow we're not at the top at the ready state
 8001b54:	230f      	movs	r3, #15
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <motor_state_machine+0x1ba>
//			press->press_state.mode = PRESS_ERROR;
			press->press_state.error_code |= ERR_OVERSHOOT;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	2210      	movs	r2, #16
 8001b64:	431a      	orrs	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	61da      	str	r2, [r3, #28]
		}
		if (press_active) { // both buttons pressed and tray closed
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <motor_state_machine+0x1c6>
 8001b74:	e167      	b.n	8001e46 <motor_state_machine+0x496>
			press->press_state.burp_ctr = press->press_setpoint.burps;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	5e9a      	ldrsh	r2, [r3, r2]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	815a      	strh	r2, [r3, #10]
			press->press_state.mode = PRESS_DOWN;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2202      	movs	r2, #2
 8001b84:	721a      	strb	r2, [r3, #8]
		}
		break;
 8001b86:	e15e      	b.n	8001e46 <motor_state_machine+0x496>
	case PRESS_ERROR:
		press->press_state.current_limit = MAX_CURRENT;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4a6f      	ldr	r2, [pc, #444]	; (8001d48 <motor_state_machine+0x398>)
 8001b8c:	619a      	str	r2, [r3, #24]
		press->press_state.motor_setpoint = -0.2f;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4a7d      	ldr	r2, [pc, #500]	; (8001d88 <motor_state_machine+0x3d8>)
 8001b92:	611a      	str	r2, [r3, #16]
		press->press_state.burping = 0;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	725a      	strb	r2, [r3, #9]
		if (!top_lim) {
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4053      	eors	r3, r2
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <motor_state_machine+0x1fc>
 8001baa:	e14e      	b.n	8001e4a <motor_state_machine+0x49a>
			press->press_state.mode = PRESS_DONE;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2205      	movs	r2, #5
 8001bb0:	721a      	strb	r2, [r3, #8]
			press->press_state.motor_setpoint = 0.0f;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
//			press->press_state.mode = PRESS_DONE;
//		} else if (press_active) {
//			press->press_state.current_limit = MAX_CURRENT_NORMAL;
//			press->press_state.motor_setpoint = -MAX_DUTY_CYCLE;
//		}
		break;
 8001bb8:	e147      	b.n	8001e4a <motor_state_machine+0x49a>
	case PRESS_DOWN:
		press->press_state.current_limit = MAX_CURRENT_NORMAL;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4a71      	ldr	r2, [pc, #452]	; (8001d84 <motor_state_machine+0x3d4>)
 8001bbe:	619a      	str	r2, [r3, #24]
		press->press_state.motor_setpoint = MAX_DUTY_CYCLE;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4a72      	ldr	r2, [pc, #456]	; (8001d8c <motor_state_machine+0x3dc>)
 8001bc4:	611a      	str	r2, [r3, #16]
		if (!bottom_lim) {
 8001bc6:	230e      	movs	r3, #14
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4053      	eors	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <motor_state_machine+0x23a>
			press->press_state.motor_setpoint = 0.0f;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
			press->press_state.ticks_until_next = press->press_setpoint.press_time_ticks;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	885a      	ldrh	r2, [r3, #2]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	819a      	strh	r2, [r3, #12]
			press->press_state.mode = PRESS_DWELL;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2203      	movs	r2, #3
 8001be8:	721a      	strb	r2, [r3, #8]
		}
		if (!press->press_setpoint.auto_mode && !press_active) {
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	799b      	ldrb	r3, [r3, #6]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4053      	eors	r3, r2
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <motor_state_machine+0x25e>
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4053      	eors	r3, r2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <motor_state_machine+0x25e>
			press->press_state.mode = PRESS_UP;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	721a      	strb	r2, [r3, #8]
		}
		if (press->press_setpoint.auto_mode && !press->press_state.burping && !press_active) {
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	799b      	ldrb	r3, [r3, #6]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d100      	bne.n	8001c18 <motor_state_machine+0x268>
 8001c16:	e11a      	b.n	8001e4e <motor_state_machine+0x49e>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7a5b      	ldrb	r3, [r3, #9]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4053      	eors	r3, r2
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d100      	bne.n	8001c28 <motor_state_machine+0x278>
 8001c26:	e112      	b.n	8001e4e <motor_state_machine+0x49e>
 8001c28:	230a      	movs	r3, #10
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4053      	eors	r3, r2
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d100      	bne.n	8001c3a <motor_state_machine+0x28a>
 8001c38:	e109      	b.n	8001e4e <motor_state_machine+0x49e>
			press->press_state.motor_setpoint = 0.0f;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
			press->press_state.mode = PRESS_ERROR;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	721a      	strb	r2, [r3, #8]
		}
		break;
 8001c46:	e102      	b.n	8001e4e <motor_state_machine+0x49e>
	case PRESS_DWELL:
		press->press_state.current_limit = MAX_CURRENT_NORMAL;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4a4e      	ldr	r2, [pc, #312]	; (8001d84 <motor_state_machine+0x3d4>)
 8001c4c:	619a      	str	r2, [r3, #24]
		press->press_state.motor_setpoint = 0.0f;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
		if (bottom_lim) {  // if the bottom sensor is not triggered
 8001c54:	230e      	movs	r3, #14
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <motor_state_machine+0x2ba>
//			press->press_state.mode = PRESS_ERROR;
			press->press_state.error_code |= ERR_OVERSHOOT;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2210      	movs	r2, #16
 8001c64:	431a      	orrs	r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	61da      	str	r2, [r3, #28]
		}
		if (!press->press_setpoint.auto_mode) {
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	799b      	ldrb	r3, [r3, #6]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4053      	eors	r3, r2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00c      	beq.n	8001c92 <motor_state_machine+0x2e2>
			if (!press_active) {
 8001c78:	230a      	movs	r3, #10
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4053      	eors	r3, r2
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d100      	bne.n	8001c8a <motor_state_machine+0x2da>
 8001c88:	e0e3      	b.n	8001e52 <motor_state_machine+0x4a2>
				press->press_state.mode = PRESS_UP;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	721a      	strb	r2, [r3, #8]
				press->press_state.ticks_until_next = press->press_setpoint.burp_ticks;
				press->press_state.mode = PRESS_UP;
				press->press_state.burping = 1;
			}
		}
		break;
 8001c90:	e0df      	b.n	8001e52 <motor_state_machine+0x4a2>
			if (press->press_state.ticks_until_next-- <= 0) {
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	899b      	ldrh	r3, [r3, #12]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	b291      	uxth	r1, r2
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	8191      	strh	r1, [r2, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d000      	beq.n	8001ca4 <motor_state_machine+0x2f4>
 8001ca2:	e0d6      	b.n	8001e52 <motor_state_machine+0x4a2>
				press->press_state.ticks_until_next = press->press_setpoint.burp_ticks;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	889a      	ldrh	r2, [r3, #4]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	819a      	strh	r2, [r3, #12]
				press->press_state.mode = PRESS_UP;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	721a      	strb	r2, [r3, #8]
				press->press_state.burping = 1;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	725a      	strb	r2, [r3, #9]
		break;
 8001cb8:	e0cb      	b.n	8001e52 <motor_state_machine+0x4a2>
	case PRESS_UP:
		press->press_state.current_limit = MAX_CURRENT_NORMAL;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	4a31      	ldr	r2, [pc, #196]	; (8001d84 <motor_state_machine+0x3d4>)
 8001cbe:	619a      	str	r2, [r3, #24]
		press->press_state.motor_setpoint = -MAX_DUTY_CYCLE;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <motor_state_machine+0x3e0>)
 8001cc4:	611a      	str	r2, [r3, #16]
		if (!press->press_setpoint.auto_mode) {
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	799b      	ldrb	r3, [r3, #6]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4053      	eors	r3, r2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <motor_state_machine+0x336>
			if (press_active) {
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01c      	beq.n	8001d18 <motor_state_machine+0x368>
				press->press_state.mode = PRESS_DOWN;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	721a      	strb	r2, [r3, #8]
 8001ce4:	e018      	b.n	8001d18 <motor_state_machine+0x368>
			}
		} else if ((press->press_state.burp_ctr > 0) && (press->press_state.ticks_until_next-- <= 0)){
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	220a      	movs	r2, #10
 8001cea:	5e9b      	ldrsh	r3, [r3, r2]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	dd13      	ble.n	8001d18 <motor_state_machine+0x368>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	899b      	ldrh	r3, [r3, #12]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	b291      	uxth	r1, r2
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	8191      	strh	r1, [r2, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <motor_state_machine+0x368>
			press->press_state.burp_ctr--;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	220a      	movs	r2, #10
 8001d04:	5e9b      	ldrsh	r3, [r3, r2]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	815a      	strh	r2, [r3, #10]
			press->press_state.mode = PRESS_DOWN;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2202      	movs	r2, #2
 8001d16:	721a      	strb	r2, [r3, #8]
		}
		if (!top_lim) {
 8001d18:	230f      	movs	r3, #15
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4053      	eors	r3, r2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d100      	bne.n	8001d2a <motor_state_machine+0x37a>
 8001d28:	e095      	b.n	8001e56 <motor_state_machine+0x4a6>
			press->press_state.mode = PRESS_DONE;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	721a      	strb	r2, [r3, #8]
			if (press->config.flags & CONFIG_BUZZER_FLAG) {
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2250      	movs	r2, #80	; 0x50
 8001d34:	5a9b      	ldrh	r3, [r3, r2]
 8001d36:	001a      	movs	r2, r3
 8001d38:	2308      	movs	r3, #8
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d100      	bne.n	8001d40 <motor_state_machine+0x390>
 8001d3e:	e08a      	b.n	8001e56 <motor_state_machine+0x4a6>
				buzzer_ctr = 200;
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <motor_state_machine+0x3e4>)
 8001d42:	22c8      	movs	r2, #200	; 0xc8
 8001d44:	801a      	strh	r2, [r3, #0]
			}
		}
		break;
 8001d46:	e086      	b.n	8001e56 <motor_state_machine+0x4a6>
 8001d48:	41a00000 	.word	0x41a00000
 8001d4c:	20000a60 	.word	0x20000a60
 8001d50:	20000940 	.word	0x20000940
 8001d54:	20000780 	.word	0x20000780
 8001d58:	20000788 	.word	0x20000788
 8001d5c:	20000790 	.word	0x20000790
 8001d60:	20000770 	.word	0x20000770
 8001d64:	20000778 	.word	0x20000778
 8001d68:	20000798 	.word	0x20000798
 8001d6c:	20000744 	.word	0x20000744
 8001d70:	3f733333 	.word	0x3f733333
 8001d74:	3d4ccccd 	.word	0x3d4ccccd
 8001d78:	43c80000 	.word	0x43c80000
 8001d7c:	20000a64 	.word	0x20000a64
 8001d80:	0800ba64 	.word	0x0800ba64
 8001d84:	41200000 	.word	0x41200000
 8001d88:	be4ccccd 	.word	0xbe4ccccd
 8001d8c:	3f7d70a4 	.word	0x3f7d70a4
 8001d90:	bf7d70a4 	.word	0xbf7d70a4
 8001d94:	20000752 	.word	0x20000752
	case PRESS_DONE:
		press->press_state.current_limit = MAX_CURRENT_NORMAL;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4a36      	ldr	r2, [pc, #216]	; (8001e74 <motor_state_machine+0x4c4>)
 8001d9c:	619a      	str	r2, [r3, #24]
		press->press_state.motor_setpoint = 0.0f;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
		press->press_state.burping = 0;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	725a      	strb	r2, [r3, #9]
		if (left_button && right_button) {  // both buttons released
 8001daa:	230c      	movs	r3, #12
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d052      	beq.n	8001e5a <motor_state_machine+0x4aa>
 8001db4:	230b      	movs	r3, #11
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d04d      	beq.n	8001e5a <motor_state_machine+0x4aa>
			press->press_state.mode = PRESS_READY;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	721a      	strb	r2, [r3, #8]
		}
		break;
 8001dc4:	e049      	b.n	8001e5a <motor_state_machine+0x4aa>
	case PRESS_JOG:
		press->press_state.current_limit = MAX_CURRENT_JOG;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <motor_state_machine+0x4c8>)
 8001dca:	619a      	str	r2, [r3, #24]
		press->press_state.motor_setpoint = 0.0f;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
		press->press_state.burping = 0;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	725a      	strb	r2, [r3, #9]

		if (top_lim && menu_up_button.state && !menu_down_button.state) {
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <motor_state_machine+0x44e>
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <motor_state_machine+0x4cc>)
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <motor_state_machine+0x44e>
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <motor_state_machine+0x4d0>)
 8001dec:	791b      	ldrb	r3, [r3, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4053      	eors	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <motor_state_machine+0x44e>
			press->press_state.motor_setpoint = -MAX_DUTY_JOG;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <motor_state_machine+0x4d4>)
 8001dfc:	611a      	str	r2, [r3, #16]
		}

		if (bottom_lim && menu_down_button.state && !menu_up_button.state) {
 8001dfe:	230e      	movs	r3, #14
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d02a      	beq.n	8001e5e <motor_state_machine+0x4ae>
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <motor_state_machine+0x4d0>)
 8001e0a:	791b      	ldrb	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d026      	beq.n	8001e5e <motor_state_machine+0x4ae>
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <motor_state_machine+0x4cc>)
 8001e12:	791b      	ldrb	r3, [r3, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	4053      	eors	r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01f      	beq.n	8001e5e <motor_state_machine+0x4ae>
			press->press_state.motor_setpoint = MAX_DUTY_JOG;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <motor_state_machine+0x4d8>)
 8001e22:	611a      	str	r2, [r3, #16]
		}
		break;
 8001e24:	e01b      	b.n	8001e5e <motor_state_machine+0x4ae>
	default:
		press->press_state.current_limit = MAX_CURRENT;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <motor_state_machine+0x4dc>)
 8001e2a:	619a      	str	r2, [r3, #24]
		press->press_state.motor_setpoint = 0.0f;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
//		press->press_state.mode = PRESS_ERROR;
		press->press_state.error_code |= ERR_OVERSHOOT;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	2210      	movs	r2, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	61da      	str	r2, [r3, #28]
		press->press_state.burping = 0;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	725a      	strb	r2, [r3, #9]
 8001e44:	e00c      	b.n	8001e60 <motor_state_machine+0x4b0>
		break;
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	e00a      	b.n	8001e60 <motor_state_machine+0x4b0>
		break;
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	e008      	b.n	8001e60 <motor_state_machine+0x4b0>
		break;
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	e006      	b.n	8001e60 <motor_state_machine+0x4b0>
		break;
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	e004      	b.n	8001e60 <motor_state_machine+0x4b0>
		break;
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	e002      	b.n	8001e60 <motor_state_machine+0x4b0>
		break;
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	e000      	b.n	8001e60 <motor_state_machine+0x4b0>
		break;
 8001e5e:	46c0      	nop			; (mov r8, r8)
	}

	motor_pwm_update(&htim1, press, shunt_current);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <motor_state_machine+0x4e0>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	6839      	ldr	r1, [r7, #0]
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <motor_state_machine+0x4e4>)
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 f83f 	bl	8001eec <motor_pwm_update>
}
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b005      	add	sp, #20
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	41200000 	.word	0x41200000
 8001e78:	40a00000 	.word	0x40a00000
 8001e7c:	20000758 	.word	0x20000758
 8001e80:	20000760 	.word	0x20000760
 8001e84:	be4ccccd 	.word	0xbe4ccccd
 8001e88:	3e4ccccd 	.word	0x3e4ccccd
 8001e8c:	41a00000 	.word	0x41a00000
 8001e90:	20000a60 	.word	0x20000a60
 8001e94:	20000940 	.word	0x20000940

08001e98 <get_shunt_current>:

float get_shunt_current(ADC_HandleTypeDef *hadc) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	while(!adc_ready);
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <get_shunt_current+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4053      	eors	r3, r2
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f7      	bne.n	8001ea2 <get_shunt_current+0xa>
	adc_ready = false;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <get_shunt_current+0x44>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
	return ADC_CONV_FACTOR * ((float) (adc_output - 2048));
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <get_shunt_current+0x48>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <get_shunt_current+0x4c>)
 8001ebe:	4694      	mov	ip, r2
 8001ec0:	4463      	add	r3, ip
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff f824 	bl	8000f10 <__aeabi_i2f>
 8001ec8:	1c03      	adds	r3, r0, #0
 8001eca:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <get_shunt_current+0x50>)
 8001ecc:	1c18      	adds	r0, r3, #0
 8001ece:	f7fe fd2b 	bl	8000928 <__aeabi_fmul>
 8001ed2:	1c03      	adds	r3, r0, #0
}
 8001ed4:	1c18      	adds	r0, r3, #0
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000750 	.word	0x20000750
 8001ee0:	20000a68 	.word	0x20000a68
 8001ee4:	fffff800 	.word	0xfffff800
 8001ee8:	3ca4ffff 	.word	0x3ca4ffff

08001eec <motor_pwm_update>:
	state->accum = state->accum > -state->max_accum ? state->accum : -state->max_accum;

	return state->accum + scaled_err;
}

void motor_pwm_update(TIM_HandleTypeDef *htim, Press* press, float current) {
 8001eec:	b5b0      	push	{r4, r5, r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	const float duty_to_cmd = ((float) PWM_PERIOD);
 8001ef8:	4b82      	ldr	r3, [pc, #520]	; (8002104 <motor_pwm_update+0x218>)
 8001efa:	61bb      	str	r3, [r7, #24]
	// Channel 1 has the shunt, channel 2 does not
	// Forward:  Channel 1 ground, channel 2 PWM
	// Current is inverted!!!!

	press->press_state.motor_setpoint =
			clip(press->press_state.motor_setpoint,
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	4981      	ldr	r1, [pc, #516]	; (8002108 <motor_pwm_update+0x21c>)
 8001f02:	1c18      	adds	r0, r3, #0
 8001f04:	f7fe fa9a 	bl	800043c <__aeabi_fcmplt>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d00d      	beq.n	8001f28 <motor_pwm_update+0x3c>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2201      	movs	r2, #1
 8001f12:	1c14      	adds	r4, r2, #0
 8001f14:	497d      	ldr	r1, [pc, #500]	; (800210c <motor_pwm_update+0x220>)
 8001f16:	1c18      	adds	r0, r3, #0
 8001f18:	f7fe faa4 	bl	8000464 <__aeabi_fcmpgt>
 8001f1c:	1e03      	subs	r3, r0, #0
 8001f1e:	d101      	bne.n	8001f24 <motor_pwm_update+0x38>
 8001f20:	2300      	movs	r3, #0
 8001f22:	1c1c      	adds	r4, r3, #0
 8001f24:	b2e3      	uxtb	r3, r4
 8001f26:	e000      	b.n	8001f2a <motor_pwm_update+0x3e>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <motor_pwm_update+0x5c>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	4975      	ldr	r1, [pc, #468]	; (8002108 <motor_pwm_update+0x21c>)
 8001f34:	1c18      	adds	r0, r3, #0
 8001f36:	f7fe fa81 	bl	800043c <__aeabi_fcmplt>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d002      	beq.n	8001f44 <motor_pwm_update+0x58>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	e002      	b.n	8001f4a <motor_pwm_update+0x5e>
 8001f44:	4b70      	ldr	r3, [pc, #448]	; (8002108 <motor_pwm_update+0x21c>)
 8001f46:	e000      	b.n	8001f4a <motor_pwm_update+0x5e>
 8001f48:	4b70      	ldr	r3, [pc, #448]	; (800210c <motor_pwm_update+0x220>)
	press->press_state.motor_setpoint =
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	6113      	str	r3, [r2, #16]
					MAX_DUTY_CYCLE,
					-MAX_DUTY_CYCLE);
	float step = clip(press->press_state.motor_setpoint - press->press_state.motor_slew_limited_setpoint,
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	1c19      	adds	r1, r3, #0
 8001f58:	1c10      	adds	r0, r2, #0
 8001f5a:	f7fe fe0b 	bl	8000b74 <__aeabi_fsub>
 8001f5e:	1c03      	adds	r3, r0, #0
 8001f60:	496b      	ldr	r1, [pc, #428]	; (8002110 <motor_pwm_update+0x224>)
 8001f62:	1c18      	adds	r0, r3, #0
 8001f64:	f7fe fa6a 	bl	800043c <__aeabi_fcmplt>
 8001f68:	1e03      	subs	r3, r0, #0
 8001f6a:	d014      	beq.n	8001f96 <motor_pwm_update+0xaa>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	1c19      	adds	r1, r3, #0
 8001f76:	1c10      	adds	r0, r2, #0
 8001f78:	f7fe fdfc 	bl	8000b74 <__aeabi_fsub>
 8001f7c:	1c03      	adds	r3, r0, #0
 8001f7e:	2201      	movs	r2, #1
 8001f80:	1c14      	adds	r4, r2, #0
 8001f82:	4964      	ldr	r1, [pc, #400]	; (8002114 <motor_pwm_update+0x228>)
 8001f84:	1c18      	adds	r0, r3, #0
 8001f86:	f7fe fa6d 	bl	8000464 <__aeabi_fcmpgt>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d101      	bne.n	8001f92 <motor_pwm_update+0xa6>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	1c1c      	adds	r4, r3, #0
 8001f92:	b2e3      	uxtb	r3, r4
 8001f94:	e000      	b.n	8001f98 <motor_pwm_update+0xac>
 8001f96:	2301      	movs	r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01a      	beq.n	8001fd2 <motor_pwm_update+0xe6>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	1c19      	adds	r1, r3, #0
 8001fa6:	1c10      	adds	r0, r2, #0
 8001fa8:	f7fe fde4 	bl	8000b74 <__aeabi_fsub>
 8001fac:	1c03      	adds	r3, r0, #0
 8001fae:	4958      	ldr	r1, [pc, #352]	; (8002110 <motor_pwm_update+0x224>)
 8001fb0:	1c18      	adds	r0, r3, #0
 8001fb2:	f7fe fa43 	bl	800043c <__aeabi_fcmplt>
 8001fb6:	1e03      	subs	r3, r0, #0
 8001fb8:	d009      	beq.n	8001fce <motor_pwm_update+0xe2>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	1c19      	adds	r1, r3, #0
 8001fc4:	1c10      	adds	r0, r2, #0
 8001fc6:	f7fe fdd5 	bl	8000b74 <__aeabi_fsub>
 8001fca:	1c03      	adds	r3, r0, #0
 8001fcc:	e002      	b.n	8001fd4 <motor_pwm_update+0xe8>
 8001fce:	4b50      	ldr	r3, [pc, #320]	; (8002110 <motor_pwm_update+0x224>)
 8001fd0:	e000      	b.n	8001fd4 <motor_pwm_update+0xe8>
 8001fd2:	4b50      	ldr	r3, [pc, #320]	; (8002114 <motor_pwm_update+0x228>)
 8001fd4:	61fb      	str	r3, [r7, #28]
			MAX_SLEW_RATE,
			-MAX_SLEW_RATE);
	// forward current is too high
	if (-current > press->press_state.current_limit) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	0612      	lsls	r2, r2, #24
 8001fdc:	405a      	eors	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	1c19      	adds	r1, r3, #0
 8001fe4:	1c10      	adds	r0, r2, #0
 8001fe6:	f7fe fa3d 	bl	8000464 <__aeabi_fcmpgt>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d009      	beq.n	8002002 <motor_pwm_update+0x116>
		step = min(step, 0.0f);  // Prevent step from increasing
 8001fee:	2100      	movs	r1, #0
 8001ff0:	69f8      	ldr	r0, [r7, #28]
 8001ff2:	f7fe fa23 	bl	800043c <__aeabi_fcmplt>
 8001ff6:	1e03      	subs	r3, r0, #0
 8001ff8:	d001      	beq.n	8001ffe <motor_pwm_update+0x112>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	e000      	b.n	8002000 <motor_pwm_update+0x114>
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
	}

	// reverse current too high
	if (current > press->press_state.current_limit) {
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	1c19      	adds	r1, r3, #0
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe fa2b 	bl	8000464 <__aeabi_fcmpgt>
 800200e:	1e03      	subs	r3, r0, #0
 8002010:	d009      	beq.n	8002026 <motor_pwm_update+0x13a>
		step = max(step, 0.0f);  // prevent step from decreasing
 8002012:	2100      	movs	r1, #0
 8002014:	69f8      	ldr	r0, [r7, #28]
 8002016:	f7fe fa25 	bl	8000464 <__aeabi_fcmpgt>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d001      	beq.n	8002022 <motor_pwm_update+0x136>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	e000      	b.n	8002024 <motor_pwm_update+0x138>
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
	}


	press->press_state.motor_slew_limited_setpoint =
			clip(press->press_state.motor_slew_limited_setpoint + step,
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	69f9      	ldr	r1, [r7, #28]
 800202c:	1c18      	adds	r0, r3, #0
 800202e:	f7fe fa2d 	bl	800048c <__aeabi_fadd>
 8002032:	1c03      	adds	r3, r0, #0
 8002034:	4934      	ldr	r1, [pc, #208]	; (8002108 <motor_pwm_update+0x21c>)
 8002036:	1c18      	adds	r0, r3, #0
 8002038:	f7fe fa00 	bl	800043c <__aeabi_fcmplt>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d012      	beq.n	8002066 <motor_pwm_update+0x17a>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	69f9      	ldr	r1, [r7, #28]
 8002046:	1c18      	adds	r0, r3, #0
 8002048:	f7fe fa20 	bl	800048c <__aeabi_fadd>
 800204c:	1c03      	adds	r3, r0, #0
 800204e:	2201      	movs	r2, #1
 8002050:	1c14      	adds	r4, r2, #0
 8002052:	492e      	ldr	r1, [pc, #184]	; (800210c <motor_pwm_update+0x220>)
 8002054:	1c18      	adds	r0, r3, #0
 8002056:	f7fe fa05 	bl	8000464 <__aeabi_fcmpgt>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d101      	bne.n	8002062 <motor_pwm_update+0x176>
 800205e:	2300      	movs	r3, #0
 8002060:	1c1c      	adds	r4, r3, #0
 8002062:	b2e3      	uxtb	r3, r4
 8002064:	e000      	b.n	8002068 <motor_pwm_update+0x17c>
 8002066:	2301      	movs	r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d016      	beq.n	800209a <motor_pwm_update+0x1ae>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	69f9      	ldr	r1, [r7, #28]
 8002072:	1c18      	adds	r0, r3, #0
 8002074:	f7fe fa0a 	bl	800048c <__aeabi_fadd>
 8002078:	1c03      	adds	r3, r0, #0
 800207a:	4923      	ldr	r1, [pc, #140]	; (8002108 <motor_pwm_update+0x21c>)
 800207c:	1c18      	adds	r0, r3, #0
 800207e:	f7fe f9dd 	bl	800043c <__aeabi_fcmplt>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d007      	beq.n	8002096 <motor_pwm_update+0x1aa>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	69f9      	ldr	r1, [r7, #28]
 800208c:	1c18      	adds	r0, r3, #0
 800208e:	f7fe f9fd 	bl	800048c <__aeabi_fadd>
 8002092:	1c03      	adds	r3, r0, #0
 8002094:	e002      	b.n	800209c <motor_pwm_update+0x1b0>
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <motor_pwm_update+0x21c>)
 8002098:	e000      	b.n	800209c <motor_pwm_update+0x1b0>
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <motor_pwm_update+0x220>)
	press->press_state.motor_slew_limited_setpoint =
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	6153      	str	r3, [r2, #20]
					MAX_DUTY_CYCLE,
					-MAX_DUTY_CYCLE);


	int16_t pwm_cmd = (int16_t) (press->press_state.motor_slew_limited_setpoint * duty_to_cmd);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	1c18      	adds	r0, r3, #0
 80020a8:	f7fe fc3e 	bl	8000928 <__aeabi_fmul>
 80020ac:	1c03      	adds	r3, r0, #0
 80020ae:	2516      	movs	r5, #22
 80020b0:	197c      	adds	r4, r7, r5
 80020b2:	1c18      	adds	r0, r3, #0
 80020b4:	f7fe ff0c 	bl	8000ed0 <__aeabi_f2iz>
 80020b8:	0003      	movs	r3, r0
 80020ba:	8023      	strh	r3, [r4, #0]
	if (pwm_cmd > 0) {
 80020bc:	0029      	movs	r1, r5
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2200      	movs	r2, #0
 80020c2:	5e9b      	ldrsh	r3, [r3, r2]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	dd0c      	ble.n	80020e2 <motor_pwm_update+0x1f6>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, PWM_PERIOD);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a12      	ldr	r2, [pc, #72]	; (8002118 <motor_pwm_update+0x22c>)
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PWM_PERIOD-pwm_cmd);
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	2200      	movs	r2, #0
 80020d4:	5e9b      	ldrsh	r3, [r3, r2]
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <motor_pwm_update+0x22c>)
 80020d8:	1ad2      	subs	r2, r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
	// Reverse:  Channel 1 PWM (must not exceed PWM_PERIOD - SHUNT_TICKS), Channel 2 ground
	else {
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, PWM_PERIOD+pwm_cmd);
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PWM_PERIOD);
	}
}
 80020e0:	e00c      	b.n	80020fc <motor_pwm_update+0x210>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, PWM_PERIOD+pwm_cmd);
 80020e2:	2316      	movs	r3, #22
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	5e9b      	ldrsh	r3, [r3, r2]
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <motor_pwm_update+0x22c>)
 80020ec:	189a      	adds	r2, r3, r2
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PWM_PERIOD);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <motor_pwm_update+0x22c>)
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b008      	add	sp, #32
 8002102:	bdb0      	pop	{r4, r5, r7, pc}
 8002104:	46bb8000 	.word	0x46bb8000
 8002108:	3f7d70a4 	.word	0x3f7d70a4
 800210c:	bf7d70a4 	.word	0xbf7d70a4
 8002110:	3ca3d70a 	.word	0x3ca3d70a
 8002114:	bca3d70a 	.word	0xbca3d70a
 8002118:	00005dc0 	.word	0x00005dc0

0800211c <read_thermocouples>:

HAL_StatusTypeDef read_thermocouples(SPI_HandleTypeDef *hspi, Press* press) {
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
	if (hspi->State == HAL_SPI_STATE_READY) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	225d      	movs	r2, #93	; 0x5d
 800212a:	5c9b      	ldrb	r3, [r3, r2]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d000      	beq.n	8002134 <read_thermocouples+0x18>
 8002132:	e0f2      	b.n	800231a <read_thermocouples+0x1fe>
		// bring correct CS low
		switch (active_thermocouple) {
 8002134:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <read_thermocouples+0x208>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d01f      	beq.n	800217c <read_thermocouples+0x60>
 800213c:	dc25      	bgt.n	800218a <read_thermocouples+0x6e>
 800213e:	2b02      	cmp	r3, #2
 8002140:	d014      	beq.n	800216c <read_thermocouples+0x50>
 8002142:	dc22      	bgt.n	800218a <read_thermocouples+0x6e>
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <read_thermocouples+0x32>
 8002148:	2b01      	cmp	r3, #1
 800214a:	d008      	beq.n	800215e <read_thermocouples+0x42>
 800214c:	e01d      	b.n	800218a <read_thermocouples+0x6e>
		case 0: // top 1
			__WRITE_THERMO_TOP1_CS(0);
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4875      	ldr	r0, [pc, #468]	; (8002328 <read_thermocouples+0x20c>)
 8002154:	2200      	movs	r2, #0
 8002156:	0019      	movs	r1, r3
 8002158:	f003 fe47 	bl	8005dea <HAL_GPIO_WritePin>
			break;
 800215c:	e015      	b.n	800218a <read_thermocouples+0x6e>
		case 1: // bottom 1
			__WRITE_THERMO_BOTTOM1_CS(0);
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <read_thermocouples+0x20c>)
 8002160:	2200      	movs	r2, #0
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	0018      	movs	r0, r3
 8002166:	f003 fe40 	bl	8005dea <HAL_GPIO_WritePin>
			break;
 800216a:	e00e      	b.n	800218a <read_thermocouples+0x6e>
		case 2: // top 2
			__WRITE_THERMO_TOP2_CS(0);
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	486d      	ldr	r0, [pc, #436]	; (8002328 <read_thermocouples+0x20c>)
 8002172:	2200      	movs	r2, #0
 8002174:	0019      	movs	r1, r3
 8002176:	f003 fe38 	bl	8005dea <HAL_GPIO_WritePin>
			break;
 800217a:	e006      	b.n	800218a <read_thermocouples+0x6e>
		case 3: // bottom 2
			__WRITE_THERMO_BOTTOM2_CS(0);
 800217c:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <read_thermocouples+0x20c>)
 800217e:	2200      	movs	r2, #0
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	0018      	movs	r0, r3
 8002184:	f003 fe31 	bl	8005dea <HAL_GPIO_WritePin>
			break;
 8002188:	46c0      	nop			; (mov r8, r8)
		}
		HAL_StatusTypeDef status = HAL_SPI_Receive(hspi, thermo_buf, 4, 1);
 800218a:	230f      	movs	r3, #15
 800218c:	18fc      	adds	r4, r7, r3
 800218e:	4967      	ldr	r1, [pc, #412]	; (800232c <read_thermocouples+0x210>)
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	2301      	movs	r3, #1
 8002194:	2204      	movs	r2, #4
 8002196:	f005 ff8b 	bl	80080b0 <HAL_SPI_Receive>
 800219a:	0003      	movs	r3, r0
 800219c:	7023      	strb	r3, [r4, #0]
		// set all CS pins high
		__WRITE_THERMO_TOP1_CS(1);
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4861      	ldr	r0, [pc, #388]	; (8002328 <read_thermocouples+0x20c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	0019      	movs	r1, r3
 80021a8:	f003 fe1f 	bl	8005dea <HAL_GPIO_WritePin>
		__WRITE_THERMO_TOP2_CS(1);
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	485d      	ldr	r0, [pc, #372]	; (8002328 <read_thermocouples+0x20c>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	0019      	movs	r1, r3
 80021b6:	f003 fe18 	bl	8005dea <HAL_GPIO_WritePin>
		__WRITE_THERMO_BOTTOM1_CS(1);
 80021ba:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <read_thermocouples+0x20c>)
 80021bc:	2201      	movs	r2, #1
 80021be:	2180      	movs	r1, #128	; 0x80
 80021c0:	0018      	movs	r0, r3
 80021c2:	f003 fe12 	bl	8005dea <HAL_GPIO_WritePin>
		__WRITE_THERMO_BOTTOM2_CS(1);
 80021c6:	4b58      	ldr	r3, [pc, #352]	; (8002328 <read_thermocouples+0x20c>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	2140      	movs	r1, #64	; 0x40
 80021cc:	0018      	movs	r0, r3
 80021ce:	f003 fe0c 	bl	8005dea <HAL_GPIO_WritePin>

		// Detect if any fault bits are set
		bool fault_state = (thermo_buf[1] & 0b1u) || (thermo_buf[3] & 0b111u);
 80021d2:	4b56      	ldr	r3, [pc, #344]	; (800232c <read_thermocouples+0x210>)
 80021d4:	785b      	ldrb	r3, [r3, #1]
 80021d6:	001a      	movs	r2, r3
 80021d8:	2301      	movs	r3, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	d105      	bne.n	80021ea <read_thermocouples+0xce>
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <read_thermocouples+0x210>)
 80021e0:	78db      	ldrb	r3, [r3, #3]
 80021e2:	001a      	movs	r2, r3
 80021e4:	2307      	movs	r3, #7
 80021e6:	4013      	ands	r3, r2
 80021e8:	d001      	beq.n	80021ee <read_thermocouples+0xd2>
 80021ea:	2201      	movs	r2, #1
 80021ec:	e000      	b.n	80021f0 <read_thermocouples+0xd4>
 80021ee:	2200      	movs	r2, #0
 80021f0:	200e      	movs	r0, #14
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	400a      	ands	r2, r1
 80021fc:	701a      	strb	r2, [r3, #0]
		if (fault_state) {
 80021fe:	183b      	adds	r3, r7, r0
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d014      	beq.n	8002230 <read_thermocouples+0x114>
			press->thermal_state.error_code |= (ERR_BAD_TOP_THERMO1 << active_thermocouple);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <read_thermocouples+0x208>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	0019      	movs	r1, r3
 8002210:	2320      	movs	r3, #32
 8002212:	408b      	lsls	r3, r1
 8002214:	431a      	orrs	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	64da      	str	r2, [r3, #76]	; 0x4c
			press->thermal_state.bad_read_countdown[active_thermocouple] = 1000;
 800221a:	4b42      	ldr	r3, [pc, #264]	; (8002324 <read_thermocouples+0x208>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	3320      	adds	r3, #32
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	3302      	adds	r3, #2
 8002228:	22fa      	movs	r2, #250	; 0xfa
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	801a      	strh	r2, [r3, #0]
 800222e:	e063      	b.n	80022f8 <read_thermocouples+0x1dc>
		} else {
			if (press->thermal_state.bad_read_countdown[active_thermocouple] == 0) {
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <read_thermocouples+0x208>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	3320      	adds	r3, #32
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	3302      	adds	r3, #2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10b      	bne.n	800225c <read_thermocouples+0x140>
				press->thermal_state.error_code &= (~(ERR_BAD_TOP_THERMO1 << active_thermocouple));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	4a36      	ldr	r2, [pc, #216]	; (8002324 <read_thermocouples+0x208>)
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	0011      	movs	r1, r2
 800224e:	2220      	movs	r2, #32
 8002250:	408a      	lsls	r2, r1
 8002252:	43d2      	mvns	r2, r2
 8002254:	401a      	ands	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	64da      	str	r2, [r3, #76]	; 0x4c
 800225a:	e011      	b.n	8002280 <read_thermocouples+0x164>
			} else {
				press->thermal_state.bad_read_countdown[active_thermocouple]--;
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <read_thermocouples+0x208>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	001a      	movs	r2, r3
 8002264:	3220      	adds	r2, #32
 8002266:	0052      	lsls	r2, r2, #1
 8002268:	188a      	adds	r2, r1, r2
 800226a:	3202      	adds	r2, #2
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	3a01      	subs	r2, #1
 8002270:	b291      	uxth	r1, r2
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	3320      	adds	r3, #32
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	18d3      	adds	r3, r2, r3
 800227a:	3302      	adds	r3, #2
 800227c:	1c0a      	adds	r2, r1, #0
 800227e:	801a      	strh	r2, [r3, #0]
			}
			// decode (big-endian) temperature
			int16_t temp_raw = (thermo_buf[0] << 8) + thermo_buf[1];
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <read_thermocouples+0x210>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	b29a      	uxth	r2, r3
 800228a:	4b28      	ldr	r3, [pc, #160]	; (800232c <read_thermocouples+0x210>)
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	b29b      	uxth	r3, r3
 8002290:	18d3      	adds	r3, r2, r3
 8002292:	b29a      	uxth	r2, r3
 8002294:	210c      	movs	r1, #12
 8002296:	187b      	adds	r3, r7, r1
 8002298:	801a      	strh	r2, [r3, #0]
			float measured_temp = temp_raw * 0.0625f;
 800229a:	187b      	adds	r3, r7, r1
 800229c:	2200      	movs	r2, #0
 800229e:	5e9b      	ldrsh	r3, [r3, r2]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7fe fe35 	bl	8000f10 <__aeabi_i2f>
 80022a6:	1c03      	adds	r3, r0, #0
 80022a8:	21f6      	movs	r1, #246	; 0xf6
 80022aa:	0589      	lsls	r1, r1, #22
 80022ac:	1c18      	adds	r0, r3, #0
 80022ae:	f7fe fb3b 	bl	8000928 <__aeabi_fmul>
 80022b2:	1c03      	adds	r3, r0, #0
 80022b4:	60bb      	str	r3, [r7, #8]

			// Low pass filtering
			press->thermal_state.temp_buf[active_thermocouple] =
					(1.0f - THERM_FILTER_COEFF) * press->thermal_state.temp_buf[active_thermocouple] +
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <read_thermocouples+0x208>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	320a      	adds	r2, #10
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	58d3      	ldr	r3, [r2, r3]
 80022c4:	491a      	ldr	r1, [pc, #104]	; (8002330 <read_thermocouples+0x214>)
 80022c6:	1c18      	adds	r0, r3, #0
 80022c8:	f7fe fb2e 	bl	8000928 <__aeabi_fmul>
 80022cc:	1c03      	adds	r3, r0, #0
 80022ce:	1c1d      	adds	r5, r3, #0
					THERM_FILTER_COEFF * measured_temp;
 80022d0:	4918      	ldr	r1, [pc, #96]	; (8002334 <read_thermocouples+0x218>)
 80022d2:	68b8      	ldr	r0, [r7, #8]
 80022d4:	f7fe fb28 	bl	8000928 <__aeabi_fmul>
 80022d8:	1c03      	adds	r3, r0, #0
 80022da:	1c1a      	adds	r2, r3, #0
			press->thermal_state.temp_buf[active_thermocouple] =
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <read_thermocouples+0x208>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	001c      	movs	r4, r3
					(1.0f - THERM_FILTER_COEFF) * press->thermal_state.temp_buf[active_thermocouple] +
 80022e2:	1c11      	adds	r1, r2, #0
 80022e4:	1c28      	adds	r0, r5, #0
 80022e6:	f7fe f8d1 	bl	800048c <__aeabi_fadd>
 80022ea:	1c03      	adds	r3, r0, #0
 80022ec:	1c19      	adds	r1, r3, #0
			press->thermal_state.temp_buf[active_thermocouple] =
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	0022      	movs	r2, r4
 80022f2:	320a      	adds	r2, #10
 80022f4:	0092      	lsls	r2, r2, #2
 80022f6:	50d1      	str	r1, [r2, r3]
		}

		// Read next thermocouple
		active_thermocouple++;
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <read_thermocouples+0x208>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <read_thermocouples+0x208>)
 8002302:	701a      	strb	r2, [r3, #0]
		active_thermocouple &= 0b11;
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <read_thermocouples+0x208>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2203      	movs	r2, #3
 800230a:	4013      	ands	r3, r2
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <read_thermocouples+0x208>)
 8002310:	701a      	strb	r2, [r3, #0]

		return status;
 8002312:	230f      	movs	r3, #15
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	e000      	b.n	800231c <read_thermocouples+0x200>
	} else {
		return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
	}
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bdb0      	pop	{r4, r5, r7, pc}
 8002324:	20000748 	.word	0x20000748
 8002328:	48000400 	.word	0x48000400
 800232c:	2000074c 	.word	0x2000074c
 8002330:	3f7d70a4 	.word	0x3f7d70a4
 8002334:	3c23d70a 	.word	0x3c23d70a

08002338 <thermal_control_loop>:

void thermal_control_loop(SPI_HandleTypeDef* hspi, Press* press) {
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
	float top_temp, bottom_temp;
	if (!(press->thermal_state.error_code & ERR_BAD_TOP_THERMO1)) {
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	2220      	movs	r2, #32
 8002348:	4013      	ands	r3, r2
 800234a:	d10c      	bne.n	8002366 <thermal_control_loop+0x2e>
		top_temp = press->thermal_state.top1;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	617b      	str	r3, [r7, #20]
		press->thermal_state.error &= ~1;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	224a      	movs	r2, #74	; 0x4a
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	2201      	movs	r2, #1
 800235a:	4393      	bics	r3, r2
 800235c:	b2d9      	uxtb	r1, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	224a      	movs	r2, #74	; 0x4a
 8002362:	5499      	strb	r1, [r3, r2]
 8002364:	e024      	b.n	80023b0 <thermal_control_loop+0x78>
	} else if (!(press->thermal_state.error_code & ERR_BAD_TOP_THERMO2)) {
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	4013      	ands	r3, r2
 800236e:	d10c      	bne.n	800238a <thermal_control_loop+0x52>
		top_temp = press->thermal_state.top2;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	617b      	str	r3, [r7, #20]
		press->thermal_state.error &= ~1;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	224a      	movs	r2, #74	; 0x4a
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	2201      	movs	r2, #1
 800237e:	4393      	bics	r3, r2
 8002380:	b2d9      	uxtb	r1, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	224a      	movs	r2, #74	; 0x4a
 8002386:	5499      	strb	r1, [r3, r2]
 8002388:	e012      	b.n	80023b0 <thermal_control_loop+0x78>
	} else {
		top_temp = 1000.0f; // set unreasonably high to guarantee controller turns off
 800238a:	4b90      	ldr	r3, [pc, #576]	; (80025cc <thermal_control_loop+0x294>)
 800238c:	617b      	str	r3, [r7, #20]
//		press->thermal_setpoint.enable = false;
		press->thermal_state.error |= 1;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	224a      	movs	r2, #74	; 0x4a
 8002392:	5c9b      	ldrb	r3, [r3, r2]
 8002394:	2201      	movs	r2, #1
 8002396:	4313      	orrs	r3, r2
 8002398:	b2d9      	uxtb	r1, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	224a      	movs	r2, #74	; 0x4a
 800239e:	5499      	strb	r1, [r3, r2]
		__WRITE_TOP_PLATTER_HEAT(0);
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	0119      	lsls	r1, r3, #4
 80023a4:	2390      	movs	r3, #144	; 0x90
 80023a6:	05db      	lsls	r3, r3, #23
 80023a8:	2200      	movs	r2, #0
 80023aa:	0018      	movs	r0, r3
 80023ac:	f003 fd1d 	bl	8005dea <HAL_GPIO_WritePin>
//		__WRITE_BOTTOM_PLATTER_HEAT(0);
//		return;
	}

	if (!(press->thermal_state.error_code & ERR_BAD_BOTTOM_THERMO1)) {
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b4:	2240      	movs	r2, #64	; 0x40
 80023b6:	4013      	ands	r3, r2
 80023b8:	d10c      	bne.n	80023d4 <thermal_control_loop+0x9c>
		bottom_temp = press->thermal_state.bottom1;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	613b      	str	r3, [r7, #16]
		press->thermal_state.error &= ~2;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	224a      	movs	r2, #74	; 0x4a
 80023c4:	5c9b      	ldrb	r3, [r3, r2]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4393      	bics	r3, r2
 80023ca:	b2d9      	uxtb	r1, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	224a      	movs	r2, #74	; 0x4a
 80023d0:	5499      	strb	r1, [r3, r2]
 80023d2:	e025      	b.n	8002420 <thermal_control_loop+0xe8>
	} else if (!(press->thermal_state.error_code & ERR_BAD_BOTTOM_THERMO2)) {
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4013      	ands	r3, r2
 80023de:	d10c      	bne.n	80023fa <thermal_control_loop+0xc2>
		bottom_temp = press->thermal_state.bottom2;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	613b      	str	r3, [r7, #16]
		press->thermal_state.error &= ~2;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	224a      	movs	r2, #74	; 0x4a
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2202      	movs	r2, #2
 80023ee:	4393      	bics	r3, r2
 80023f0:	b2d9      	uxtb	r1, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	224a      	movs	r2, #74	; 0x4a
 80023f6:	5499      	strb	r1, [r3, r2]
 80023f8:	e012      	b.n	8002420 <thermal_control_loop+0xe8>
	} else {
		bottom_temp = 1000.0f; // set unreasonably high
 80023fa:	4b74      	ldr	r3, [pc, #464]	; (80025cc <thermal_control_loop+0x294>)
 80023fc:	613b      	str	r3, [r7, #16]
//		press->thermal_setpoint.enable = false;
		press->thermal_state.error |= 2;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	224a      	movs	r2, #74	; 0x4a
 8002402:	5c9b      	ldrb	r3, [r3, r2]
 8002404:	2202      	movs	r2, #2
 8002406:	4313      	orrs	r3, r2
 8002408:	b2d9      	uxtb	r1, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	224a      	movs	r2, #74	; 0x4a
 800240e:	5499      	strb	r1, [r3, r2]
//		__WRITE_TOP_PLATTER_HEAT(0);
		__WRITE_BOTTOM_PLATTER_HEAT(0);
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	0159      	lsls	r1, r3, #5
 8002414:	2390      	movs	r3, #144	; 0x90
 8002416:	05db      	lsls	r3, r3, #23
 8002418:	2200      	movs	r2, #0
 800241a:	0018      	movs	r0, r3
 800241c:	f003 fce5 	bl	8005dea <HAL_GPIO_WritePin>
//		return;
	}

	if (!press->thermal_setpoint.enable) {
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	5c9b      	ldrb	r3, [r3, r2]
 8002426:	2201      	movs	r2, #1
 8002428:	4053      	eors	r3, r2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d018      	beq.n	8002462 <thermal_control_loop+0x12a>
		__WRITE_TOP_PLATTER_HEAT(0);
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	0119      	lsls	r1, r3, #4
 8002434:	2390      	movs	r3, #144	; 0x90
 8002436:	05db      	lsls	r3, r3, #23
 8002438:	2200      	movs	r2, #0
 800243a:	0018      	movs	r0, r3
 800243c:	f003 fcd5 	bl	8005dea <HAL_GPIO_WritePin>
		__WRITE_BOTTOM_PLATTER_HEAT(0);
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	0159      	lsls	r1, r3, #5
 8002444:	2390      	movs	r3, #144	; 0x90
 8002446:	05db      	lsls	r3, r3, #23
 8002448:	2200      	movs	r2, #0
 800244a:	0018      	movs	r0, r3
 800244c:	f003 fccd 	bl	8005dea <HAL_GPIO_WritePin>
		press->thermal_state.top_ready = 0;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	2100      	movs	r1, #0
 8002456:	5499      	strb	r1, [r3, r2]
		press->thermal_state.bottom_ready = 0;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2241      	movs	r2, #65	; 0x41
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]
		return;
 8002460:	e0b0      	b.n	80025c4 <thermal_control_loop+0x28c>
	}

	if (press->thermal_setpoint.top_temp - top_temp > 3.0f) {
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2220      	movs	r2, #32
 8002466:	5e9b      	ldrsh	r3, [r3, r2]
 8002468:	0018      	movs	r0, r3
 800246a:	f7fe fd51 	bl	8000f10 <__aeabi_i2f>
 800246e:	1c03      	adds	r3, r0, #0
 8002470:	6979      	ldr	r1, [r7, #20]
 8002472:	1c18      	adds	r0, r3, #0
 8002474:	f7fe fb7e 	bl	8000b74 <__aeabi_fsub>
 8002478:	1c03      	adds	r3, r0, #0
 800247a:	4955      	ldr	r1, [pc, #340]	; (80025d0 <thermal_control_loop+0x298>)
 800247c:	1c18      	adds	r0, r3, #0
 800247e:	f7fd fff1 	bl	8000464 <__aeabi_fcmpgt>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d003      	beq.n	800248e <thermal_control_loop+0x156>
		press->thermal_state.top_ready = false;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2240      	movs	r2, #64	; 0x40
 800248a:	2100      	movs	r1, #0
 800248c:	5499      	strb	r1, [r3, r2]
	}
	if (press->thermal_setpoint.bottom_temp - bottom_temp > 3.0f) {
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2222      	movs	r2, #34	; 0x22
 8002492:	5e9b      	ldrsh	r3, [r3, r2]
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe fd3b 	bl	8000f10 <__aeabi_i2f>
 800249a:	1c03      	adds	r3, r0, #0
 800249c:	6939      	ldr	r1, [r7, #16]
 800249e:	1c18      	adds	r0, r3, #0
 80024a0:	f7fe fb68 	bl	8000b74 <__aeabi_fsub>
 80024a4:	1c03      	adds	r3, r0, #0
 80024a6:	494a      	ldr	r1, [pc, #296]	; (80025d0 <thermal_control_loop+0x298>)
 80024a8:	1c18      	adds	r0, r3, #0
 80024aa:	f7fd ffdb 	bl	8000464 <__aeabi_fcmpgt>
 80024ae:	1e03      	subs	r3, r0, #0
 80024b0:	d003      	beq.n	80024ba <thermal_control_loop+0x182>
		press->thermal_state.bottom_ready = false;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2241      	movs	r2, #65	; 0x41
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]
	}

	bool top_heat_on = top_temp < press->thermal_state.top_threshold;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	220f      	movs	r2, #15
 80024c0:	18bc      	adds	r4, r7, r2
 80024c2:	2201      	movs	r2, #1
 80024c4:	1c15      	adds	r5, r2, #0
 80024c6:	1c19      	adds	r1, r3, #0
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f7fd ffb7 	bl	800043c <__aeabi_fcmplt>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d101      	bne.n	80024d6 <thermal_control_loop+0x19e>
 80024d2:	2300      	movs	r3, #0
 80024d4:	1c1d      	adds	r5, r3, #0
 80024d6:	7025      	strb	r5, [r4, #0]
	bool bottom_heat_on = bottom_temp < press->thermal_state.bottom_threshold;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	220e      	movs	r2, #14
 80024de:	18bc      	adds	r4, r7, r2
 80024e0:	2201      	movs	r2, #1
 80024e2:	1c15      	adds	r5, r2, #0
 80024e4:	1c19      	adds	r1, r3, #0
 80024e6:	6938      	ldr	r0, [r7, #16]
 80024e8:	f7fd ffa8 	bl	800043c <__aeabi_fcmplt>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d101      	bne.n	80024f4 <thermal_control_loop+0x1bc>
 80024f0:	2300      	movs	r3, #0
 80024f2:	1c1d      	adds	r5, r3, #0
 80024f4:	7025      	strb	r5, [r4, #0]

	__WRITE_TOP_PLATTER_HEAT(top_heat_on);
 80024f6:	240f      	movs	r4, #15
 80024f8:	193b      	adds	r3, r7, r4
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	0119      	lsls	r1, r3, #4
 8002500:	2390      	movs	r3, #144	; 0x90
 8002502:	05db      	lsls	r3, r3, #23
 8002504:	0018      	movs	r0, r3
 8002506:	f003 fc70 	bl	8005dea <HAL_GPIO_WritePin>
	__WRITE_BOTTOM_PLATTER_HEAT(bottom_heat_on);
 800250a:	230e      	movs	r3, #14
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	0159      	lsls	r1, r3, #5
 8002514:	2390      	movs	r3, #144	; 0x90
 8002516:	05db      	lsls	r3, r3, #23
 8002518:	0018      	movs	r0, r3
 800251a:	f003 fc66 	bl	8005dea <HAL_GPIO_WritePin>

	if (top_heat_on) {
 800251e:	193b      	adds	r3, r7, r4
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <thermal_control_loop+0x210>
		press->thermal_state.top_threshold =
				press->thermal_setpoint.top_temp + THERM_DEADBAND;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2220      	movs	r2, #32
 800252a:	5e9b      	ldrsh	r3, [r3, r2]
 800252c:	0018      	movs	r0, r3
 800252e:	f7fe fcef 	bl	8000f10 <__aeabi_i2f>
 8002532:	1c03      	adds	r3, r0, #0
 8002534:	21ff      	movs	r1, #255	; 0xff
 8002536:	0589      	lsls	r1, r1, #22
 8002538:	1c18      	adds	r0, r3, #0
 800253a:	f7fd ffa7 	bl	800048c <__aeabi_fadd>
 800253e:	1c03      	adds	r3, r0, #0
 8002540:	1c1a      	adds	r2, r3, #0
		press->thermal_state.top_threshold =
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
 8002546:	e013      	b.n	8002570 <thermal_control_loop+0x238>
	} else {
		press->thermal_state.top_threshold =
				press->thermal_setpoint.top_temp - THERM_DEADBAND;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2220      	movs	r2, #32
 800254c:	5e9b      	ldrsh	r3, [r3, r2]
 800254e:	0018      	movs	r0, r3
 8002550:	f7fe fcde 	bl	8000f10 <__aeabi_i2f>
 8002554:	1c03      	adds	r3, r0, #0
 8002556:	21ff      	movs	r1, #255	; 0xff
 8002558:	0589      	lsls	r1, r1, #22
 800255a:	1c18      	adds	r0, r3, #0
 800255c:	f7fe fb0a 	bl	8000b74 <__aeabi_fsub>
 8002560:	1c03      	adds	r3, r0, #0
 8002562:	1c1a      	adds	r2, r3, #0
		press->thermal_state.top_threshold =
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
		press->thermal_state.top_ready = true;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	2101      	movs	r1, #1
 800256e:	5499      	strb	r1, [r3, r2]
	}

	if (bottom_heat_on) {
 8002570:	230e      	movs	r3, #14
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <thermal_control_loop+0x264>
		press->thermal_state.bottom_threshold =
				press->thermal_setpoint.bottom_temp + THERM_DEADBAND;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2222      	movs	r2, #34	; 0x22
 800257e:	5e9b      	ldrsh	r3, [r3, r2]
 8002580:	0018      	movs	r0, r3
 8002582:	f7fe fcc5 	bl	8000f10 <__aeabi_i2f>
 8002586:	1c03      	adds	r3, r0, #0
 8002588:	21ff      	movs	r1, #255	; 0xff
 800258a:	0589      	lsls	r1, r1, #22
 800258c:	1c18      	adds	r0, r3, #0
 800258e:	f7fd ff7d 	bl	800048c <__aeabi_fadd>
 8002592:	1c03      	adds	r3, r0, #0
 8002594:	1c1a      	adds	r2, r3, #0
		press->thermal_state.bottom_threshold =
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	63da      	str	r2, [r3, #60]	; 0x3c
 800259a:	e013      	b.n	80025c4 <thermal_control_loop+0x28c>
	} else {
		press->thermal_state.bottom_threshold =
				press->thermal_setpoint.bottom_temp - THERM_DEADBAND;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2222      	movs	r2, #34	; 0x22
 80025a0:	5e9b      	ldrsh	r3, [r3, r2]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7fe fcb4 	bl	8000f10 <__aeabi_i2f>
 80025a8:	1c03      	adds	r3, r0, #0
 80025aa:	21ff      	movs	r1, #255	; 0xff
 80025ac:	0589      	lsls	r1, r1, #22
 80025ae:	1c18      	adds	r0, r3, #0
 80025b0:	f7fe fae0 	bl	8000b74 <__aeabi_fsub>
 80025b4:	1c03      	adds	r3, r0, #0
 80025b6:	1c1a      	adds	r2, r3, #0
		press->thermal_state.bottom_threshold =
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c
		press->thermal_state.bottom_ready = true;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2241      	movs	r2, #65	; 0x41
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]
	}
}
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b006      	add	sp, #24
 80025c8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	447a0000 	.word	0x447a0000
 80025d0:	40400000 	.word	0x40400000

080025d4 <debounce>:

Button press_top_limit;
Button press_bottom_limit;
Button tray_interlock;

bool debounce(Button* button, bool state) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	000a      	movs	r2, r1
 80025de:	1cfb      	adds	r3, r7, #3
 80025e0:	701a      	strb	r2, [r3, #0]
	if (button->state == state) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	791b      	ldrb	r3, [r3, #4]
 80025e6:	1cfa      	adds	r2, r7, #3
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d103      	bne.n	80025f6 <debounce+0x22>
		button->ctr = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e017      	b.n	8002626 <debounce+0x52>
	} else {
		if (++button->ctr > SETTLING_TIME) {
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b0a      	cmp	r3, #10
 8002606:	dd0e      	ble.n	8002626 <debounce+0x52>
			button->state = state;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	1cfa      	adds	r2, r7, #3
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	711a      	strb	r2, [r3, #4]
			if (state) {
 8002610:	1cfb      	adds	r3, r7, #3
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <debounce+0x4c>
				button->rising_edge_flag = true;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	715a      	strb	r2, [r3, #5]
 800261e:	e002      	b.n	8002626 <debounce+0x52>
			} else {
				button->falling_edge_flag = true;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	719a      	strb	r2, [r3, #6]
			}
		}
	}
	return button->state;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	791b      	ldrb	r3, [r3, #4]
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <debounce_menu_buttons>:

/*
 * TODO: de-invert these for the new board
 */
void debounce_menu_buttons(void) {
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	debounce(&menu_up_button, !__READ_UP_SW());
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <debounce_menu_buttons+0x6c>)
 800263e:	0019      	movs	r1, r3
 8002640:	0010      	movs	r0, r2
 8002642:	f003 fbb5 	bl	8005db0 <HAL_GPIO_ReadPin>
 8002646:	0003      	movs	r3, r0
 8002648:	425a      	negs	r2, r3
 800264a:	4153      	adcs	r3, r2
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <debounce_menu_buttons+0x70>)
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff ffbe 	bl	80025d4 <debounce>
	debounce(&menu_down_button, !__READ_DOWN_SW());
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	019b      	lsls	r3, r3, #6
 800265c:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <debounce_menu_buttons+0x6c>)
 800265e:	0019      	movs	r1, r3
 8002660:	0010      	movs	r0, r2
 8002662:	f003 fba5 	bl	8005db0 <HAL_GPIO_ReadPin>
 8002666:	0003      	movs	r3, r0
 8002668:	425a      	negs	r2, r3
 800266a:	4153      	adcs	r3, r2
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <debounce_menu_buttons+0x74>)
 8002670:	0011      	movs	r1, r2
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff ffae 	bl	80025d4 <debounce>
	debounce(&menu_enter_button, !__READ_ENTER_SW());
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	01db      	lsls	r3, r3, #7
 800267c:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <debounce_menu_buttons+0x6c>)
 800267e:	0019      	movs	r1, r3
 8002680:	0010      	movs	r0, r2
 8002682:	f003 fb95 	bl	8005db0 <HAL_GPIO_ReadPin>
 8002686:	0003      	movs	r3, r0
 8002688:	425a      	negs	r2, r3
 800268a:	4153      	adcs	r3, r2
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <debounce_menu_buttons+0x78>)
 8002690:	0011      	movs	r1, r2
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff ff9e 	bl	80025d4 <debounce>
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	48000800 	.word	0x48000800
 80026a4:	20000758 	.word	0x20000758
 80026a8:	20000760 	.word	0x20000760
 80026ac:	20000768 	.word	0x20000768

080026b0 <debounce_activate_buttons>:

void debounce_activate_buttons(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	debounce(&activate_left_button, __READ_LEFT_ACTIVATE_SW());
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <debounce_activate_buttons+0x48>)
 80026ba:	0019      	movs	r1, r3
 80026bc:	0010      	movs	r0, r2
 80026be:	f003 fb77 	bl	8005db0 <HAL_GPIO_ReadPin>
 80026c2:	0003      	movs	r3, r0
 80026c4:	1e5a      	subs	r2, r3, #1
 80026c6:	4193      	sbcs	r3, r2
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <debounce_activate_buttons+0x4c>)
 80026cc:	0011      	movs	r1, r2
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff ff80 	bl	80025d4 <debounce>
	debounce(&activate_right_button, __READ_RIGHT_ACTIVATE_SW());
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <debounce_activate_buttons+0x48>)
 80026d6:	2102      	movs	r1, #2
 80026d8:	0018      	movs	r0, r3
 80026da:	f003 fb69 	bl	8005db0 <HAL_GPIO_ReadPin>
 80026de:	0003      	movs	r3, r0
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	4193      	sbcs	r3, r2
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <debounce_activate_buttons+0x50>)
 80026e8:	0011      	movs	r1, r2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7ff ff72 	bl	80025d4 <debounce>
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	48000400 	.word	0x48000400
 80026fc:	20000770 	.word	0x20000770
 8002700:	20000778 	.word	0x20000778

08002704 <debounce_interlock>:
void debounce_interlock(void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	debounce(&press_top_limit, __READ_TOP_TRAVEL_SW());
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	01db      	lsls	r3, r3, #7
 800270c:	4a18      	ldr	r2, [pc, #96]	; (8002770 <debounce_interlock+0x6c>)
 800270e:	0019      	movs	r1, r3
 8002710:	0010      	movs	r0, r2
 8002712:	f003 fb4d 	bl	8005db0 <HAL_GPIO_ReadPin>
 8002716:	0003      	movs	r3, r0
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	4193      	sbcs	r3, r2
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <debounce_interlock+0x70>)
 8002720:	0011      	movs	r1, r2
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff ff56 	bl	80025d4 <debounce>
	debounce(&press_bottom_limit, __READ_BOTTOM_TRAVEL_SW());
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	4a10      	ldr	r2, [pc, #64]	; (8002770 <debounce_interlock+0x6c>)
 800272e:	0019      	movs	r1, r3
 8002730:	0010      	movs	r0, r2
 8002732:	f003 fb3d 	bl	8005db0 <HAL_GPIO_ReadPin>
 8002736:	0003      	movs	r3, r0
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	4193      	sbcs	r3, r2
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <debounce_interlock+0x74>)
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff ff46 	bl	80025d4 <debounce>
	debounce(&tray_interlock, __READ_PLATTER_SW());
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	00da      	lsls	r2, r3, #3
 800274c:	2390      	movs	r3, #144	; 0x90
 800274e:	05db      	lsls	r3, r3, #23
 8002750:	0011      	movs	r1, r2
 8002752:	0018      	movs	r0, r3
 8002754:	f003 fb2c 	bl	8005db0 <HAL_GPIO_ReadPin>
 8002758:	0003      	movs	r3, r0
 800275a:	1e5a      	subs	r2, r3, #1
 800275c:	4193      	sbcs	r3, r2
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <debounce_interlock+0x78>)
 8002762:	0011      	movs	r1, r2
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff ff35 	bl	80025d4 <debounce>
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	48000400 	.word	0x48000400
 8002774:	20000780 	.word	0x20000780
 8002778:	20000788 	.word	0x20000788
 800277c:	20000790 	.word	0x20000790

08002780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002782:	46de      	mov	lr, fp
 8002784:	4657      	mov	r7, sl
 8002786:	464e      	mov	r6, r9
 8002788:	4645      	mov	r5, r8
 800278a:	b5e0      	push	{r5, r6, r7, lr}
 800278c:	4cb8      	ldr	r4, [pc, #736]	; (8002a70 <main+0x2f0>)
 800278e:	44a5      	add	sp, r4
 8002790:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002792:	f002 f8fd 	bl	8004990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002796:	f000 fa43 	bl	8002c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800279a:	f000 fd27 	bl	80031ec <MX_GPIO_Init>
  MX_DMA_Init();
 800279e:	f000 fcff 	bl	80031a0 <MX_DMA_Init>
  MX_I2C2_Init();
 80027a2:	f000 fb03 	bl	8002dac <MX_I2C2_Init>
  MX_TIM1_Init();
 80027a6:	f000 fbc7 	bl	8002f38 <MX_TIM1_Init>
  MX_SPI1_Init();
 80027aa:	f000 fb87 	bl	8002ebc <MX_SPI1_Init>
  MX_TIM2_Init();
 80027ae:	f000 fc65 	bl	800307c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80027b2:	f000 fcc5 	bl	8003140 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80027b6:	f000 fb59 	bl	8002e6c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  MX_ADC_Init();
 80027ba:	f000 fa9b 	bl	8002cf4 <MX_ADC_Init>

  // __HAL_RCC_PWR_CLK_ENABLE(); // duplicated in HAL_Init
  HAL_PWR_EnableBkUpAccess(); //enable RTC backup regs
 80027be:	f004 fd4f 	bl	8007260 <HAL_PWR_EnableBkUpAccess>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027c2:	4bac      	ldr	r3, [pc, #688]	; (8002a74 <main+0x2f4>)
 80027c4:	2100      	movs	r1, #0
 80027c6:	0018      	movs	r0, r3
 80027c8:	f006 fa06 	bl	8008bd8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80027cc:	4ba9      	ldr	r3, [pc, #676]	; (8002a74 <main+0x2f4>)
 80027ce:	2100      	movs	r1, #0
 80027d0:	0018      	movs	r0, r3
 80027d2:	f006 ffd1 	bl	8009778 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80027d6:	4ba7      	ldr	r3, [pc, #668]	; (8002a74 <main+0x2f4>)
 80027d8:	2104      	movs	r1, #4
 80027da:	0018      	movs	r0, r3
 80027dc:	f006 f9fc 	bl	8008bd8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80027e0:	4ba4      	ldr	r3, [pc, #656]	; (8002a74 <main+0x2f4>)
 80027e2:	2104      	movs	r1, #4
 80027e4:	0018      	movs	r0, r3
 80027e6:	f006 ffc7 	bl	8009778 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 80027ea:	4ba2      	ldr	r3, [pc, #648]	; (8002a74 <main+0x2f4>)
 80027ec:	0018      	movs	r0, r3
 80027ee:	f006 f951 	bl	8008a94 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) &adc_output, 1);
 80027f2:	49a1      	ldr	r1, [pc, #644]	; (8002a78 <main+0x2f8>)
 80027f4:	4ba1      	ldr	r3, [pc, #644]	; (8002a7c <main+0x2fc>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	0018      	movs	r0, r3
 80027fa:	f002 fa91 	bl	8004d20 <HAL_ADC_Start_DMA>

  // pc_uart_init(&huart1);

  HAL_Delay(2000);
 80027fe:	23fa      	movs	r3, #250	; 0xfa
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	0018      	movs	r0, r3
 8002804:	f002 f928 	bl	8004a58 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc);
 8002808:	4b9c      	ldr	r3, [pc, #624]	; (8002a7c <main+0x2fc>)
 800280a:	0018      	movs	r0, r3
 800280c:	f002 fdf0 	bl	80053f0 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(1000);
 8002810:	23fa      	movs	r3, #250	; 0xfa
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	0018      	movs	r0, r3
 8002816:	f002 f91f 	bl	8004a58 <HAL_Delay>
  press.press_setpoint.enable = true;
 800281a:	4b99      	ldr	r3, [pc, #612]	; (8002a80 <main+0x300>)
 800281c:	2201      	movs	r2, #1
 800281e:	71da      	strb	r2, [r3, #7]
  press.thermal_setpoint.enable = true;
 8002820:	4b97      	ldr	r3, [pc, #604]	; (8002a80 <main+0x300>)
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	2101      	movs	r1, #1
 8002826:	5499      	strb	r1, [r3, r2]

  init_menus();
 8002828:	f000 fd9e 	bl	8003368 <init_menus>

  __WRITE_SCREEN_DC(0);
 800282c:	2390      	movs	r3, #144	; 0x90
 800282e:	05db      	lsls	r3, r3, #23
 8002830:	2200      	movs	r2, #0
 8002832:	2101      	movs	r1, #1
 8002834:	0018      	movs	r0, r3
 8002836:	f003 fad8 	bl	8005dea <HAL_GPIO_WritePin>
  __WRITE_SCREEN_CS(0);
 800283a:	2390      	movs	r3, #144	; 0x90
 800283c:	05db      	lsls	r3, r3, #23
 800283e:	2200      	movs	r2, #0
 8002840:	2120      	movs	r1, #32
 8002842:	0018      	movs	r0, r3
 8002844:	f003 fad1 	bl	8005dea <HAL_GPIO_WritePin>
  __WRITE_SCREEN_RESET(0);
 8002848:	2390      	movs	r3, #144	; 0x90
 800284a:	05db      	lsls	r3, r3, #23
 800284c:	2200      	movs	r2, #0
 800284e:	2110      	movs	r1, #16
 8002850:	0018      	movs	r0, r3
 8002852:	f003 faca 	bl	8005dea <HAL_GPIO_WritePin>
  __WRITE_WHITE_LED(1);
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <main+0x304>)
 8002858:	2201      	movs	r2, #1
 800285a:	2104      	movs	r1, #4
 800285c:	0018      	movs	r0, r3
 800285e:	f003 fac4 	bl	8005dea <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8002862:	20c8      	movs	r0, #200	; 0xc8
 8002864:	f002 f8f8 	bl	8004a58 <HAL_Delay>
  __WRITE_SCREEN_RESET(1);
 8002868:	2390      	movs	r3, #144	; 0x90
 800286a:	05db      	lsls	r3, r3, #23
 800286c:	2201      	movs	r2, #1
 800286e:	2110      	movs	r1, #16
 8002870:	0018      	movs	r0, r3
 8002872:	f003 faba 	bl	8005dea <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8002876:	20c8      	movs	r0, #200	; 0xc8
 8002878:	f002 f8ee 	bl	8004a58 <HAL_Delay>

  restore_settings(&(press.config));
 800287c:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <main+0x308>)
 800287e:	0018      	movs	r0, r3
 8002880:	f7fe fefa 	bl	8001678 <restore_settings>
  config_to_setpoints(&press);
 8002884:	4b7e      	ldr	r3, [pc, #504]	; (8002a80 <main+0x300>)
 8002886:	0018      	movs	r0, r3
 8002888:	f7fe ff4c 	bl	8001724 <config_to_setpoints>

  SSD1306_InitScreen(&hi2c2);
 800288c:	4b7f      	ldr	r3, [pc, #508]	; (8002a8c <main+0x30c>)
 800288e:	0018      	movs	r0, r3
 8002890:	f7fe fbaa 	bl	8000fe8 <SSD1306_InitScreen>
  current_menu->display(current_menu);
 8002894:	4b7e      	ldr	r3, [pc, #504]	; (8002a90 <main+0x310>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800289a:	4b7d      	ldr	r3, [pc, #500]	; (8002a90 <main+0x310>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0018      	movs	r0, r3
 80028a0:	4790      	blx	r2
  // Set button key press flags to low
  menu_up_button.rising_edge_flag = 0;
 80028a2:	4b7c      	ldr	r3, [pc, #496]	; (8002a94 <main+0x314>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	715a      	strb	r2, [r3, #5]
  menu_down_button.rising_edge_flag = 0;
 80028a8:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <main+0x318>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	715a      	strb	r2, [r3, #5]
  menu_enter_button.rising_edge_flag = 0;
 80028ae:	4b7b      	ldr	r3, [pc, #492]	; (8002a9c <main+0x31c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	715a      	strb	r2, [r3, #5]
  MX_IWDG_Init();
 80028b4:	f000 faba 	bl	8002e2c <MX_IWDG_Init>


  PressMode last_press_mode = PRESS_READY;
 80028b8:	4b79      	ldr	r3, [pc, #484]	; (8002aa0 <main+0x320>)
 80028ba:	2210      	movs	r2, #16
 80028bc:	189b      	adds	r3, r3, r2
 80028be:	19db      	adds	r3, r3, r7
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (menu_up_button.rising_edge_flag) {
 80028c4:	4b73      	ldr	r3, [pc, #460]	; (8002a94 <main+0x314>)
 80028c6:	795b      	ldrb	r3, [r3, #5]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <main+0x178>
		  menu_up_button.rising_edge_flag = 0;
 80028cc:	4b71      	ldr	r3, [pc, #452]	; (8002a94 <main+0x314>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	715a      	strb	r2, [r3, #5]
		  current_menu = menu_up(current_menu);
 80028d2:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <main+0x310>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fdd4 	bl	8003484 <menu_up>
 80028dc:	0002      	movs	r2, r0
 80028de:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <main+0x310>)
 80028e0:	601a      	str	r2, [r3, #0]
		  menu_last_used = ticks;
 80028e2:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <main+0x324>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <main+0x328>)
 80028e8:	601a      	str	r2, [r3, #0]
		  last_button_press = ticks;
 80028ea:	4b6e      	ldr	r3, [pc, #440]	; (8002aa4 <main+0x324>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <main+0x32c>)
 80028f0:	601a      	str	r2, [r3, #0]
		  menu_awake = 1;
 80028f2:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <main+0x330>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
	  }

	  if (menu_down_button.rising_edge_flag) {
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <main+0x318>)
 80028fa:	795b      	ldrb	r3, [r3, #5]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <main+0x1ac>
		  menu_down_button.rising_edge_flag = 0;
 8002900:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <main+0x318>)
 8002902:	2200      	movs	r2, #0
 8002904:	715a      	strb	r2, [r3, #5]
		  current_menu = menu_down(current_menu);
 8002906:	4b62      	ldr	r3, [pc, #392]	; (8002a90 <main+0x310>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fe30 	bl	8003570 <menu_down>
 8002910:	0002      	movs	r2, r0
 8002912:	4b5f      	ldr	r3, [pc, #380]	; (8002a90 <main+0x310>)
 8002914:	601a      	str	r2, [r3, #0]
		  menu_last_used = ticks;
 8002916:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <main+0x324>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <main+0x328>)
 800291c:	601a      	str	r2, [r3, #0]
		  last_button_press = ticks;
 800291e:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <main+0x324>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b62      	ldr	r3, [pc, #392]	; (8002aac <main+0x32c>)
 8002924:	601a      	str	r2, [r3, #0]
		  menu_awake = 1;
 8002926:	4b62      	ldr	r3, [pc, #392]	; (8002ab0 <main+0x330>)
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
	  }

	  if (menu_enter_button.rising_edge_flag) {
 800292c:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <main+0x31c>)
 800292e:	795b      	ldrb	r3, [r3, #5]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <main+0x1e0>
		  menu_enter_button.rising_edge_flag = 0;
 8002934:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <main+0x31c>)
 8002936:	2200      	movs	r2, #0
 8002938:	715a      	strb	r2, [r3, #5]
		  current_menu = menu_enter(current_menu);
 800293a:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <main+0x310>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 fec4 	bl	80036cc <menu_enter>
 8002944:	0002      	movs	r2, r0
 8002946:	4b52      	ldr	r3, [pc, #328]	; (8002a90 <main+0x310>)
 8002948:	601a      	str	r2, [r3, #0]
		  menu_last_used = ticks;
 800294a:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <main+0x324>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <main+0x328>)
 8002950:	601a      	str	r2, [r3, #0]
		  last_button_press = ticks;
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <main+0x324>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b55      	ldr	r3, [pc, #340]	; (8002aac <main+0x32c>)
 8002958:	601a      	str	r2, [r3, #0]
		  menu_awake = 1;
 800295a:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <main+0x330>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
	  }

	  if (menu_awake) {
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <main+0x330>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d029      	beq.n	80029bc <main+0x23c>
		  if (ticks - menu_last_used > MENU_TIMEOUT) {
 8002968:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <main+0x324>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b4e      	ldr	r3, [pc, #312]	; (8002aa8 <main+0x328>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <main+0x334>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d908      	bls.n	800298a <main+0x20a>
			  menu_awake = 0;
 8002978:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <main+0x330>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
			  menu_last_used = ticks;
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <main+0x324>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <main+0x328>)
 8002984:	601a      	str	r2, [r3, #0]
			  menu_return_home();
 8002986:	f000 ffbb 	bl	8003900 <menu_return_home>
		  }
		  if (current_menu == &status_menu) {
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <main+0x310>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <main+0x338>)
 8002990:	429a      	cmp	r2, r3
 8002992:	d106      	bne.n	80029a2 <main+0x222>
			  menu_awake = 0;
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <main+0x330>)
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
			  menu_last_used = ticks;
 800299a:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <main+0x324>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b42      	ldr	r3, [pc, #264]	; (8002aa8 <main+0x328>)
 80029a0:	601a      	str	r2, [r3, #0]
		  }
		  if (current_menu == &debug_menu) {
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <main+0x310>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <main+0x33c>)
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d135      	bne.n	8002a18 <main+0x298>
			  menu_awake = 0;
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <main+0x330>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
			  menu_last_used = ticks;
 80029b2:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <main+0x324>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b3c      	ldr	r3, [pc, #240]	; (8002aa8 <main+0x328>)
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e02d      	b.n	8002a18 <main+0x298>
		  }
	  } else {
		  if (ticks - menu_last_used > 200) {
 80029bc:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <main+0x324>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <main+0x328>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2bc8      	cmp	r3, #200	; 0xc8
 80029c8:	d90d      	bls.n	80029e6 <main+0x266>
			  menu_awake = 0;
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <main+0x330>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
			  menu_last_used = ticks;
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <main+0x324>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <main+0x328>)
 80029d6:	601a      	str	r2, [r3, #0]
			  current_menu->display(current_menu);
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <main+0x310>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <main+0x310>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	0018      	movs	r0, r3
 80029e4:	4790      	blx	r2
			  //			  thermocouple_readout();
		  }

		  if (last_press_mode != press.press_state.mode) {
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <main+0x300>)
 80029e8:	7a1b      	ldrb	r3, [r3, #8]
 80029ea:	492d      	ldr	r1, [pc, #180]	; (8002aa0 <main+0x320>)
 80029ec:	2010      	movs	r0, #16
 80029ee:	180a      	adds	r2, r1, r0
 80029f0:	19d2      	adds	r2, r2, r7
 80029f2:	7812      	ldrb	r2, [r2, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d00f      	beq.n	8002a18 <main+0x298>
			  last_press_mode = press.press_state.mode;
 80029f8:	180b      	adds	r3, r1, r0
 80029fa:	19db      	adds	r3, r3, r7
 80029fc:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <main+0x300>)
 80029fe:	7a12      	ldrb	r2, [r2, #8]
 8002a00:	701a      	strb	r2, [r3, #0]
			  menu_last_used = ticks;
 8002a02:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <main+0x324>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <main+0x328>)
 8002a08:	601a      	str	r2, [r3, #0]
			  current_menu->display(current_menu);
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <main+0x310>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <main+0x310>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0018      	movs	r0, r3
 8002a16:	4790      	blx	r2
		  }
	  }


	  if (!activate_left_button.state ||
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <main+0x340>)
 8002a1a:	791b      	ldrb	r3, [r3, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4053      	eors	r3, r2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <main+0x2b4>
			  !activate_right_button.state) {
 8002a26:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <main+0x344>)
 8002a28:	791b      	ldrb	r3, [r3, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4053      	eors	r3, r2
 8002a2e:	b2db      	uxtb	r3, r3
	  if (!activate_left_button.state ||
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <main+0x2bc>
		  last_button_press = ticks;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <main+0x324>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <main+0x32c>)
 8002a3a:	601a      	str	r2, [r3, #0]
	  }

	  // eco mode timeout
	  if (ticks - last_button_press > ECO_TIMEOUT) {
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <main+0x324>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <main+0x32c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <main+0x348>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d941      	bls.n	8002ad0 <main+0x350>
		  if (press.config.flags & CONFIG_ECO_FLAG) {
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <main+0x300>)
 8002a4e:	2250      	movs	r2, #80	; 0x50
 8002a50:	5a9b      	ldrh	r3, [r3, r2]
 8002a52:	001a      	movs	r2, r3
 8002a54:	2310      	movs	r3, #16
 8002a56:	4013      	ands	r3, r2
 8002a58:	d003      	beq.n	8002a62 <main+0x2e2>
			  press.thermal_setpoint.enable = false;
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <main+0x300>)
 8002a5c:	2224      	movs	r2, #36	; 0x24
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]
		  }
		  last_button_press = ticks - (ECO_TIMEOUT+1000);
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <main+0x324>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a19      	ldr	r2, [pc, #100]	; (8002acc <main+0x34c>)
 8002a68:	189a      	adds	r2, r3, r2
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <main+0x32c>)
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e033      	b.n	8002ad8 <main+0x358>
 8002a70:	fffffdbc 	.word	0xfffffdbc
 8002a74:	20000940 	.word	0x20000940
 8002a78:	20000a68 	.word	0x20000a68
 8002a7c:	20000798 	.word	0x20000798
 8002a80:	20000000 	.word	0x20000000
 8002a84:	48000400 	.word	0x48000400
 8002a88:	20000050 	.word	0x20000050
 8002a8c:	2000081c 	.word	0x2000081c
 8002a90:	20000614 	.word	0x20000614
 8002a94:	20000758 	.word	0x20000758
 8002a98:	20000760 	.word	0x20000760
 8002a9c:	20000768 	.word	0x20000768
 8002aa0:	00000207 	.word	0x00000207
 8002aa4:	20000740 	.word	0x20000740
 8002aa8:	20000a54 	.word	0x20000a54
 8002aac:	20000a5c 	.word	0x20000a5c
 8002ab0:	20000a58 	.word	0x20000a58
 8002ab4:	00003a98 	.word	0x00003a98
 8002ab8:	20000064 	.word	0x20000064
 8002abc:	200005ac 	.word	0x200005ac
 8002ac0:	20000770 	.word	0x20000770
 8002ac4:	20000778 	.word	0x20000778
 8002ac8:	000dbba0 	.word	0x000dbba0
 8002acc:	fff24078 	.word	0xfff24078
	  } else {
		  press.thermal_setpoint.enable = true;
 8002ad0:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <main+0x474>)
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	5499      	strb	r1, [r3, r2]
	  }

#ifdef DEBUG
	  char msg[512];
	  memset(msg, 0, 512);
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	009a      	lsls	r2, r3, #2
 8002adc:	2010      	movs	r0, #16
 8002ade:	183b      	adds	r3, r7, r0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f007 fbfc 	bl	800a2e0 <memset>
			  "Safe: %d\t Top TR: %d\t Bottom TR: %d\n\r"
			  "Act L: %d\t Act R: %d\n\r"
			  "Motor: %d%%\t Current: %dA\n\r"
			  "State: %d\n\r"
			  "\n",
			  (int) press.thermal_state.top1 % 1000,
 8002ae8:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <main+0x474>)
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	1c18      	adds	r0, r3, #0
 8002aee:	f7fe f9ef 	bl	8000ed0 <__aeabi_f2iz>
 8002af2:	0002      	movs	r2, r0
	  int len = sprintf(msg,
 8002af4:	23fa      	movs	r3, #250	; 0xfa
 8002af6:	0099      	lsls	r1, r3, #2
 8002af8:	0010      	movs	r0, r2
 8002afa:	f7fd fc87 	bl	800040c <__aeabi_idivmod>
 8002afe:	000b      	movs	r3, r1
 8002b00:	60fb      	str	r3, [r7, #12]
			  (int) press.thermal_state.top2 % 1000,
 8002b02:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <main+0x474>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	1c18      	adds	r0, r3, #0
 8002b08:	f7fe f9e2 	bl	8000ed0 <__aeabi_f2iz>
 8002b0c:	0002      	movs	r2, r0
	  int len = sprintf(msg,
 8002b0e:	23fa      	movs	r3, #250	; 0xfa
 8002b10:	0099      	lsls	r1, r3, #2
 8002b12:	0010      	movs	r0, r2
 8002b14:	f7fd fc7a 	bl	800040c <__aeabi_idivmod>
 8002b18:	000b      	movs	r3, r1
 8002b1a:	60bb      	str	r3, [r7, #8]
			  (int) press.thermal_state.bottom1 % 1000,
 8002b1c:	4b35      	ldr	r3, [pc, #212]	; (8002bf4 <main+0x474>)
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	1c18      	adds	r0, r3, #0
 8002b22:	f7fe f9d5 	bl	8000ed0 <__aeabi_f2iz>
 8002b26:	0002      	movs	r2, r0
	  int len = sprintf(msg,
 8002b28:	23fa      	movs	r3, #250	; 0xfa
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	f7fd fc6d 	bl	800040c <__aeabi_idivmod>
 8002b32:	000b      	movs	r3, r1
 8002b34:	001d      	movs	r5, r3
			  (int) press.thermal_state.bottom2 % 1000,
 8002b36:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <main+0x474>)
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	1c18      	adds	r0, r3, #0
 8002b3c:	f7fe f9c8 	bl	8000ed0 <__aeabi_f2iz>
 8002b40:	0002      	movs	r2, r0
	  int len = sprintf(msg,
 8002b42:	23fa      	movs	r3, #250	; 0xfa
 8002b44:	0099      	lsls	r1, r3, #2
 8002b46:	0010      	movs	r0, r2
 8002b48:	f7fd fc60 	bl	800040c <__aeabi_idivmod>
 8002b4c:	000b      	movs	r3, r1
 8002b4e:	001e      	movs	r6, r3

			  tray_interlock.state,
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <main+0x478>)
 8002b52:	791b      	ldrb	r3, [r3, #4]
	  int len = sprintf(msg,
 8002b54:	4698      	mov	r8, r3
			  press_top_limit.state,
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <main+0x47c>)
 8002b58:	791b      	ldrb	r3, [r3, #4]
	  int len = sprintf(msg,
 8002b5a:	4699      	mov	r9, r3
			  press_bottom_limit.state,
 8002b5c:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <main+0x480>)
 8002b5e:	791b      	ldrb	r3, [r3, #4]
	  int len = sprintf(msg,
 8002b60:	469a      	mov	sl, r3

			  activate_left_button.state,
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <main+0x484>)
 8002b64:	791b      	ldrb	r3, [r3, #4]
	  int len = sprintf(msg,
 8002b66:	469b      	mov	fp, r3
			  activate_right_button.state,
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <main+0x488>)
 8002b6a:	791b      	ldrb	r3, [r3, #4]
	  int len = sprintf(msg,
 8002b6c:	607b      	str	r3, [r7, #4]

			  (int) (100.0f*press.press_state.motor_setpoint),
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <main+0x474>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	4926      	ldr	r1, [pc, #152]	; (8002c0c <main+0x48c>)
 8002b74:	1c18      	adds	r0, r3, #0
 8002b76:	f7fd fed7 	bl	8000928 <__aeabi_fmul>
 8002b7a:	1c03      	adds	r3, r0, #0
	  int len = sprintf(msg,
 8002b7c:	1c18      	adds	r0, r3, #0
 8002b7e:	f7fe f9a7 	bl	8000ed0 <__aeabi_f2iz>
 8002b82:	0004      	movs	r4, r0
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <main+0x490>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	1c18      	adds	r0, r3, #0
 8002b8a:	f7fe f9a1 	bl	8000ed0 <__aeabi_f2iz>
 8002b8e:	0002      	movs	r2, r0
			  (int) shunt_current,

			  (int) press.press_state.mode
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <main+0x474>)
 8002b92:	7a1b      	ldrb	r3, [r3, #8]
	  int len = sprintf(msg,
 8002b94:	491f      	ldr	r1, [pc, #124]	; (8002c14 <main+0x494>)
 8002b96:	2010      	movs	r0, #16
 8002b98:	1838      	adds	r0, r7, r0
 8002b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b9c:	9208      	str	r2, [sp, #32]
 8002b9e:	9407      	str	r4, [sp, #28]
 8002ba0:	687c      	ldr	r4, [r7, #4]
 8002ba2:	9406      	str	r4, [sp, #24]
 8002ba4:	465c      	mov	r4, fp
 8002ba6:	9405      	str	r4, [sp, #20]
 8002ba8:	4654      	mov	r4, sl
 8002baa:	9404      	str	r4, [sp, #16]
 8002bac:	464c      	mov	r4, r9
 8002bae:	9403      	str	r4, [sp, #12]
 8002bb0:	4644      	mov	r4, r8
 8002bb2:	9402      	str	r4, [sp, #8]
 8002bb4:	9601      	str	r6, [sp, #4]
 8002bb6:	9500      	str	r5, [sp, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f007 fb98 	bl	800a2f0 <siprintf>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	2010      	movs	r0, #16
 8002bc8:	1811      	adds	r1, r2, r0
 8002bca:	19c9      	adds	r1, r1, r7
 8002bcc:	600b      	str	r3, [r1, #0]
			  );
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, len, 100);
 8002bce:	0001      	movs	r1, r0
 8002bd0:	1853      	adds	r3, r2, r1
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	1879      	adds	r1, r7, r1
 8002bda:	480f      	ldr	r0, [pc, #60]	; (8002c18 <main+0x498>)
 8002bdc:	2364      	movs	r3, #100	; 0x64
 8002bde:	f006 ffab 	bl	8009b38 <HAL_UART_Transmit>
#endif

	  HAL_Delay(50);
 8002be2:	2032      	movs	r0, #50	; 0x32
 8002be4:	f001 ff38 	bl	8004a58 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <main+0x49c>)
 8002bea:	0018      	movs	r0, r3
 8002bec:	f004 fb28 	bl	8007240 <HAL_IWDG_Refresh>
  {
 8002bf0:	e668      	b.n	80028c4 <main+0x144>
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000790 	.word	0x20000790
 8002bfc:	20000780 	.word	0x20000780
 8002c00:	20000788 	.word	0x20000788
 8002c04:	20000770 	.word	0x20000770
 8002c08:	20000778 	.word	0x20000778
 8002c0c:	42c80000 	.word	0x42c80000
 8002c10:	20000a60 	.word	0x20000a60
 8002c14:	0800ac04 	.word	0x0800ac04
 8002c18:	200009d0 	.word	0x200009d0
 8002c1c:	200008ac 	.word	0x200008ac

08002c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b097      	sub	sp, #92	; 0x5c
 8002c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c26:	2428      	movs	r4, #40	; 0x28
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	2330      	movs	r3, #48	; 0x30
 8002c2e:	001a      	movs	r2, r3
 8002c30:	2100      	movs	r1, #0
 8002c32:	f007 fb55 	bl	800a2e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c36:	2318      	movs	r3, #24
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	001a      	movs	r2, r3
 8002c40:	2100      	movs	r1, #0
 8002c42:	f007 fb4d 	bl	800a2e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	0018      	movs	r0, r3
 8002c4a:	2314      	movs	r3, #20
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f007 fb46 	bl	800a2e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002c54:	0021      	movs	r1, r4
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	220b      	movs	r2, #11
 8002c5a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2201      	movs	r2, #1
 8002c60:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2201      	movs	r2, #1
 8002c66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	2201      	movs	r2, #1
 8002c72:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2202      	movs	r2, #2
 8002c78:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	22a0      	movs	r2, #160	; 0xa0
 8002c84:	0392      	lsls	r2, r2, #14
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	0018      	movs	r0, r3
 8002c92:	f004 faf3 	bl	800727c <HAL_RCC_OscConfig>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002c9a:	f000 fb5f 	bl	800335c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c9e:	2118      	movs	r1, #24
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	2202      	movs	r2, #2
 8002caa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2101      	movs	r1, #1
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f004 fdf7 	bl	80078b0 <HAL_RCC_ClockConfig>
 8002cc2:	1e03      	subs	r3, r0, #0
 8002cc4:	d001      	beq.n	8002cca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002cc6:	f000 fb49 	bl	800335c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	0252      	lsls	r2, r2, #9
 8002cd0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	22c0      	movs	r2, #192	; 0xc0
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f004 ff39 	bl	8007b54 <HAL_RCCEx_PeriphCLKConfig>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d001      	beq.n	8002cea <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002ce6:	f000 fb39 	bl	800335c <Error_Handler>
  }
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b017      	add	sp, #92	; 0x5c
 8002cf0:	bd90      	pop	{r4, r7, pc}
	...

08002cf4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	230c      	movs	r3, #12
 8002d00:	001a      	movs	r2, r3
 8002d02:	2100      	movs	r1, #0
 8002d04:	f007 faec 	bl	800a2e0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002d08:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d0a:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <MX_ADC_Init+0xb4>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	0612      	lsls	r2, r2, #24
 8002d14:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	00d2      	lsls	r2, r2, #3
 8002d52:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	2101      	movs	r1, #1
 8002d5a:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d64:	0018      	movs	r0, r3
 8002d66:	f001 fe9b 	bl	8004aa0 <HAL_ADC_Init>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8002d6e:	f000 faf5 	bl	800335c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	0152      	lsls	r2, r2, #5
 8002d7e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	2202      	movs	r2, #2
 8002d84:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d86:	1d3a      	adds	r2, r7, #4
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_ADC_Init+0xb0>)
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f002 f919 	bl	8004fc4 <HAL_ADC_ConfigChannel>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002d96:	f000 fae1 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b004      	add	sp, #16
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	20000798 	.word	0x20000798
 8002da8:	40012400 	.word	0x40012400

08002dac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002db2:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <MX_I2C2_Init+0x78>)
 8002db4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <MX_I2C2_Init+0x7c>)
 8002dba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002de8:	0018      	movs	r0, r3
 8002dea:	f003 f837 	bl	8005e5c <HAL_I2C_Init>
 8002dee:	1e03      	subs	r3, r0, #0
 8002df0:	d001      	beq.n	8002df6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002df2:	f000 fab3 	bl	800335c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002df8:	2100      	movs	r1, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f004 f936 	bl	800706c <HAL_I2CEx_ConfigAnalogFilter>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d001      	beq.n	8002e08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002e04:	f000 faaa 	bl	800335c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <MX_I2C2_Init+0x74>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f004 f979 	bl	8007104 <HAL_I2CEx_ConfigDigitalFilter>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002e16:	f000 faa1 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	2000081c 	.word	0x2000081c
 8002e24:	40005800 	.word	0x40005800
 8002e28:	2010091a 	.word	0x2010091a

08002e2c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <MX_IWDG_Init+0x34>)
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <MX_IWDG_Init+0x38>)
 8002e34:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <MX_IWDG_Init+0x34>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 1500;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <MX_IWDG_Init+0x34>)
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <MX_IWDG_Init+0x3c>)
 8002e40:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1500;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <MX_IWDG_Init+0x34>)
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <MX_IWDG_Init+0x3c>)
 8002e46:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <MX_IWDG_Init+0x34>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f004 f9a6 	bl	800719c <HAL_IWDG_Init>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d001      	beq.n	8002e58 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8002e54:	f000 fa82 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	200008ac 	.word	0x200008ac
 8002e64:	40003000 	.word	0x40003000
 8002e68:	000005dc 	.word	0x000005dc

08002e6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <MX_RTC_Init+0x44>)
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <MX_RTC_Init+0x48>)
 8002e74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MX_RTC_Init+0x44>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <MX_RTC_Init+0x44>)
 8002e7e:	227c      	movs	r2, #124	; 0x7c
 8002e80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1999;
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <MX_RTC_Init+0x44>)
 8002e84:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <MX_RTC_Init+0x4c>)
 8002e86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <MX_RTC_Init+0x44>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <MX_RTC_Init+0x44>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <MX_RTC_Init+0x44>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <MX_RTC_Init+0x44>)
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f004 ff37 	bl	8007d10 <HAL_RTC_Init>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002ea6:	f000 fa59 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	200008bc 	.word	0x200008bc
 8002eb4:	40002800 	.word	0x40002800
 8002eb8:	000007cf 	.word	0x000007cf

08002ebc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <MX_SPI1_Init+0x78>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002ec8:	2282      	movs	r2, #130	; 0x82
 8002eca:	0052      	lsls	r2, r2, #1
 8002ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ed4:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002ed6:	22e0      	movs	r2, #224	; 0xe0
 8002ed8:	00d2      	lsls	r2, r2, #3
 8002eda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	0092      	lsls	r2, r2, #2
 8002eee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002ef2:	2230      	movs	r2, #48	; 0x30
 8002ef4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002f16:	2208      	movs	r2, #8
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <MX_SPI1_Init+0x74>)
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f005 f80f 	bl	8007f40 <HAL_SPI_Init>
 8002f22:	1e03      	subs	r3, r0, #0
 8002f24:	d001      	beq.n	8002f2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f26:	f000 fa19 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200008dc 	.word	0x200008dc
 8002f34:	40013000 	.word	0x40013000

08002f38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b092      	sub	sp, #72	; 0x48
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f3e:	2340      	movs	r3, #64	; 0x40
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	0018      	movs	r0, r3
 8002f44:	2308      	movs	r3, #8
 8002f46:	001a      	movs	r2, r3
 8002f48:	2100      	movs	r1, #0
 8002f4a:	f007 f9c9 	bl	800a2e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f4e:	2324      	movs	r3, #36	; 0x24
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	0018      	movs	r0, r3
 8002f54:	231c      	movs	r3, #28
 8002f56:	001a      	movs	r2, r3
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f007 f9c1 	bl	800a2e0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	0018      	movs	r0, r3
 8002f62:	2320      	movs	r3, #32
 8002f64:	001a      	movs	r2, r3
 8002f66:	2100      	movs	r1, #0
 8002f68:	f007 f9ba 	bl	800a2e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f6c:	4b40      	ldr	r3, [pc, #256]	; (8003070 <MX_TIM1_Init+0x138>)
 8002f6e:	4a41      	ldr	r2, [pc, #260]	; (8003074 <MX_TIM1_Init+0x13c>)
 8002f70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <MX_TIM1_Init+0x138>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002f78:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <MX_TIM1_Init+0x138>)
 8002f7a:	2240      	movs	r2, #64	; 0x40
 8002f7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8002f7e:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <MX_TIM1_Init+0x138>)
 8002f80:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <MX_TIM1_Init+0x140>)
 8002f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f84:	4b3a      	ldr	r3, [pc, #232]	; (8003070 <MX_TIM1_Init+0x138>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8002f8a:	4b39      	ldr	r3, [pc, #228]	; (8003070 <MX_TIM1_Init+0x138>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b37      	ldr	r3, [pc, #220]	; (8003070 <MX_TIM1_Init+0x138>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f96:	4b36      	ldr	r3, [pc, #216]	; (8003070 <MX_TIM1_Init+0x138>)
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f005 fdcd 	bl	8008b38 <HAL_TIM_PWM_Init>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002fa2:	f000 f9db 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	2220      	movs	r2, #32
 8002fac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fb4:	187a      	adds	r2, r7, r1
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <MX_TIM1_Init+0x138>)
 8002fb8:	0011      	movs	r1, r2
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f006 fc78 	bl	80098b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc0:	1e03      	subs	r3, r0, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002fc4:	f000 f9ca 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fc8:	2124      	movs	r1, #36	; 0x24
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	2260      	movs	r2, #96	; 0x60
 8002fce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fd6:	187b      	adds	r3, r7, r1
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ff4:	1879      	adds	r1, r7, r1
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <MX_TIM1_Init+0x138>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f006 f836 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8003004:	f000 f9aa 	bl	800335c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003008:	2324      	movs	r3, #36	; 0x24
 800300a:	18f9      	adds	r1, r7, r3
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <MX_TIM1_Init+0x138>)
 800300e:	2204      	movs	r2, #4
 8003010:	0018      	movs	r0, r3
 8003012:	f006 f82b 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 8003016:	1e03      	subs	r3, r0, #0
 8003018:	d001      	beq.n	800301e <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800301a:	f000 f99f 	bl	800335c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	2200      	movs	r2, #0
 8003028:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = DEAD_TIME;
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	2219      	movs	r2, #25
 8003034:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	0192      	lsls	r2, r2, #6
 8003042:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800304a:	1d3a      	adds	r2, r7, #4
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <MX_TIM1_Init+0x138>)
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f006 fc8b 	bl	800996c <HAL_TIMEx_ConfigBreakDeadTime>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800305a:	f000 f97f 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <MX_TIM1_Init+0x138>)
 8003060:	0018      	movs	r0, r3
 8003062:	f001 faf3 	bl	800464c <HAL_TIM_MspPostInit>

}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b012      	add	sp, #72	; 0x48
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	20000940 	.word	0x20000940
 8003074:	40012c00 	.word	0x40012c00
 8003078:	00005dc0 	.word	0x00005dc0

0800307c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003082:	2320      	movs	r3, #32
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	0018      	movs	r0, r3
 8003088:	2308      	movs	r3, #8
 800308a:	001a      	movs	r2, r3
 800308c:	2100      	movs	r1, #0
 800308e:	f007 f927 	bl	800a2e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	0018      	movs	r0, r3
 8003096:	231c      	movs	r3, #28
 8003098:	001a      	movs	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f007 f920 	bl	800a2e0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <MX_TIM2_Init+0xb8>)
 80030a2:	2280      	movs	r2, #128	; 0x80
 80030a4:	05d2      	lsls	r2, r2, #23
 80030a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <MX_TIM2_Init+0xb8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ae:	4b21      	ldr	r3, [pc, #132]	; (8003134 <MX_TIM2_Init+0xb8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = BUZZER_PERIOD;
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <MX_TIM2_Init+0xb8>)
 80030b6:	4a20      	ldr	r2, [pc, #128]	; (8003138 <MX_TIM2_Init+0xbc>)
 80030b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <MX_TIM2_Init+0xb8>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c0:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <MX_TIM2_Init+0xb8>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <MX_TIM2_Init+0xb8>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f005 fd35 	bl	8008b38 <HAL_TIM_PWM_Init>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80030d2:	f000 f943 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d6:	2120      	movs	r1, #32
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030e4:	187a      	adds	r2, r7, r1
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <MX_TIM2_Init+0xb8>)
 80030e8:	0011      	movs	r1, r2
 80030ea:	0018      	movs	r0, r3
 80030ec:	f006 fbe0 	bl	80098b0 <HAL_TIMEx_MasterConfigSynchronization>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80030f4:	f000 f932 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	2260      	movs	r2, #96	; 0x60
 80030fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = (BUZZER_PERIOD / 2);
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <MX_TIM2_Init+0xc0>)
 8003102:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003110:	1d39      	adds	r1, r7, #4
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <MX_TIM2_Init+0xb8>)
 8003114:	220c      	movs	r2, #12
 8003116:	0018      	movs	r0, r3
 8003118:	f005 ffa8 	bl	800906c <HAL_TIM_PWM_ConfigChannel>
 800311c:	1e03      	subs	r3, r0, #0
 800311e:	d001      	beq.n	8003124 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8003120:	f000 f91c 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <MX_TIM2_Init+0xb8>)
 8003126:	0018      	movs	r0, r3
 8003128:	f001 fa90 	bl	800464c <HAL_TIM_MspPostInit>

}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b00a      	add	sp, #40	; 0x28
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000988 	.word	0x20000988
 8003138:	00004e20 	.word	0x00004e20
 800313c:	00002710 	.word	0x00002710

08003140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <MX_USART2_UART_Init+0x58>)
 8003146:	4a15      	ldr	r2, [pc, #84]	; (800319c <MX_USART2_UART_Init+0x5c>)
 8003148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <MX_USART2_UART_Init+0x58>)
 800314c:	22e1      	movs	r2, #225	; 0xe1
 800314e:	0252      	lsls	r2, r2, #9
 8003150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <MX_USART2_UART_Init+0x58>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <MX_USART2_UART_Init+0x58>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <MX_USART2_UART_Init+0x58>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <MX_USART2_UART_Init+0x58>)
 8003166:	220c      	movs	r2, #12
 8003168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <MX_USART2_UART_Init+0x58>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <MX_USART2_UART_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <MX_USART2_UART_Init+0x58>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <MX_USART2_UART_Init+0x58>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <MX_USART2_UART_Init+0x58>)
 8003184:	0018      	movs	r0, r3
 8003186:	f006 fc83 	bl	8009a90 <HAL_UART_Init>
 800318a:	1e03      	subs	r3, r0, #0
 800318c:	d001      	beq.n	8003192 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800318e:	f000 f8e5 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	200009d0 	.word	0x200009d0
 800319c:	40004400 	.word	0x40004400

080031a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <MX_DMA_Init+0x48>)
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <MX_DMA_Init+0x48>)
 80031ac:	2101      	movs	r1, #1
 80031ae:	430a      	orrs	r2, r1
 80031b0:	615a      	str	r2, [r3, #20]
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <MX_DMA_Init+0x48>)
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4013      	ands	r3, r2
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	2009      	movs	r0, #9
 80031c4:	f002 fa68 	bl	8005698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031c8:	2009      	movs	r0, #9
 80031ca:	f002 fa7a 	bl	80056c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	200b      	movs	r0, #11
 80031d4:	f002 fa60 	bl	8005698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80031d8:	200b      	movs	r0, #11
 80031da:	f002 fa72 	bl	80056c2 <HAL_NVIC_EnableIRQ>

}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b002      	add	sp, #8
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	40021000 	.word	0x40021000

080031ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b08b      	sub	sp, #44	; 0x2c
 80031f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f2:	2414      	movs	r4, #20
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	0018      	movs	r0, r3
 80031f8:	2314      	movs	r3, #20
 80031fa:	001a      	movs	r2, r3
 80031fc:	2100      	movs	r1, #0
 80031fe:	f007 f86f 	bl	800a2e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <MX_GPIO_Init+0x15c>)
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	4b50      	ldr	r3, [pc, #320]	; (8003348 <MX_GPIO_Init+0x15c>)
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	0309      	lsls	r1, r1, #12
 800320c:	430a      	orrs	r2, r1
 800320e:	615a      	str	r2, [r3, #20]
 8003210:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <MX_GPIO_Init+0x15c>)
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	031b      	lsls	r3, r3, #12
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800321e:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <MX_GPIO_Init+0x15c>)
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	4b49      	ldr	r3, [pc, #292]	; (8003348 <MX_GPIO_Init+0x15c>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	03c9      	lsls	r1, r1, #15
 8003228:	430a      	orrs	r2, r1
 800322a:	615a      	str	r2, [r3, #20]
 800322c:	4b46      	ldr	r3, [pc, #280]	; (8003348 <MX_GPIO_Init+0x15c>)
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	03db      	lsls	r3, r3, #15
 8003234:	4013      	ands	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <MX_GPIO_Init+0x15c>)
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	4b42      	ldr	r3, [pc, #264]	; (8003348 <MX_GPIO_Init+0x15c>)
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	0289      	lsls	r1, r1, #10
 8003244:	430a      	orrs	r2, r1
 8003246:	615a      	str	r2, [r3, #20]
 8003248:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <MX_GPIO_Init+0x15c>)
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	029b      	lsls	r3, r3, #10
 8003250:	4013      	ands	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003256:	4b3c      	ldr	r3, [pc, #240]	; (8003348 <MX_GPIO_Init+0x15c>)
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <MX_GPIO_Init+0x15c>)
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	02c9      	lsls	r1, r1, #11
 8003260:	430a      	orrs	r2, r1
 8003262:	615a      	str	r2, [r3, #20]
 8003264:	4b38      	ldr	r3, [pc, #224]	; (8003348 <MX_GPIO_Init+0x15c>)
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	02db      	lsls	r3, r3, #11
 800326c:	4013      	ands	r3, r2
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCREEN_DC_Pin|SCREEN_RESET_Pin|SCREEN_CS_Pin|BLUE_LED_PIN_Pin
 8003272:	4936      	ldr	r1, [pc, #216]	; (800334c <MX_GPIO_Init+0x160>)
 8003274:	2390      	movs	r3, #144	; 0x90
 8003276:	05db      	lsls	r3, r3, #23
 8003278:	2200      	movs	r2, #0
 800327a:	0018      	movs	r0, r3
 800327c:	f002 fdb5 	bl	8005dea <HAL_GPIO_WritePin>
                          |TOP_PLATTER_HEAT_Pin|BOTTOM_PLATTER_HEAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WHITE_LED_PIN_Pin|CS_THERMOCOUPLE_BOTTOM2_Pin|CS_THERMOCOUPLE_BOTTOM1_Pin|CS_THERMOCOUPLE_TOP2_Pin
 8003280:	23f1      	movs	r3, #241	; 0xf1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4832      	ldr	r0, [pc, #200]	; (8003350 <MX_GPIO_Init+0x164>)
 8003286:	2200      	movs	r2, #0
 8003288:	0019      	movs	r1, r3
 800328a:	f002 fdae 	bl	8005dea <HAL_GPIO_WritePin>
                          |CS_THERMOCOUPLE_TOP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DOWN_BUTTON_Pin ENTER_BUTTON_Pin UP_BUTTON_Pin */
  GPIO_InitStruct.Pin = DOWN_BUTTON_Pin|ENTER_BUTTON_Pin|UP_BUTTON_Pin;
 800328e:	193b      	adds	r3, r7, r4
 8003290:	22e0      	movs	r2, #224	; 0xe0
 8003292:	0212      	lsls	r2, r2, #8
 8003294:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003296:	193b      	adds	r3, r7, r4
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	193b      	adds	r3, r7, r4
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a2:	193b      	adds	r3, r7, r4
 80032a4:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <MX_GPIO_Init+0x168>)
 80032a6:	0019      	movs	r1, r3
 80032a8:	0010      	movs	r0, r2
 80032aa:	f002 fc11 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_DC_Pin SCREEN_RESET_Pin SCREEN_CS_Pin BLUE_LED_PIN_Pin
                           TOP_PLATTER_HEAT_Pin BOTTOM_PLATTER_HEAT_Pin */
  GPIO_InitStruct.Pin = SCREEN_DC_Pin|SCREEN_RESET_Pin|SCREEN_CS_Pin|BLUE_LED_PIN_Pin
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <MX_GPIO_Init+0x160>)
 80032b2:	601a      	str	r2, [r3, #0]
                          |TOP_PLATTER_HEAT_Pin|BOTTOM_PLATTER_HEAT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	2201      	movs	r2, #1
 80032b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	193a      	adds	r2, r7, r4
 80032c8:	2390      	movs	r3, #144	; 0x90
 80032ca:	05db      	lsls	r3, r3, #23
 80032cc:	0011      	movs	r1, r2
 80032ce:	0018      	movs	r0, r3
 80032d0:	f002 fbfe 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ACTIVATE_BUTTON_Pin LEFT_ACTIVATE_BUTTON_Pin TOP_TRAVEL_SWITCH_Pin BOTTOM_TRAVEL_SWITCH_Pin */
  GPIO_InitStruct.Pin = RIGHT_ACTIVATE_BUTTON_Pin|LEFT_ACTIVATE_BUTTON_Pin|TOP_TRAVEL_SWITCH_Pin|BOTTOM_TRAVEL_SWITCH_Pin;
 80032d4:	193b      	adds	r3, r7, r4
 80032d6:	4a20      	ldr	r2, [pc, #128]	; (8003358 <MX_GPIO_Init+0x16c>)
 80032d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	2200      	movs	r2, #0
 80032de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	193b      	adds	r3, r7, r4
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <MX_GPIO_Init+0x164>)
 80032ea:	0019      	movs	r1, r3
 80032ec:	0010      	movs	r0, r2
 80032ee:	f002 fbef 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WHITE_LED_PIN_Pin CS_THERMOCOUPLE_BOTTOM2_Pin CS_THERMOCOUPLE_BOTTOM1_Pin CS_THERMOCOUPLE_TOP2_Pin
                           CS_THERMOCOUPLE_TOP1_Pin */
  GPIO_InitStruct.Pin = WHITE_LED_PIN_Pin|CS_THERMOCOUPLE_BOTTOM2_Pin|CS_THERMOCOUPLE_BOTTOM1_Pin|CS_THERMOCOUPLE_TOP2_Pin
 80032f2:	0021      	movs	r1, r4
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	22f1      	movs	r2, #241	; 0xf1
 80032f8:	0092      	lsls	r2, r2, #2
 80032fa:	601a      	str	r2, [r3, #0]
                          |CS_THERMOCOUPLE_TOP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fc:	000c      	movs	r4, r1
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2201      	movs	r2, #1
 8003302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	193b      	adds	r3, r7, r4
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003310:	193b      	adds	r3, r7, r4
 8003312:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <MX_GPIO_Init+0x164>)
 8003314:	0019      	movs	r1, r3
 8003316:	0010      	movs	r0, r2
 8003318:	f002 fbda 	bl	8005ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PLATTER_SWITCH_Pin */
  GPIO_InitStruct.Pin = PLATTER_SWITCH_Pin;
 800331c:	0021      	movs	r1, r4
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	00d2      	lsls	r2, r2, #3
 8003324:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003326:	187b      	adds	r3, r7, r1
 8003328:	2200      	movs	r2, #0
 800332a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	187b      	adds	r3, r7, r1
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PLATTER_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003332:	187a      	adds	r2, r7, r1
 8003334:	2390      	movs	r3, #144	; 0x90
 8003336:	05db      	lsls	r3, r3, #23
 8003338:	0011      	movs	r1, r2
 800333a:	0018      	movs	r0, r3
 800333c:	f002 fbc8 	bl	8005ad0 <HAL_GPIO_Init>

}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b00b      	add	sp, #44	; 0x2c
 8003346:	bd90      	pop	{r4, r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	00001871 	.word	0x00001871
 8003350:	48000400 	.word	0x48000400
 8003354:	48000800 	.word	0x48000800
 8003358:	0000c402 	.word	0x0000c402

0800335c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
}
 8003362:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003364:	e7fe      	b.n	8003364 <Error_Handler+0x8>
	...

08003368 <init_menus>:

uint8_t display_row = 0;
char screen_buf[256];
uint8_t screen_fonts[8];

void init_menus(void) {
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	link_menus(&status_menu, &main_menu);
 800336c:	4a28      	ldr	r2, [pc, #160]	; (8003410 <init_menus+0xa8>)
 800336e:	4b29      	ldr	r3, [pc, #164]	; (8003414 <init_menus+0xac>)
 8003370:	0011      	movs	r1, r2
 8003372:	0018      	movs	r0, r3
 8003374:	f000 f868 	bl	8003448 <link_menus>

	link_menus(&main_menu, &top_temp_menu);
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <init_menus+0xb0>)
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <init_menus+0xa8>)
 800337c:	0011      	movs	r1, r2
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f862 	bl	8003448 <link_menus>
	link_menus(&main_menu, &bottom_temp_menu);
 8003384:	4a25      	ldr	r2, [pc, #148]	; (800341c <init_menus+0xb4>)
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <init_menus+0xa8>)
 8003388:	0011      	movs	r1, r2
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f85c 	bl	8003448 <link_menus>
	link_menus(&main_menu, &mode_menu);
 8003390:	4a23      	ldr	r2, [pc, #140]	; (8003420 <init_menus+0xb8>)
 8003392:	4b1f      	ldr	r3, [pc, #124]	; (8003410 <init_menus+0xa8>)
 8003394:	0011      	movs	r1, r2
 8003396:	0018      	movs	r0, r3
 8003398:	f000 f856 	bl	8003448 <link_menus>
	link_menus(&main_menu, &press_time_menu);
 800339c:	4a21      	ldr	r2, [pc, #132]	; (8003424 <init_menus+0xbc>)
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <init_menus+0xa8>)
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 f850 	bl	8003448 <link_menus>
	link_menus(&main_menu, &burps_menu);
 80033a8:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <init_menus+0xc0>)
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <init_menus+0xa8>)
 80033ac:	0011      	movs	r1, r2
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f84a 	bl	8003448 <link_menus>
	link_menus(&main_menu, &eco_mode_menu);
 80033b4:	4a1d      	ldr	r2, [pc, #116]	; (800342c <init_menus+0xc4>)
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <init_menus+0xa8>)
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f844 	bl	8003448 <link_menus>
	link_menus(&main_menu, &buzzer_menu);
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <init_menus+0xc8>)
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <init_menus+0xa8>)
 80033c4:	0011      	movs	r1, r2
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f83e 	bl	8003448 <link_menus>
	link_menus(&main_menu, &service_menu);
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <init_menus+0xcc>)
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <init_menus+0xa8>)
 80033d0:	0011      	movs	r1, r2
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 f838 	bl	8003448 <link_menus>

	link_menus(&service_menu, &jog_menu);
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <init_menus+0xd0>)
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <init_menus+0xcc>)
 80033dc:	0011      	movs	r1, r2
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 f832 	bl	8003448 <link_menus>
	link_menus(&service_menu, &units_menu);
 80033e4:	4a15      	ldr	r2, [pc, #84]	; (800343c <init_menus+0xd4>)
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <init_menus+0xcc>)
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 f82c 	bl	8003448 <link_menus>
	link_menus(&service_menu, &debug_menu);
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <init_menus+0xd8>)
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <init_menus+0xcc>)
 80033f4:	0011      	movs	r1, r2
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 f826 	bl	8003448 <link_menus>
	link_menus(&service_menu, &reset_menu);
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <init_menus+0xdc>)
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <init_menus+0xcc>)
 8003400:	0011      	movs	r1, r2
 8003402:	0018      	movs	r0, r3
 8003404:	f000 f820 	bl	8003448 <link_menus>
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	200000cc 	.word	0x200000cc
 8003414:	20000064 	.word	0x20000064
 8003418:	20000134 	.word	0x20000134
 800341c:	2000019c 	.word	0x2000019c
 8003420:	20000204 	.word	0x20000204
 8003424:	2000026c 	.word	0x2000026c
 8003428:	200002d4 	.word	0x200002d4
 800342c:	2000033c 	.word	0x2000033c
 8003430:	200003a4 	.word	0x200003a4
 8003434:	2000040c 	.word	0x2000040c
 8003438:	20000544 	.word	0x20000544
 800343c:	200004dc 	.word	0x200004dc
 8003440:	200005ac 	.word	0x200005ac
 8003444:	20000474 	.word	0x20000474

08003448 <link_menus>:

void link_menus(MenuItem* parent, MenuItem* child) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	if (parent->length < 16) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	885b      	ldrh	r3, [r3, #2]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	d80f      	bhi.n	800347a <link_menus+0x32>
		parent->items[(parent->length)++] = child;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	885b      	ldrh	r3, [r3, #2]
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	b291      	uxth	r1, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	8051      	strh	r1, [r2, #2]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	3308      	adds	r3, #8
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	18d3      	adds	r3, r2, r3
 800346e:	3304      	adds	r3, #4
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	601a      	str	r2, [r3, #0]
		child->parent = parent;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]
	}
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b002      	add	sp, #8
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <menu_up>:

MenuItem* menu_up(MenuItem* item) {
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	switch(item->type) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d85e      	bhi.n	8003552 <menu_up+0xce>
 8003494:	009a      	lsls	r2, r3, #2
 8003496:	4b34      	ldr	r3, [pc, #208]	; (8003568 <menu_up+0xe4>)
 8003498:	18d3      	adds	r3, r2, r3
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	469f      	mov	pc, r3
	case MENU_JOG:
		press.press_state.mode = PRESS_JOG;
 800349e:	4b33      	ldr	r3, [pc, #204]	; (800356c <menu_up+0xe8>)
 80034a0:	2206      	movs	r2, #6
 80034a2:	721a      	strb	r2, [r3, #8]
		break;
 80034a4:	e056      	b.n	8003554 <menu_up+0xd0>
	case MENU_STATUS:
		item = item->items[0];
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	607b      	str	r3, [r7, #4]
		break;
 80034ac:	e052      	b.n	8003554 <menu_up+0xd0>
	case MENU_DEBUG:
		item = item->parent;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	607b      	str	r3, [r7, #4]
		break;
 80034b4:	e04e      	b.n	8003554 <menu_up+0xd0>
	case MENU: // item is another menu
		item->index = max(item->index - 1, 0);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	889b      	ldrh	r3, [r3, #4]
 80034ba:	1c1a      	adds	r2, r3, #0
 80034bc:	b293      	uxth	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <menu_up+0x42>
 80034c2:	2301      	movs	r3, #1
 80034c4:	1c1a      	adds	r2, r3, #0
 80034c6:	b293      	uxth	r3, r2
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	809a      	strh	r2, [r3, #4]
		break;
 80034d0:	e040      	b.n	8003554 <menu_up+0xd0>
	case MENU_TEMP:
		if (press.config.flags & CONFIG_UNITS_FLAG) {
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <menu_up+0xe8>)
 80034d4:	2250      	movs	r2, #80	; 0x50
 80034d6:	5a9b      	ldrh	r3, [r3, r2]
 80034d8:	001a      	movs	r2, r3
 80034da:	2304      	movs	r3, #4
 80034dc:	4013      	ands	r3, r2
 80034de:	d006      	beq.n	80034ee <menu_up+0x6a>
			item->upper = TEMP_UPPER_LIM_C;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2282      	movs	r2, #130	; 0x82
 80034e4:	805a      	strh	r2, [r3, #2]
			item->lower = TEMP_LOWER_LIM_C;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2232      	movs	r2, #50	; 0x32
 80034ea:	809a      	strh	r2, [r3, #4]
 80034ec:	e006      	b.n	80034fc <menu_up+0x78>
		} else {
			item->upper = TEMP_UPPER_LIM_F;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2287      	movs	r2, #135	; 0x87
 80034f2:	0052      	lsls	r2, r2, #1
 80034f4:	805a      	strh	r2, [r3, #2]
			item->lower = TEMP_LOWER_LIM_F;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2278      	movs	r2, #120	; 0x78
 80034fa:	809a      	strh	r2, [r3, #4]
		}
	case MENU_NUM: // numerical entry
		item->value = clip(item->value + item->step, item->upper, item->lower);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2204      	movs	r2, #4
 8003500:	5e9b      	ldrsh	r3, [r3, r2]
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	5e9b      	ldrsh	r3, [r3, r2]
 800350a:	0018      	movs	r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2208      	movs	r2, #8
 8003510:	5e9b      	ldrsh	r3, [r3, r2]
 8003512:	001a      	movs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2406      	movs	r4, #6
 8003518:	5f1b      	ldrsh	r3, [r3, r4]
 800351a:	18d2      	adds	r2, r2, r3
 800351c:	0003      	movs	r3, r0
 800351e:	4293      	cmp	r3, r2
 8003520:	dd00      	ble.n	8003524 <menu_up+0xa0>
 8003522:	0013      	movs	r3, r2
 8003524:	000a      	movs	r2, r1
 8003526:	429a      	cmp	r2, r3
 8003528:	da00      	bge.n	800352c <menu_up+0xa8>
 800352a:	001a      	movs	r2, r3
 800352c:	b212      	sxth	r2, r2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	811a      	strh	r2, [r3, #8]
		break;
 8003532:	e00f      	b.n	8003554 <menu_up+0xd0>
	case MENU_TEMP_UNITS:
	case MENU_FLAG: // yes/no
		item->value |= (item->flag);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2208      	movs	r2, #8
 8003538:	5e9a      	ldrsh	r2, [r3, r2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2106      	movs	r1, #6
 800353e:	5e5b      	ldrsh	r3, [r3, r1]
 8003540:	4313      	orrs	r3, r2
 8003542:	b21a      	sxth	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	811a      	strh	r2, [r3, #8]
		break;
 8003548:	e004      	b.n	8003554 <menu_up+0xd0>
	case MENU_RESET:
		item->value = 1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	811a      	strh	r2, [r3, #8]
		break;
 8003550:	e000      	b.n	8003554 <menu_up+0xd0>
	case MENU_OTHER:
	default:
		break;
 8003552:	46c0      	nop			; (mov r8, r8)
	}
	item->display(item);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	0010      	movs	r0, r2
 800355c:	4798      	blx	r3
	return item;
 800355e:	687b      	ldr	r3, [r7, #4]

}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b003      	add	sp, #12
 8003566:	bd90      	pop	{r4, r7, pc}
 8003568:	0800ba80 	.word	0x0800ba80
 800356c:	20000000 	.word	0x20000000

08003570 <menu_down>:

MenuItem* menu_down(MenuItem* item) {
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	switch(item->type) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d900      	bls.n	8003582 <menu_down+0x12>
 8003580:	e093      	b.n	80036aa <menu_down+0x13a>
 8003582:	009a      	lsls	r2, r3, #2
 8003584:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <menu_down+0x154>)
 8003586:	18d3      	adds	r3, r2, r3
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	469f      	mov	pc, r3
	case MENU_JOG:
		press.press_state.mode = PRESS_JOG;
 800358c:	4b4e      	ldr	r3, [pc, #312]	; (80036c8 <menu_down+0x158>)
 800358e:	2206      	movs	r2, #6
 8003590:	721a      	strb	r2, [r3, #8]
		break;
 8003592:	e08d      	b.n	80036b0 <menu_down+0x140>
	case MENU_STATUS:
		item = item->items[0];
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	607b      	str	r3, [r7, #4]
		break;
 800359a:	e089      	b.n	80036b0 <menu_down+0x140>
	case MENU_DEBUG:
		item = item->parent;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	607b      	str	r3, [r7, #4]
		break;
 80035a2:	e085      	b.n	80036b0 <menu_down+0x140>
	case MENU: // item is another menu
		item->index = min(item->index + 1, item->length);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	885b      	ldrh	r3, [r3, #2]
 80035a8:	001a      	movs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	889b      	ldrh	r3, [r3, #4]
 80035ae:	3301      	adds	r3, #1
 80035b0:	429a      	cmp	r2, r3
 80035b2:	dd00      	ble.n	80035b6 <menu_down+0x46>
 80035b4:	001a      	movs	r2, r3
 80035b6:	b292      	uxth	r2, r2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	809a      	strh	r2, [r3, #4]
		break;
 80035bc:	e078      	b.n	80036b0 <menu_down+0x140>
	case MENU_TEMP:
		if (press.config.flags & CONFIG_UNITS_FLAG) {
 80035be:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <menu_down+0x158>)
 80035c0:	2250      	movs	r2, #80	; 0x50
 80035c2:	5a9b      	ldrh	r3, [r3, r2]
 80035c4:	001a      	movs	r2, r3
 80035c6:	2304      	movs	r3, #4
 80035c8:	4013      	ands	r3, r2
 80035ca:	d006      	beq.n	80035da <menu_down+0x6a>
			item->upper = TEMP_UPPER_LIM_C;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2282      	movs	r2, #130	; 0x82
 80035d0:	805a      	strh	r2, [r3, #2]
			item->lower = TEMP_LOWER_LIM_C;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2232      	movs	r2, #50	; 0x32
 80035d6:	809a      	strh	r2, [r3, #4]
 80035d8:	e006      	b.n	80035e8 <menu_down+0x78>
		} else {
			item->upper = TEMP_UPPER_LIM_F;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2287      	movs	r2, #135	; 0x87
 80035de:	0052      	lsls	r2, r2, #1
 80035e0:	805a      	strh	r2, [r3, #2]
			item->lower = TEMP_LOWER_LIM_F;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2278      	movs	r2, #120	; 0x78
 80035e6:	809a      	strh	r2, [r3, #4]
		}
		item->value = clip(item->value, item->upper, item->lower);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2104      	movs	r1, #4
 80035ec:	5e59      	ldrsh	r1, [r3, r1]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	5e9a      	ldrsh	r2, [r3, r2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2008      	movs	r0, #8
 80035f8:	5e1b      	ldrsh	r3, [r3, r0]
 80035fa:	1c1c      	adds	r4, r3, #0
 80035fc:	1c10      	adds	r0, r2, #0
 80035fe:	b202      	sxth	r2, r0
 8003600:	b223      	sxth	r3, r4
 8003602:	429a      	cmp	r2, r3
 8003604:	dd00      	ble.n	8003608 <menu_down+0x98>
 8003606:	1c20      	adds	r0, r4, #0
 8003608:	b203      	sxth	r3, r0
 800360a:	1c18      	adds	r0, r3, #0
 800360c:	b20a      	sxth	r2, r1
 800360e:	b203      	sxth	r3, r0
 8003610:	429a      	cmp	r2, r3
 8003612:	da00      	bge.n	8003616 <menu_down+0xa6>
 8003614:	1c01      	adds	r1, r0, #0
 8003616:	b20a      	sxth	r2, r1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	811a      	strh	r2, [r3, #8]
		item->value -= item->step;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2208      	movs	r2, #8
 8003620:	5e9b      	ldrsh	r3, [r3, r2]
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2106      	movs	r1, #6
 8003628:	5e5b      	ldrsh	r3, [r3, r1]
 800362a:	b29b      	uxth	r3, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	b29b      	uxth	r3, r3
 8003630:	b21a      	sxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	811a      	strh	r2, [r3, #8]
		if (item->value < item->lower) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2208      	movs	r2, #8
 800363a:	5e9a      	ldrsh	r2, [r3, r2]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2104      	movs	r1, #4
 8003640:	5e5b      	ldrsh	r3, [r3, r1]
 8003642:	429a      	cmp	r2, r3
 8003644:	da33      	bge.n	80036ae <menu_down+0x13e>
			item->value = -40; // lol same in C and F
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2228      	movs	r2, #40	; 0x28
 800364a:	4252      	negs	r2, r2
 800364c:	811a      	strh	r2, [r3, #8]
		}
		break;
 800364e:	e02e      	b.n	80036ae <menu_down+0x13e>
	case MENU_NUM: // numerical entry
		item->value = clip(item->value - item->step, item->upper, item->lower);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2204      	movs	r2, #4
 8003654:	5e9b      	ldrsh	r3, [r3, r2]
 8003656:	0019      	movs	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	5e9b      	ldrsh	r3, [r3, r2]
 800365e:	0018      	movs	r0, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2208      	movs	r2, #8
 8003664:	5e9b      	ldrsh	r3, [r3, r2]
 8003666:	001a      	movs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2406      	movs	r4, #6
 800366c:	5f1b      	ldrsh	r3, [r3, r4]
 800366e:	1ad2      	subs	r2, r2, r3
 8003670:	0003      	movs	r3, r0
 8003672:	4293      	cmp	r3, r2
 8003674:	dd00      	ble.n	8003678 <menu_down+0x108>
 8003676:	0013      	movs	r3, r2
 8003678:	000a      	movs	r2, r1
 800367a:	429a      	cmp	r2, r3
 800367c:	da00      	bge.n	8003680 <menu_down+0x110>
 800367e:	001a      	movs	r2, r3
 8003680:	b212      	sxth	r2, r2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	811a      	strh	r2, [r3, #8]
		break;
 8003686:	e013      	b.n	80036b0 <menu_down+0x140>
	case MENU_TEMP_UNITS:
	case MENU_FLAG: // yes/no
		item->value &= ~(item->flag);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2208      	movs	r2, #8
 800368c:	5e9b      	ldrsh	r3, [r3, r2]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	2106      	movs	r1, #6
 8003692:	5e52      	ldrsh	r2, [r2, r1]
 8003694:	43d2      	mvns	r2, r2
 8003696:	b212      	sxth	r2, r2
 8003698:	4013      	ands	r3, r2
 800369a:	b21a      	sxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	811a      	strh	r2, [r3, #8]
		break;
 80036a0:	e006      	b.n	80036b0 <menu_down+0x140>
	case MENU_RESET:
		item->value = 0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	811a      	strh	r2, [r3, #8]
		break;
 80036a8:	e002      	b.n	80036b0 <menu_down+0x140>
	case MENU_OTHER:
	default:
		break;
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	e000      	b.n	80036b0 <menu_down+0x140>
		break;
 80036ae:	46c0      	nop			; (mov r8, r8)
	}
	item->display(item);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	0010      	movs	r0, r2
 80036b8:	4798      	blx	r3
	return item;
 80036ba:	687b      	ldr	r3, [r7, #4]
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b003      	add	sp, #12
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	0800baa4 	.word	0x0800baa4
 80036c8:	20000000 	.word	0x20000000

080036cc <menu_enter>:

MenuItem* menu_enter(MenuItem* item) {
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	switch(item->type) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d900      	bls.n	80036de <menu_enter+0x12>
 80036dc:	e0f3      	b.n	80038c6 <menu_enter+0x1fa>
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	4b84      	ldr	r3, [pc, #528]	; (80038f4 <menu_enter+0x228>)
 80036e2:	18d3      	adds	r3, r2, r3
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	469f      	mov	pc, r3
	case MENU_STATUS:
		item = item->items[0];
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	607b      	str	r3, [r7, #4]
		break;
 80036ee:	e0f7      	b.n	80038e0 <menu_enter+0x214>
	case MENU_DEBUG:
		item = item->parent;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	607b      	str	r3, [r7, #4]
		break;
 80036f6:	e0f3      	b.n	80038e0 <menu_enter+0x214>
	case MENU: // item is another menu
		if (item->index > 0) {
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	889b      	ldrh	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d018      	beq.n	8003732 <menu_enter+0x66>
			item = item->items[item->index - 1]; // enter child menu if possible
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	889b      	ldrh	r3, [r3, #4]
 8003704:	3b01      	subs	r3, #1
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	3308      	adds	r3, #8
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	18d3      	adds	r3, r2, r3
 800370e:	3304      	adds	r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	607b      	str	r3, [r7, #4]
			item->index = 0;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	809a      	strh	r2, [r3, #4]
			if (item->target != NULL) {
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d100      	bne.n	8003724 <menu_enter+0x58>
 8003722:	e0dc      	b.n	80038de <menu_enter+0x212>
				item->value = *(item->target);   // copy current target into value
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	5e9a      	ldrsh	r2, [r3, r2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	811a      	strh	r2, [r3, #8]
				item = item->parent; // return to parent if not top level
			} else {
				item->index = 0; // return to top of menu otherwise
			}
		}
		break;
 8003730:	e0d5      	b.n	80038de <menu_enter+0x212>
			if (item->parent != NULL) {
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <menu_enter+0x76>
				item = item->parent; // return to parent if not top level
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	607b      	str	r3, [r7, #4]
		break;
 8003740:	e0cd      	b.n	80038de <menu_enter+0x212>
				item->index = 0; // return to top of menu otherwise
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	809a      	strh	r2, [r3, #4]
		break;
 8003748:	e0c9      	b.n	80038de <menu_enter+0x212>
	case MENU_RESET:
		if (item->value) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2208      	movs	r2, #8
 800374e:	5e9b      	ldrsh	r3, [r3, r2]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d100      	bne.n	8003756 <menu_enter+0x8a>
 8003754:	e0b4      	b.n	80038c0 <menu_enter+0x1f4>
			item->value = 0;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	811a      	strh	r2, [r3, #8]
			reset_defaults(&(press.config));
 800375c:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <menu_enter+0x22c>)
 800375e:	0018      	movs	r0, r3
 8003760:	f7fd ffc6 	bl	80016f0 <reset_defaults>
		}
		goto menu_enter_default;
 8003764:	e0ac      	b.n	80038c0 <menu_enter+0x1f4>
	case MENU_JOG:
		press.press_state.mode = PRESS_DONE;
 8003766:	4b65      	ldr	r3, [pc, #404]	; (80038fc <menu_enter+0x230>)
 8003768:	2205      	movs	r2, #5
 800376a:	721a      	strb	r2, [r3, #8]
		goto menu_enter_default;
 800376c:	e0ab      	b.n	80038c6 <menu_enter+0x1fa>
	case MENU_TEMP_UNITS:
	{
		bool current_temp_units = press.config.flags & CONFIG_UNITS_FLAG;
 800376e:	4b63      	ldr	r3, [pc, #396]	; (80038fc <menu_enter+0x230>)
 8003770:	2250      	movs	r2, #80	; 0x50
 8003772:	5a9b      	ldrh	r3, [r3, r2]
 8003774:	001a      	movs	r2, r3
 8003776:	2304      	movs	r3, #4
 8003778:	401a      	ands	r2, r3
 800377a:	200f      	movs	r0, #15
 800377c:	183b      	adds	r3, r7, r0
 800377e:	1e51      	subs	r1, r2, #1
 8003780:	418a      	sbcs	r2, r1
 8003782:	701a      	strb	r2, [r3, #0]
		bool new_temp_units = item->value & item->flag;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2208      	movs	r2, #8
 8003788:	5e9b      	ldrsh	r3, [r3, r2]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	2106      	movs	r1, #6
 800378e:	5e52      	ldrsh	r2, [r2, r1]
 8003790:	4013      	ands	r3, r2
 8003792:	b21a      	sxth	r2, r3
 8003794:	240e      	movs	r4, #14
 8003796:	193b      	adds	r3, r7, r4
 8003798:	1e51      	subs	r1, r2, #1
 800379a:	418a      	sbcs	r2, r1
 800379c:	701a      	strb	r2, [r3, #0]
		if (current_temp_units && !new_temp_units) { // convert from C to F
 800379e:	183b      	adds	r3, r7, r0
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d03c      	beq.n	8003820 <menu_enter+0x154>
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4053      	eors	r3, r2
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d035      	beq.n	8003820 <menu_enter+0x154>
			press.config.top_temp = __ROUND5(__C_TO_F(press.config.top_temp)); // round to the nearest 5
 80037b4:	4b51      	ldr	r3, [pc, #324]	; (80038fc <menu_enter+0x230>)
 80037b6:	2252      	movs	r2, #82	; 0x52
 80037b8:	5e9b      	ldrsh	r3, [r3, r2]
 80037ba:	001a      	movs	r2, r3
 80037bc:	0013      	movs	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	189b      	adds	r3, r3, r2
 80037c2:	2105      	movs	r1, #5
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7fc fd3b 	bl	8000240 <__divsi3>
 80037ca:	0003      	movs	r3, r0
 80037cc:	3322      	adds	r3, #34	; 0x22
 80037ce:	2105      	movs	r1, #5
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7fc fd35 	bl	8000240 <__divsi3>
 80037d6:	0003      	movs	r3, r0
 80037d8:	b29b      	uxth	r3, r3
 80037da:	1c1a      	adds	r2, r3, #0
 80037dc:	0092      	lsls	r2, r2, #2
 80037de:	18d3      	adds	r3, r2, r3
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	b219      	sxth	r1, r3
 80037e4:	4b45      	ldr	r3, [pc, #276]	; (80038fc <menu_enter+0x230>)
 80037e6:	2252      	movs	r2, #82	; 0x52
 80037e8:	5299      	strh	r1, [r3, r2]
			press.config.bottom_temp = __ROUND5(__C_TO_F(press.config.bottom_temp));
 80037ea:	4b44      	ldr	r3, [pc, #272]	; (80038fc <menu_enter+0x230>)
 80037ec:	2254      	movs	r2, #84	; 0x54
 80037ee:	5e9b      	ldrsh	r3, [r3, r2]
 80037f0:	001a      	movs	r2, r3
 80037f2:	0013      	movs	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	2105      	movs	r1, #5
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fc fd20 	bl	8000240 <__divsi3>
 8003800:	0003      	movs	r3, r0
 8003802:	3322      	adds	r3, #34	; 0x22
 8003804:	2105      	movs	r1, #5
 8003806:	0018      	movs	r0, r3
 8003808:	f7fc fd1a 	bl	8000240 <__divsi3>
 800380c:	0003      	movs	r3, r0
 800380e:	b29b      	uxth	r3, r3
 8003810:	1c1a      	adds	r2, r3, #0
 8003812:	0092      	lsls	r2, r2, #2
 8003814:	18d3      	adds	r3, r2, r3
 8003816:	b29b      	uxth	r3, r3
 8003818:	b219      	sxth	r1, r3
 800381a:	4b38      	ldr	r3, [pc, #224]	; (80038fc <menu_enter+0x230>)
 800381c:	2254      	movs	r2, #84	; 0x54
 800381e:	5299      	strh	r1, [r3, r2]
		}

		if (!current_temp_units && new_temp_units) { // convert from F to C
 8003820:	230f      	movs	r3, #15
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	4053      	eors	r3, r2
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d03c      	beq.n	80038aa <menu_enter+0x1de>
 8003830:	230e      	movs	r3, #14
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d037      	beq.n	80038aa <menu_enter+0x1de>
			press.config.top_temp = __ROUND5(__F_TO_C(press.config.top_temp)); // round to the nearest 5
 800383a:	4b30      	ldr	r3, [pc, #192]	; (80038fc <menu_enter+0x230>)
 800383c:	2252      	movs	r2, #82	; 0x52
 800383e:	5e9b      	ldrsh	r3, [r3, r2]
 8003840:	3b20      	subs	r3, #32
 8003842:	001a      	movs	r2, r3
 8003844:	0013      	movs	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	189b      	adds	r3, r3, r2
 800384a:	2109      	movs	r1, #9
 800384c:	0018      	movs	r0, r3
 800384e:	f7fc fcf7 	bl	8000240 <__divsi3>
 8003852:	0003      	movs	r3, r0
 8003854:	3302      	adds	r3, #2
 8003856:	2105      	movs	r1, #5
 8003858:	0018      	movs	r0, r3
 800385a:	f7fc fcf1 	bl	8000240 <__divsi3>
 800385e:	0003      	movs	r3, r0
 8003860:	b29b      	uxth	r3, r3
 8003862:	1c1a      	adds	r2, r3, #0
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	18d3      	adds	r3, r2, r3
 8003868:	b29b      	uxth	r3, r3
 800386a:	b219      	sxth	r1, r3
 800386c:	4b23      	ldr	r3, [pc, #140]	; (80038fc <menu_enter+0x230>)
 800386e:	2252      	movs	r2, #82	; 0x52
 8003870:	5299      	strh	r1, [r3, r2]
			press.config.bottom_temp = __ROUND5(__F_TO_C(press.config.bottom_temp));
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <menu_enter+0x230>)
 8003874:	2254      	movs	r2, #84	; 0x54
 8003876:	5e9b      	ldrsh	r3, [r3, r2]
 8003878:	3b20      	subs	r3, #32
 800387a:	001a      	movs	r2, r3
 800387c:	0013      	movs	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	189b      	adds	r3, r3, r2
 8003882:	2109      	movs	r1, #9
 8003884:	0018      	movs	r0, r3
 8003886:	f7fc fcdb 	bl	8000240 <__divsi3>
 800388a:	0003      	movs	r3, r0
 800388c:	3302      	adds	r3, #2
 800388e:	2105      	movs	r1, #5
 8003890:	0018      	movs	r0, r3
 8003892:	f7fc fcd5 	bl	8000240 <__divsi3>
 8003896:	0003      	movs	r3, r0
 8003898:	b29b      	uxth	r3, r3
 800389a:	1c1a      	adds	r2, r3, #0
 800389c:	0092      	lsls	r2, r2, #2
 800389e:	18d3      	adds	r3, r2, r3
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	b219      	sxth	r1, r3
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <menu_enter+0x230>)
 80038a6:	2254      	movs	r2, #84	; 0x54
 80038a8:	5299      	strh	r1, [r3, r2]

	}
	case MENU_TEMP:
	case MENU_NUM: // numerical and yes/no do the same thing here
	case MENU_FLAG:
		if (item->target != NULL) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <menu_enter+0x1f8>
			*(item->target) = item->value; // enter target
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	2108      	movs	r1, #8
 80038ba:	5e52      	ldrsh	r2, [r2, r1]
 80038bc:	801a      	strh	r2, [r3, #0]
 80038be:	e002      	b.n	80038c6 <menu_enter+0x1fa>
		goto menu_enter_default;
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	e000      	b.n	80038c6 <menu_enter+0x1fa>
		}
menu_enter_default:
 80038c4:	46c0      	nop			; (mov r8, r8)
	default:
		if (item->parent != NULL) {
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <menu_enter+0x208>
			item = item->parent; // return to parent menu
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	607b      	str	r3, [r7, #4]
		}
		backup_settings(&(press.config));
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <menu_enter+0x22c>)
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7fd fe9a 	bl	8001610 <backup_settings>
		break;
 80038dc:	e000      	b.n	80038e0 <menu_enter+0x214>
		break;
 80038de:	46c0      	nop			; (mov r8, r8)
	}
	item->display(item);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	0010      	movs	r0, r2
 80038e8:	4798      	blx	r3
	return item;
 80038ea:	687b      	ldr	r3, [r7, #4]
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b005      	add	sp, #20
 80038f2:	bd90      	pop	{r4, r7, pc}
 80038f4:	0800bac8 	.word	0x0800bac8
 80038f8:	20000050 	.word	0x20000050
 80038fc:	20000000 	.word	0x20000000

08003900 <menu_return_home>:

HAL_StatusTypeDef menu_return_home(void) {
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	current_menu = &status_menu;
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <menu_return_home+0x30>)
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <menu_return_home+0x34>)
 8003908:	601a      	str	r2, [r3, #0]
	if (press.press_state.mode == PRESS_JOG){
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <menu_return_home+0x38>)
 800390c:	7a1b      	ldrb	r3, [r3, #8]
 800390e:	2b06      	cmp	r3, #6
 8003910:	d102      	bne.n	8003918 <menu_return_home+0x18>
		press.press_state.mode = PRESS_ERROR;
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <menu_return_home+0x38>)
 8003914:	2201      	movs	r2, #1
 8003916:	721a      	strb	r2, [r3, #8]
	}
	return current_menu->display(current_menu);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <menu_return_home+0x30>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <menu_return_home+0x30>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	0018      	movs	r0, r3
 8003924:	4790      	blx	r2
 8003926:	0003      	movs	r3, r0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	20000614 	.word	0x20000614
 8003934:	20000064 	.word	0x20000064
 8003938:	20000000 	.word	0x20000000

0800393c <debug_display>:
	sprintf(str, "%d C  %d C", (int)(press.thermal_state.bottom1), (int)(press.thermal_state.bottom2));
	set_row(str, 3, 0);
	return write_row(0);
}
extern float shunt_current;
HAL_StatusTypeDef debug_display(MenuItem* item) {
 800393c:	b5b0      	push	{r4, r5, r7, lr}
 800393e:	b08c      	sub	sp, #48	; 0x30
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	char msg[32]; int len;

	len = sprintf(msg, "Top: %dC %dC",
			(int) press.thermal_state.top1 % 1000,
 8003944:	4b89      	ldr	r3, [pc, #548]	; (8003b6c <debug_display+0x230>)
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	1c18      	adds	r0, r3, #0
 800394a:	f7fd fac1 	bl	8000ed0 <__aeabi_f2iz>
 800394e:	0002      	movs	r2, r0
	len = sprintf(msg, "Top: %dC %dC",
 8003950:	23fa      	movs	r3, #250	; 0xfa
 8003952:	0099      	lsls	r1, r3, #2
 8003954:	0010      	movs	r0, r2
 8003956:	f7fc fd59 	bl	800040c <__aeabi_idivmod>
 800395a:	000b      	movs	r3, r1
 800395c:	001c      	movs	r4, r3
			(int) press.thermal_state.top2 % 1000);
 800395e:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <debug_display+0x230>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	1c18      	adds	r0, r3, #0
 8003964:	f7fd fab4 	bl	8000ed0 <__aeabi_f2iz>
 8003968:	0002      	movs	r2, r0
	len = sprintf(msg, "Top: %dC %dC",
 800396a:	23fa      	movs	r3, #250	; 0xfa
 800396c:	0099      	lsls	r1, r3, #2
 800396e:	0010      	movs	r0, r2
 8003970:	f7fc fd4c 	bl	800040c <__aeabi_idivmod>
 8003974:	000b      	movs	r3, r1
 8003976:	497e      	ldr	r1, [pc, #504]	; (8003b70 <debug_display+0x234>)
 8003978:	250c      	movs	r5, #12
 800397a:	1978      	adds	r0, r7, r5
 800397c:	0022      	movs	r2, r4
 800397e:	f006 fcb7 	bl	800a2f0 <siprintf>
 8003982:	0003      	movs	r3, r0
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_row(msg, 0, 0); memset(msg, 0, 32);
 8003986:	197b      	adds	r3, r7, r5
 8003988:	2200      	movs	r2, #0
 800398a:	2100      	movs	r1, #0
 800398c:	0018      	movs	r0, r3
 800398e:	f000 fc63 	bl	8004258 <set_row>
 8003992:	197b      	adds	r3, r7, r5
 8003994:	2220      	movs	r2, #32
 8003996:	2100      	movs	r1, #0
 8003998:	0018      	movs	r0, r3
 800399a:	f006 fca1 	bl	800a2e0 <memset>

	len = sprintf(msg, "Bot: %dC %dC",
			(int) press.thermal_state.bottom1 % 1000,
 800399e:	4b73      	ldr	r3, [pc, #460]	; (8003b6c <debug_display+0x230>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	1c18      	adds	r0, r3, #0
 80039a4:	f7fd fa94 	bl	8000ed0 <__aeabi_f2iz>
 80039a8:	0002      	movs	r2, r0
	len = sprintf(msg, "Bot: %dC %dC",
 80039aa:	23fa      	movs	r3, #250	; 0xfa
 80039ac:	0099      	lsls	r1, r3, #2
 80039ae:	0010      	movs	r0, r2
 80039b0:	f7fc fd2c 	bl	800040c <__aeabi_idivmod>
 80039b4:	000b      	movs	r3, r1
 80039b6:	001c      	movs	r4, r3
			(int) press.thermal_state.bottom2 % 1000);
 80039b8:	4b6c      	ldr	r3, [pc, #432]	; (8003b6c <debug_display+0x230>)
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	1c18      	adds	r0, r3, #0
 80039be:	f7fd fa87 	bl	8000ed0 <__aeabi_f2iz>
 80039c2:	0002      	movs	r2, r0
	len = sprintf(msg, "Bot: %dC %dC",
 80039c4:	23fa      	movs	r3, #250	; 0xfa
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	0010      	movs	r0, r2
 80039ca:	f7fc fd1f 	bl	800040c <__aeabi_idivmod>
 80039ce:	000b      	movs	r3, r1
 80039d0:	4968      	ldr	r1, [pc, #416]	; (8003b74 <debug_display+0x238>)
 80039d2:	1978      	adds	r0, r7, r5
 80039d4:	0022      	movs	r2, r4
 80039d6:	f006 fc8b 	bl	800a2f0 <siprintf>
 80039da:	0003      	movs	r3, r0
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_row(msg, 1, 0); memset(msg, 0, 32);
 80039de:	197b      	adds	r3, r7, r5
 80039e0:	2200      	movs	r2, #0
 80039e2:	2101      	movs	r1, #1
 80039e4:	0018      	movs	r0, r3
 80039e6:	f000 fc37 	bl	8004258 <set_row>
 80039ea:	197b      	adds	r3, r7, r5
 80039ec:	2220      	movs	r2, #32
 80039ee:	2100      	movs	r1, #0
 80039f0:	0018      	movs	r0, r3
 80039f2:	f006 fc75 	bl	800a2e0 <memset>

	len = sprintf(msg, "SSR Top:%d Bot:%d",
			__READ_TOP_SSR(),
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	011a      	lsls	r2, r3, #4
 80039fa:	2390      	movs	r3, #144	; 0x90
 80039fc:	05db      	lsls	r3, r3, #23
 80039fe:	0011      	movs	r1, r2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f002 f9d5 	bl	8005db0 <HAL_GPIO_ReadPin>
 8003a06:	0003      	movs	r3, r0
	len = sprintf(msg, "SSR Top:%d Bot:%d",
 8003a08:	001c      	movs	r4, r3
			__READ_BOTTOM_SSR());
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	2390      	movs	r3, #144	; 0x90
 8003a10:	05db      	lsls	r3, r3, #23
 8003a12:	0011      	movs	r1, r2
 8003a14:	0018      	movs	r0, r3
 8003a16:	f002 f9cb 	bl	8005db0 <HAL_GPIO_ReadPin>
 8003a1a:	0003      	movs	r3, r0
	len = sprintf(msg, "SSR Top:%d Bot:%d",
 8003a1c:	4956      	ldr	r1, [pc, #344]	; (8003b78 <debug_display+0x23c>)
 8003a1e:	1978      	adds	r0, r7, r5
 8003a20:	0022      	movs	r2, r4
 8003a22:	f006 fc65 	bl	800a2f0 <siprintf>
 8003a26:	0003      	movs	r3, r0
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_row(msg, 2, 0); memset(msg, 0, 32);
 8003a2a:	197b      	adds	r3, r7, r5
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2102      	movs	r1, #2
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 fc11 	bl	8004258 <set_row>
 8003a36:	197b      	adds	r3, r7, r5
 8003a38:	2220      	movs	r2, #32
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f006 fc4f 	bl	800a2e0 <memset>

	len = sprintf(msg, "Tray open:%d", tray_interlock.state);
 8003a42:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <debug_display+0x240>)
 8003a44:	791b      	ldrb	r3, [r3, #4]
 8003a46:	001a      	movs	r2, r3
 8003a48:	494d      	ldr	r1, [pc, #308]	; (8003b80 <debug_display+0x244>)
 8003a4a:	197b      	adds	r3, r7, r5
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f006 fc4f 	bl	800a2f0 <siprintf>
 8003a52:	0003      	movs	r3, r0
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_row(msg, 3, 0); memset(msg, 0, 32);
 8003a56:	197b      	adds	r3, r7, r5
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 fbfb 	bl	8004258 <set_row>
 8003a62:	197b      	adds	r3, r7, r5
 8003a64:	2220      	movs	r2, #32
 8003a66:	2100      	movs	r1, #0
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f006 fc39 	bl	800a2e0 <memset>

	len = sprintf(msg, "TRVL Top:%d Bot:%d",
			!press_top_limit.state,
 8003a6e:	4b45      	ldr	r3, [pc, #276]	; (8003b84 <debug_display+0x248>)
 8003a70:	791b      	ldrb	r3, [r3, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	4053      	eors	r3, r2
 8003a76:	b2db      	uxtb	r3, r3
	len = sprintf(msg, "TRVL Top:%d Bot:%d",
 8003a78:	001c      	movs	r4, r3
			!press_bottom_limit.state);
 8003a7a:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <debug_display+0x24c>)
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4053      	eors	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
	len = sprintf(msg, "TRVL Top:%d Bot:%d",
 8003a84:	4941      	ldr	r1, [pc, #260]	; (8003b8c <debug_display+0x250>)
 8003a86:	1978      	adds	r0, r7, r5
 8003a88:	0022      	movs	r2, r4
 8003a8a:	f006 fc31 	bl	800a2f0 <siprintf>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_row(msg, 4, 0); memset(msg, 0, 32);
 8003a92:	197b      	adds	r3, r7, r5
 8003a94:	2200      	movs	r2, #0
 8003a96:	2104      	movs	r1, #4
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 fbdd 	bl	8004258 <set_row>
 8003a9e:	197b      	adds	r3, r7, r5
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f006 fc1b 	bl	800a2e0 <memset>

	len = sprintf(msg, "Activ L:%d R:%d",
			!activate_left_button.state,
 8003aaa:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <debug_display+0x254>)
 8003aac:	791b      	ldrb	r3, [r3, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4053      	eors	r3, r2
 8003ab2:	b2db      	uxtb	r3, r3
	len = sprintf(msg, "Activ L:%d R:%d",
 8003ab4:	001c      	movs	r4, r3
			!activate_right_button.state);
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <debug_display+0x258>)
 8003ab8:	791b      	ldrb	r3, [r3, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	4053      	eors	r3, r2
 8003abe:	b2db      	uxtb	r3, r3
	len = sprintf(msg, "Activ L:%d R:%d",
 8003ac0:	4935      	ldr	r1, [pc, #212]	; (8003b98 <debug_display+0x25c>)
 8003ac2:	1978      	adds	r0, r7, r5
 8003ac4:	0022      	movs	r2, r4
 8003ac6:	f006 fc13 	bl	800a2f0 <siprintf>
 8003aca:	0003      	movs	r3, r0
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_row(msg, 5, 0); memset(msg, 0, 32);
 8003ace:	197b      	adds	r3, r7, r5
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2105      	movs	r1, #5
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fbbf 	bl	8004258 <set_row>
 8003ada:	197b      	adds	r3, r7, r5
 8003adc:	2220      	movs	r2, #32
 8003ade:	2100      	movs	r1, #0
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f006 fbfd 	bl	800a2e0 <memset>

	len = sprintf(msg, "Motor:%d%% I:%dA",
			(int) (100.0f*press.press_state.motor_setpoint),
 8003ae6:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <debug_display+0x230>)
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	492c      	ldr	r1, [pc, #176]	; (8003b9c <debug_display+0x260>)
 8003aec:	1c18      	adds	r0, r3, #0
 8003aee:	f7fc ff1b 	bl	8000928 <__aeabi_fmul>
 8003af2:	1c03      	adds	r3, r0, #0
	len = sprintf(msg, "Motor:%d%% I:%dA",
 8003af4:	1c18      	adds	r0, r3, #0
 8003af6:	f7fd f9eb 	bl	8000ed0 <__aeabi_f2iz>
 8003afa:	0004      	movs	r4, r0
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <debug_display+0x264>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	1c18      	adds	r0, r3, #0
 8003b02:	f7fd f9e5 	bl	8000ed0 <__aeabi_f2iz>
 8003b06:	0003      	movs	r3, r0
 8003b08:	4926      	ldr	r1, [pc, #152]	; (8003ba4 <debug_display+0x268>)
 8003b0a:	1978      	adds	r0, r7, r5
 8003b0c:	0022      	movs	r2, r4
 8003b0e:	f006 fbef 	bl	800a2f0 <siprintf>
 8003b12:	0003      	movs	r3, r0
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
			(int) shunt_current);
	set_row(msg, 6, 0); memset(msg, 0, 32);
 8003b16:	197b      	adds	r3, r7, r5
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2106      	movs	r1, #6
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 fb9b 	bl	8004258 <set_row>
 8003b22:	197b      	adds	r3, r7, r5
 8003b24:	2220      	movs	r2, #32
 8003b26:	2100      	movs	r1, #0
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f006 fbd9 	bl	800a2e0 <memset>

	len = sprintf(msg, "State:%d", press.press_state.mode);
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <debug_display+0x230>)
 8003b30:	7a1b      	ldrb	r3, [r3, #8]
 8003b32:	001a      	movs	r2, r3
 8003b34:	491c      	ldr	r1, [pc, #112]	; (8003ba8 <debug_display+0x26c>)
 8003b36:	197b      	adds	r3, r7, r5
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f006 fbd9 	bl	800a2f0 <siprintf>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_row(msg, 7, 0); memset(msg, 0, 32);
 8003b42:	197b      	adds	r3, r7, r5
 8003b44:	2200      	movs	r2, #0
 8003b46:	2107      	movs	r1, #7
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f000 fb85 	bl	8004258 <set_row>
 8003b4e:	197b      	adds	r3, r7, r5
 8003b50:	2220      	movs	r2, #32
 8003b52:	2100      	movs	r1, #0
 8003b54:	0018      	movs	r0, r3
 8003b56:	f006 fbc3 	bl	800a2e0 <memset>

	return write_row(0);
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f000 fb06 	bl	800416c <write_row>
 8003b60:	0003      	movs	r3, r0
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b00c      	add	sp, #48	; 0x30
 8003b68:	bdb0      	pop	{r4, r5, r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	0800ac8c 	.word	0x0800ac8c
 8003b74:	0800ac9c 	.word	0x0800ac9c
 8003b78:	0800acac 	.word	0x0800acac
 8003b7c:	20000790 	.word	0x20000790
 8003b80:	0800acc0 	.word	0x0800acc0
 8003b84:	20000780 	.word	0x20000780
 8003b88:	20000788 	.word	0x20000788
 8003b8c:	0800acd0 	.word	0x0800acd0
 8003b90:	20000770 	.word	0x20000770
 8003b94:	20000778 	.word	0x20000778
 8003b98:	0800ace4 	.word	0x0800ace4
 8003b9c:	42c80000 	.word	0x42c80000
 8003ba0:	20000a60 	.word	0x20000a60
 8003ba4:	0800acf4 	.word	0x0800acf4
 8003ba8:	0800ad08 	.word	0x0800ad08

08003bac <status_display>:

HAL_StatusTypeDef status_display(MenuItem* item) {
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b08d      	sub	sp, #52	; 0x34
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	if (press.press_state.mode == PRESS_ERROR) { // TODO interlock error
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <status_display+0x170>)
 8003bb6:	7a1b      	ldrb	r3, [r3, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d111      	bne.n	8003be0 <status_display+0x34>
		if (tray_interlock.state) {
 8003bbc:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <status_display+0x174>)
 8003bbe:	791b      	ldrb	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <status_display+0x26>
			set_row("CLOSE TRAY!", 0, 1);
 8003bc4:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <status_display+0x178>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	2100      	movs	r1, #0
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 fb44 	bl	8004258 <set_row>
 8003bd0:	e03d      	b.n	8003c4e <status_display+0xa2>
		} else {
			set_row("WAIT...", 0, 1);
 8003bd2:	4b55      	ldr	r3, [pc, #340]	; (8003d28 <status_display+0x17c>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 fb3d 	bl	8004258 <set_row>
 8003bde:	e036      	b.n	8003c4e <status_display+0xa2>
		}
//	} else if (press.thermal_state.error) {
//		set_row("BAD THERMO!", 0, 1);
	} else if (!press.thermal_setpoint.enable) {
 8003be0:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <status_display+0x170>)
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	5c9b      	ldrb	r3, [r3, r2]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4053      	eors	r3, r2
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d006      	beq.n	8003bfe <status_display+0x52>
		set_row("ASLEEP", 0, 1);
 8003bf0:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <status_display+0x180>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 fb2e 	bl	8004258 <set_row>
 8003bfc:	e027      	b.n	8003c4e <status_display+0xa2>
	} else if (!(press.thermal_state.top_ready && press.thermal_state.bottom_ready)) {
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <status_display+0x170>)
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	5c9b      	ldrb	r3, [r3, r2]
 8003c04:	2201      	movs	r2, #1
 8003c06:	4053      	eors	r3, r2
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d107      	bne.n	8003c1e <status_display+0x72>
 8003c0e:	4b43      	ldr	r3, [pc, #268]	; (8003d1c <status_display+0x170>)
 8003c10:	2241      	movs	r2, #65	; 0x41
 8003c12:	5c9b      	ldrb	r3, [r3, r2]
 8003c14:	2201      	movs	r2, #1
 8003c16:	4053      	eors	r3, r2
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d006      	beq.n	8003c2c <status_display+0x80>
		set_row("PREHEAT...", 0, 1);
 8003c1e:	4b44      	ldr	r3, [pc, #272]	; (8003d30 <status_display+0x184>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	2100      	movs	r1, #0
 8003c24:	0018      	movs	r0, r3
 8003c26:	f000 fb17 	bl	8004258 <set_row>
 8003c2a:	e010      	b.n	8003c4e <status_display+0xa2>
	} else if (press.press_state.mode == PRESS_READY){
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <status_display+0x170>)
 8003c2e:	7a1b      	ldrb	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <status_display+0x96>
		set_row("READY!", 0, 1);
 8003c34:	4b3f      	ldr	r3, [pc, #252]	; (8003d34 <status_display+0x188>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	2100      	movs	r1, #0
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 fb0c 	bl	8004258 <set_row>
 8003c40:	e005      	b.n	8003c4e <status_display+0xa2>
	} else {
		set_row("PRESSING...", 0, 1);
 8003c42:	4b3d      	ldr	r3, [pc, #244]	; (8003d38 <status_display+0x18c>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	2100      	movs	r1, #0
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 fb05 	bl	8004258 <set_row>
	}

	char unit;
	if (press.config.flags & CONFIG_UNITS_FLAG) {
 8003c4e:	4b33      	ldr	r3, [pc, #204]	; (8003d1c <status_display+0x170>)
 8003c50:	2250      	movs	r2, #80	; 0x50
 8003c52:	5a9b      	ldrh	r3, [r3, r2]
 8003c54:	001a      	movs	r2, r3
 8003c56:	2304      	movs	r3, #4
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <status_display+0xba>
		unit = 'C';
 8003c5c:	232f      	movs	r3, #47	; 0x2f
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	2243      	movs	r2, #67	; 0x43
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e003      	b.n	8003c6e <status_display+0xc2>
	} else {
		unit = 'F';
 8003c66:	232f      	movs	r3, #47	; 0x2f
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	2246      	movs	r2, #70	; 0x46
 8003c6c:	701a      	strb	r2, [r3, #0]
	}

	if (press.thermal_setpoint.top_temp > 0){
 8003c6e:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <status_display+0x170>)
 8003c70:	2220      	movs	r2, #32
 8003c72:	5e9b      	ldrsh	r3, [r3, r2]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	dd1b      	ble.n	8003cb0 <status_display+0x104>
		char str[32] = {0};
 8003c78:	240c      	movs	r4, #12
 8003c7a:	193b      	adds	r3, r7, r4
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	3304      	adds	r3, #4
 8003c82:	221c      	movs	r2, #28
 8003c84:	2100      	movs	r1, #0
 8003c86:	0018      	movs	r0, r3
 8003c88:	f006 fb2a 	bl	800a2e0 <memset>
		sprintf(str, "  %d %c", press.config.top_temp, unit);
 8003c8c:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <status_display+0x170>)
 8003c8e:	2252      	movs	r2, #82	; 0x52
 8003c90:	5e9b      	ldrsh	r3, [r3, r2]
 8003c92:	001a      	movs	r2, r3
 8003c94:	232f      	movs	r3, #47	; 0x2f
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	4928      	ldr	r1, [pc, #160]	; (8003d3c <status_display+0x190>)
 8003c9c:	1938      	adds	r0, r7, r4
 8003c9e:	f006 fb27 	bl	800a2f0 <siprintf>
		set_row(str, 3, 1);
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2103      	movs	r1, #3
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 fad5 	bl	8004258 <set_row>
 8003cae:	e005      	b.n	8003cbc <status_display+0x110>
	} else {
		set_row("  OFF", 3, 1);
 8003cb0:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <status_display+0x194>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 face 	bl	8004258 <set_row>
	}

	if (press.thermal_setpoint.bottom_temp > 0){
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <status_display+0x170>)
 8003cbe:	2222      	movs	r2, #34	; 0x22
 8003cc0:	5e9b      	ldrsh	r3, [r3, r2]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dd1b      	ble.n	8003cfe <status_display+0x152>
		char str[32] = {0};
 8003cc6:	240c      	movs	r4, #12
 8003cc8:	193b      	adds	r3, r7, r4
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	221c      	movs	r2, #28
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f006 fb03 	bl	800a2e0 <memset>
		sprintf(str, "  %d %c", press.config.bottom_temp, unit);
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <status_display+0x170>)
 8003cdc:	2254      	movs	r2, #84	; 0x54
 8003cde:	5e9b      	ldrsh	r3, [r3, r2]
 8003ce0:	001a      	movs	r2, r3
 8003ce2:	232f      	movs	r3, #47	; 0x2f
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4914      	ldr	r1, [pc, #80]	; (8003d3c <status_display+0x190>)
 8003cea:	1938      	adds	r0, r7, r4
 8003cec:	f006 fb00 	bl	800a2f0 <siprintf>
		set_row(str, 6, 1);
 8003cf0:	193b      	adds	r3, r7, r4
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2106      	movs	r1, #6
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 faae 	bl	8004258 <set_row>
 8003cfc:	e005      	b.n	8003d0a <status_display+0x15e>
	} else {
		set_row("  OFF", 6, 1);
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <status_display+0x194>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	2106      	movs	r1, #6
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 faa7 	bl	8004258 <set_row>
	}
	return write_row(0);
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f000 fa2e 	bl	800416c <write_row>
 8003d10:	0003      	movs	r3, r0
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b00d      	add	sp, #52	; 0x34
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	20000790 	.word	0x20000790
 8003d24:	0800ad14 	.word	0x0800ad14
 8003d28:	0800ad20 	.word	0x0800ad20
 8003d2c:	0800ad28 	.word	0x0800ad28
 8003d30:	0800ad30 	.word	0x0800ad30
 8003d34:	0800ad3c 	.word	0x0800ad3c
 8003d38:	0800ad44 	.word	0x0800ad44
 8003d3c:	0800ad50 	.word	0x0800ad50
 8003d40:	0800ad58 	.word	0x0800ad58

08003d44 <generic_display>:

HAL_StatusTypeDef generic_display(MenuItem* item) {
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b08f      	sub	sp, #60	; 0x3c
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	set_row(item->name, 0, 1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3310      	adds	r3, #16
 8003d50:	2201      	movs	r2, #1
 8003d52:	2100      	movs	r1, #0
 8003d54:	0018      	movs	r0, r3
 8003d56:	f000 fa7f 	bl	8004258 <set_row>
	switch(item->type) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d100      	bne.n	8003d64 <generic_display+0x20>
 8003d62:	e087      	b.n	8003e74 <generic_display+0x130>
 8003d64:	dd00      	ble.n	8003d68 <generic_display+0x24>
 8003d66:	e09d      	b.n	8003ea4 <generic_display+0x160>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <generic_display+0x30>
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d100      	bne.n	8003d72 <generic_display+0x2e>
 8003d70:	e066      	b.n	8003e40 <generic_display+0xfc>
 8003d72:	e097      	b.n	8003ea4 <generic_display+0x160>
	case MENU: // item is a menu
	{
		int menu_index = min(item->length-4, item->index-2);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	885b      	ldrh	r3, [r3, #2]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	8892      	ldrh	r2, [r2, #4]
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	dc03      	bgt.n	8003d8a <generic_display+0x46>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	885b      	ldrh	r3, [r3, #2]
 8003d86:	3b04      	subs	r3, #4
 8003d88:	e002      	b.n	8003d90 <generic_display+0x4c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	889b      	ldrh	r3, [r3, #4]
 8003d8e:	3b02      	subs	r3, #2
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
		menu_index = max(0, menu_index);
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da00      	bge.n	8003d9a <generic_display+0x56>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	637b      	str	r3, [r7, #52]	; 0x34
		for (int row_index = 3; row_index < 8; row_index++, menu_index++) {
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003da0:	e04a      	b.n	8003e38 <generic_display+0xf4>
			char str[32] = {0};
 8003da2:	230c      	movs	r3, #12
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	3304      	adds	r3, #4
 8003dac:	221c      	movs	r2, #28
 8003dae:	2100      	movs	r1, #0
 8003db0:	0018      	movs	r0, r3
 8003db2:	f006 fa95 	bl	800a2e0 <memset>
			char cursor = (menu_index == item->index) ? '>' : ' ';
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	889b      	ldrh	r3, [r3, #4]
 8003dba:	001a      	movs	r2, r3
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <generic_display+0x82>
 8003dc2:	223e      	movs	r2, #62	; 0x3e
 8003dc4:	e000      	b.n	8003dc8 <generic_display+0x84>
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	212f      	movs	r1, #47	; 0x2f
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	701a      	strb	r2, [r3, #0]
			if (menu_index <= item->length && menu_index > 0) {
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	885b      	ldrh	r3, [r3, #2]
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	dc14      	bgt.n	8003e04 <generic_display+0xc0>
 8003dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	dd11      	ble.n	8003e04 <generic_display+0xc0>
				sprintf(str, "%c%s", cursor, (item->items[menu_index-1])->name);
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	781c      	ldrb	r4, [r3, #0]
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	3b01      	subs	r3, #1
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	3308      	adds	r3, #8
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	18d3      	adds	r3, r2, r3
 8003df0:	3304      	adds	r3, #4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3310      	adds	r3, #16
 8003df6:	4933      	ldr	r1, [pc, #204]	; (8003ec4 <generic_display+0x180>)
 8003df8:	220c      	movs	r2, #12
 8003dfa:	18b8      	adds	r0, r7, r2
 8003dfc:	0022      	movs	r2, r4
 8003dfe:	f006 fa77 	bl	800a2f0 <siprintf>
 8003e02:	e00b      	b.n	8003e1c <generic_display+0xd8>
			} else if (menu_index == 0) {
 8003e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d108      	bne.n	8003e1c <generic_display+0xd8>
				sprintf(str, "%cBack", cursor);
 8003e0a:	232f      	movs	r3, #47	; 0x2f
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	781a      	ldrb	r2, [r3, #0]
 8003e10:	492d      	ldr	r1, [pc, #180]	; (8003ec8 <generic_display+0x184>)
 8003e12:	230c      	movs	r3, #12
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	0018      	movs	r0, r3
 8003e18:	f006 fa6a 	bl	800a2f0 <siprintf>
			}
			set_row(str, row_index, 0);
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	b2d9      	uxtb	r1, r3
 8003e20:	230c      	movs	r3, #12
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	2200      	movs	r2, #0
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 fa16 	bl	8004258 <set_row>
		for (int row_index = 3; row_index < 8; row_index++, menu_index++) {
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	3301      	adds	r3, #1
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	3301      	adds	r3, #1
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	2b07      	cmp	r3, #7
 8003e3c:	ddb1      	ble.n	8003da2 <generic_display+0x5e>
		}
		break;
 8003e3e:	e038      	b.n	8003eb2 <generic_display+0x16e>
	}
	case MENU_NUM:
	{
		char str[32] = {0};
 8003e40:	240c      	movs	r4, #12
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	221c      	movs	r2, #28
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f006 fa46 	bl	800a2e0 <memset>
		sprintf(str, "Number: %d", item->value);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2208      	movs	r2, #8
 8003e58:	5e9b      	ldrsh	r3, [r3, r2]
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	491b      	ldr	r1, [pc, #108]	; (8003ecc <generic_display+0x188>)
 8003e5e:	193b      	adds	r3, r7, r4
 8003e60:	0018      	movs	r0, r3
 8003e62:	f006 fa45 	bl	800a2f0 <siprintf>
		set_row(str, 3, 0);
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2103      	movs	r1, #3
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 f9f3 	bl	8004258 <set_row>
		break;
 8003e72:	e01e      	b.n	8003eb2 <generic_display+0x16e>
	}
	case MENU_FLAG:
	{
		if (item->value & item->flag) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2208      	movs	r2, #8
 8003e78:	5e9b      	ldrsh	r3, [r3, r2]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	2106      	movs	r1, #6
 8003e7e:	5e52      	ldrsh	r2, [r2, r1]
 8003e80:	4013      	ands	r3, r2
 8003e82:	b21b      	sxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <generic_display+0x152>
			set_row("Enabled: Yes", 3, 0);
 8003e88:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <generic_display+0x18c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2103      	movs	r1, #3
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f000 f9e2 	bl	8004258 <set_row>
		} else {
			set_row("Enabled: No", 3, 0);
		}
		break;
 8003e94:	e00d      	b.n	8003eb2 <generic_display+0x16e>
			set_row("Enabled: No", 3, 0);
 8003e96:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <generic_display+0x190>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f000 f9db 	bl	8004258 <set_row>
		break;
 8003ea2:	e006      	b.n	8003eb2 <generic_display+0x16e>
	}
	case MENU_OTHER:
	default:
	{
		set_row(">Back", 3, 0);
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <generic_display+0x194>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2103      	movs	r1, #3
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f000 f9d4 	bl	8004258 <set_row>
	}
		break;
 8003eb0:	46c0      	nop			; (mov r8, r8)
	}
	return write_row(0);
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f000 f95a 	bl	800416c <write_row>
 8003eb8:	0003      	movs	r3, r0
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b00f      	add	sp, #60	; 0x3c
 8003ec0:	bd90      	pop	{r4, r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	0800ad60 	.word	0x0800ad60
 8003ec8:	0800ad68 	.word	0x0800ad68
 8003ecc:	0800ad70 	.word	0x0800ad70
 8003ed0:	0800ad7c 	.word	0x0800ad7c
 8003ed4:	0800ad8c 	.word	0x0800ad8c
 8003ed8:	0800ad98 	.word	0x0800ad98

08003edc <temperature_display>:

HAL_StatusTypeDef temperature_display(MenuItem* item) {
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b08d      	sub	sp, #52	; 0x34
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	set_row(item->name, 0, 1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3310      	adds	r3, #16
 8003ee8:	2201      	movs	r2, #1
 8003eea:	2100      	movs	r1, #0
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 f9b3 	bl	8004258 <set_row>
	if (item->value > 0) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dd2c      	ble.n	8003f56 <temperature_display+0x7a>
		char str[32] = {0};
 8003efc:	230c      	movs	r3, #12
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	3304      	adds	r3, #4
 8003f06:	221c      	movs	r2, #28
 8003f08:	2100      	movs	r1, #0
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f006 f9e8 	bl	800a2e0 <memset>
		char unit;
		if (press.config.flags & CONFIG_UNITS_FLAG) {
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <temperature_display+0x98>)
 8003f12:	2250      	movs	r2, #80	; 0x50
 8003f14:	5a9b      	ldrh	r3, [r3, r2]
 8003f16:	001a      	movs	r2, r3
 8003f18:	2304      	movs	r3, #4
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <temperature_display+0x4c>
			unit = 'C';
 8003f1e:	232f      	movs	r3, #47	; 0x2f
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	2243      	movs	r2, #67	; 0x43
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e003      	b.n	8003f30 <temperature_display+0x54>
		} else {
			unit = 'F';
 8003f28:	232f      	movs	r3, #47	; 0x2f
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	2246      	movs	r2, #70	; 0x46
 8003f2e:	701a      	strb	r2, [r3, #0]
		}
		sprintf(str, "Temperature: %d %c", item->value, unit);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2208      	movs	r2, #8
 8003f34:	5e9b      	ldrsh	r3, [r3, r2]
 8003f36:	001a      	movs	r2, r3
 8003f38:	232f      	movs	r3, #47	; 0x2f
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	490e      	ldr	r1, [pc, #56]	; (8003f78 <temperature_display+0x9c>)
 8003f40:	240c      	movs	r4, #12
 8003f42:	1938      	adds	r0, r7, r4
 8003f44:	f006 f9d4 	bl	800a2f0 <siprintf>
		set_row(str, 3, 0);
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2103      	movs	r1, #3
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 f982 	bl	8004258 <set_row>
 8003f54:	e005      	b.n	8003f62 <temperature_display+0x86>
	} else {
		set_row("Temperature: OFF", 3, 0);
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <temperature_display+0xa0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2103      	movs	r1, #3
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 f97b 	bl	8004258 <set_row>
	}
	return write_row(0);
 8003f62:	2000      	movs	r0, #0
 8003f64:	f000 f902 	bl	800416c <write_row>
 8003f68:	0003      	movs	r3, r0
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b00d      	add	sp, #52	; 0x34
 8003f70:	bd90      	pop	{r4, r7, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	20000000 	.word	0x20000000
 8003f78:	0800ada0 	.word	0x0800ada0
 8003f7c:	0800adb4 	.word	0x0800adb4

08003f80 <press_time_display>:

HAL_StatusTypeDef press_time_display(MenuItem* item) {
 8003f80:	b5b0      	push	{r4, r5, r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	set_row(item->name, 0, 1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	2100      	movs	r1, #0
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 f961 	bl	8004258 <set_row>
	char str[32] = {0};
 8003f96:	2508      	movs	r5, #8
 8003f98:	197b      	adds	r3, r7, r5
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	221c      	movs	r2, #28
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f006 f99b 	bl	800a2e0 <memset>
	sprintf(str, "Time: %d.%d s", item->value / 1000, (item->value / 100) % 10);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2208      	movs	r2, #8
 8003fae:	5e9b      	ldrsh	r3, [r3, r2]
 8003fb0:	22fa      	movs	r2, #250	; 0xfa
 8003fb2:	0091      	lsls	r1, r2, #2
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7fc f943 	bl	8000240 <__divsi3>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	b21b      	sxth	r3, r3
 8003fbe:	001c      	movs	r4, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	5e9b      	ldrsh	r3, [r3, r2]
 8003fc6:	2164      	movs	r1, #100	; 0x64
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7fc f939 	bl	8000240 <__divsi3>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	210a      	movs	r1, #10
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7fc fa19 	bl	800040c <__aeabi_idivmod>
 8003fda:	000b      	movs	r3, r1
 8003fdc:	b21b      	sxth	r3, r3
 8003fde:	4909      	ldr	r1, [pc, #36]	; (8004004 <press_time_display+0x84>)
 8003fe0:	1978      	adds	r0, r7, r5
 8003fe2:	0022      	movs	r2, r4
 8003fe4:	f006 f984 	bl	800a2f0 <siprintf>
	set_row(str, 3, 0);
 8003fe8:	197b      	adds	r3, r7, r5
 8003fea:	2200      	movs	r2, #0
 8003fec:	2103      	movs	r1, #3
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 f932 	bl	8004258 <set_row>
	return write_row(0);
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	f000 f8b9 	bl	800416c <write_row>
 8003ffa:	0003      	movs	r3, r0
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b00a      	add	sp, #40	; 0x28
 8004002:	bdb0      	pop	{r4, r5, r7, pc}
 8004004:	0800adc8 	.word	0x0800adc8

08004008 <manual_mode_display>:

HAL_StatusTypeDef manual_mode_display(MenuItem* item) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	set_row(item->name, 0, 1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3310      	adds	r3, #16
 8004014:	2201      	movs	r2, #1
 8004016:	2100      	movs	r1, #0
 8004018:	0018      	movs	r0, r3
 800401a:	f000 f91d 	bl	8004258 <set_row>
	if (item->value & item->flag) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2208      	movs	r2, #8
 8004022:	5e9b      	ldrsh	r3, [r3, r2]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	2106      	movs	r1, #6
 8004028:	5e52      	ldrsh	r2, [r2, r1]
 800402a:	4013      	ands	r3, r2
 800402c:	b21b      	sxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <manual_mode_display+0x38>
		set_row("Mode: Auto", 3, 0);
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <manual_mode_display+0x54>)
 8004034:	2200      	movs	r2, #0
 8004036:	2103      	movs	r1, #3
 8004038:	0018      	movs	r0, r3
 800403a:	f000 f90d 	bl	8004258 <set_row>
 800403e:	e005      	b.n	800404c <manual_mode_display+0x44>
	} else {
		set_row("Mode: Manual", 3, 0);
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <manual_mode_display+0x58>)
 8004042:	2200      	movs	r2, #0
 8004044:	2103      	movs	r1, #3
 8004046:	0018      	movs	r0, r3
 8004048:	f000 f906 	bl	8004258 <set_row>

	}
	return write_row(0);
 800404c:	2000      	movs	r0, #0
 800404e:	f000 f88d 	bl	800416c <write_row>
 8004052:	0003      	movs	r3, r0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}
 800405c:	0800add8 	.word	0x0800add8
 8004060:	0800ade4 	.word	0x0800ade4

08004064 <reset_display>:

HAL_StatusTypeDef reset_display(MenuItem* item) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	set_row(item->name, 0, 1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3310      	adds	r3, #16
 8004070:	2201      	movs	r2, #1
 8004072:	2100      	movs	r1, #0
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f8ef 	bl	8004258 <set_row>
	if (item->value) {
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2208      	movs	r2, #8
 800407e:	5e9b      	ldrsh	r3, [r3, r2]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <reset_display+0x3a>
		set_row("Yes", 3, 0);
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <reset_display+0x58>)
 8004086:	2200      	movs	r2, #0
 8004088:	2103      	movs	r1, #3
 800408a:	0018      	movs	r0, r3
 800408c:	f000 f8e4 	bl	8004258 <set_row>
		set_row("Are you sure?", 5, 0);
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <reset_display+0x5c>)
 8004092:	2200      	movs	r2, #0
 8004094:	2105      	movs	r1, #5
 8004096:	0018      	movs	r0, r3
 8004098:	f000 f8de 	bl	8004258 <set_row>
 800409c:	e005      	b.n	80040aa <reset_display+0x46>
	} else {
		set_row("No", 3, 0);
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <reset_display+0x60>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	2103      	movs	r1, #3
 80040a4:	0018      	movs	r0, r3
 80040a6:	f000 f8d7 	bl	8004258 <set_row>
	}
	return write_row(0);
 80040aa:	2000      	movs	r0, #0
 80040ac:	f000 f85e 	bl	800416c <write_row>
 80040b0:	0003      	movs	r3, r0
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b002      	add	sp, #8
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	0800adf4 	.word	0x0800adf4
 80040c0:	0800adf8 	.word	0x0800adf8
 80040c4:	0800ae08 	.word	0x0800ae08

080040c8 <units_display>:

HAL_StatusTypeDef units_display(MenuItem* item) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	set_row(item->name, 0, 1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3310      	adds	r3, #16
 80040d4:	2201      	movs	r2, #1
 80040d6:	2100      	movs	r1, #0
 80040d8:	0018      	movs	r0, r3
 80040da:	f000 f8bd 	bl	8004258 <set_row>
	if (item->value & item->flag) {
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2208      	movs	r2, #8
 80040e2:	5e9b      	ldrsh	r3, [r3, r2]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	2106      	movs	r1, #6
 80040e8:	5e52      	ldrsh	r2, [r2, r1]
 80040ea:	4013      	ands	r3, r2
 80040ec:	b21b      	sxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d006      	beq.n	8004100 <units_display+0x38>
		set_row("Units: Celsius", 3, 0);
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <units_display+0x54>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	2103      	movs	r1, #3
 80040f8:	0018      	movs	r0, r3
 80040fa:	f000 f8ad 	bl	8004258 <set_row>
 80040fe:	e005      	b.n	800410c <units_display+0x44>
	} else {
		set_row("Units: Fahrenheit", 3, 0);
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <units_display+0x58>)
 8004102:	2200      	movs	r2, #0
 8004104:	2103      	movs	r1, #3
 8004106:	0018      	movs	r0, r3
 8004108:	f000 f8a6 	bl	8004258 <set_row>
	}
	return write_row(0);
 800410c:	2000      	movs	r0, #0
 800410e:	f000 f82d 	bl	800416c <write_row>
 8004112:	0003      	movs	r3, r0
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}
 800411c:	0800ae0c 	.word	0x0800ae0c
 8004120:	0800ae1c 	.word	0x0800ae1c

08004124 <jog_display>:

HAL_StatusTypeDef jog_display(MenuItem* item) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	set_row(item->name, 0, 1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3310      	adds	r3, #16
 8004130:	2201      	movs	r2, #1
 8004132:	2100      	movs	r1, #0
 8004134:	0018      	movs	r0, r3
 8004136:	f000 f88f 	bl	8004258 <set_row>
	set_row("Jog press using", 3, 0);
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <jog_display+0x40>)
 800413c:	2200      	movs	r2, #0
 800413e:	2103      	movs	r1, #3
 8004140:	0018      	movs	r0, r3
 8004142:	f000 f889 	bl	8004258 <set_row>
	set_row("menu buttons", 4, 0);
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <jog_display+0x44>)
 8004148:	2200      	movs	r2, #0
 800414a:	2104      	movs	r1, #4
 800414c:	0018      	movs	r0, r3
 800414e:	f000 f883 	bl	8004258 <set_row>
	return write_row(0);
 8004152:	2000      	movs	r0, #0
 8004154:	f000 f80a 	bl	800416c <write_row>
 8004158:	0003      	movs	r3, r0
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b002      	add	sp, #8
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	0800ae30 	.word	0x0800ae30
 8004168:	0800ae40 	.word	0x0800ae40

0800416c <write_row>:

bool busy_flag = false;
HAL_StatusTypeDef write_row_innerfunc(void);
HAL_StatusTypeDef write_row(uint8_t rownum) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	0002      	movs	r2, r0
 8004174:	1dfb      	adds	r3, r7, #7
 8004176:	701a      	strb	r2, [r3, #0]
	if (!busy_flag) {
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <write_row+0x3c>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2201      	movs	r2, #1
 800417e:	4053      	eors	r3, r2
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <write_row+0x30>
		busy_flag = true;
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <write_row+0x3c>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
		display_row = rownum;
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <write_row+0x40>)
 800418e:	1dfa      	adds	r2, r7, #7
 8004190:	7812      	ldrb	r2, [r2, #0]
 8004192:	701a      	strb	r2, [r3, #0]
		return write_row_innerfunc();
 8004194:	f000 f80c 	bl	80041b0 <write_row_innerfunc>
 8004198:	0003      	movs	r3, r0
 800419a:	e000      	b.n	800419e <write_row+0x32>
	} else {
		return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
	}
}
 800419e:	0018      	movs	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b002      	add	sp, #8
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	20000b74 	.word	0x20000b74
 80041ac:	20000a6a 	.word	0x20000a6a

080041b0 <write_row_innerfunc>:

HAL_StatusTypeDef write_row_innerfunc(void) {
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b08d      	sub	sp, #52	; 0x34
 80041b4:	af00      	add	r7, sp, #0
	char msg[32];
	int len = sprintf(msg, "Writing to row %d\n\r", display_row);
 80041b6:	4b23      	ldr	r3, [pc, #140]	; (8004244 <write_row_innerfunc+0x94>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	001a      	movs	r2, r3
 80041bc:	4922      	ldr	r1, [pc, #136]	; (8004248 <write_row_innerfunc+0x98>)
 80041be:	1d3b      	adds	r3, r7, #4
 80041c0:	0018      	movs	r0, r3
 80041c2:	f006 f895 	bl	800a2f0 <siprintf>
 80041c6:	0003      	movs	r3, r0
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
//	HAL_UART_Transmit(&huart2, msg, len, 100);
	if (display_row >= 8) {
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <write_row_innerfunc+0x94>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b07      	cmp	r3, #7
 80041d0:	d907      	bls.n	80041e2 <write_row_innerfunc+0x32>
		display_row = 0;
 80041d2:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <write_row_innerfunc+0x94>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
		busy_flag = false;
 80041d8:	4b1c      	ldr	r3, [pc, #112]	; (800424c <write_row_innerfunc+0x9c>)
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e02c      	b.n	800423c <write_row_innerfunc+0x8c>
	} else {
		uint8_t font = screen_fonts[display_row];
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <write_row_innerfunc+0x94>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	0019      	movs	r1, r3
 80041e8:	242b      	movs	r4, #43	; 0x2b
 80041ea:	193b      	adds	r3, r7, r4
 80041ec:	4a18      	ldr	r2, [pc, #96]	; (8004250 <write_row_innerfunc+0xa0>)
 80041ee:	5c52      	ldrb	r2, [r2, r1]
 80041f0:	701a      	strb	r2, [r3, #0]
		char* row = screen_buf + (display_row << 5);
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <write_row_innerfunc+0x94>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	015b      	lsls	r3, r3, #5
 80041f8:	001a      	movs	r2, r3
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <write_row_innerfunc+0xa4>)
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
		SSD1306_ClearBuf();
 8004200:	f7fd f97e 	bl	8001500 <SSD1306_ClearBuf>
		SSD1306_setFont(font);
 8004204:	193b      	adds	r3, r7, r4
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	0018      	movs	r0, r3
 800420a:	f7fd f86b 	bl	80012e4 <SSD1306_setFont>
		SSD1306_writeString(0, row);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	0019      	movs	r1, r3
 8004212:	2000      	movs	r0, #0
 8004214:	f7fd f820 	bl	8001258 <SSD1306_writeString>
		memset(row, 0, 32);
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	2220      	movs	r2, #32
 800421c:	2100      	movs	r1, #0
 800421e:	0018      	movs	r0, r3
 8004220:	f006 f85e 	bl	800a2e0 <memset>
		SSD1306_WriteRow(display_row++);
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <write_row_innerfunc+0x94>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	b2d1      	uxtb	r1, r2
 800422c:	4a05      	ldr	r2, [pc, #20]	; (8004244 <write_row_innerfunc+0x94>)
 800422e:	7011      	strb	r1, [r2, #0]
 8004230:	0018      	movs	r0, r3
 8004232:	f7fd f955 	bl	80014e0 <SSD1306_WriteRow>
		return write_row_innerfunc();
 8004236:	f7ff ffbb 	bl	80041b0 <write_row_innerfunc>
 800423a:	0003      	movs	r3, r0
	}
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b00d      	add	sp, #52	; 0x34
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	20000a6a 	.word	0x20000a6a
 8004248:	0800ae50 	.word	0x0800ae50
 800424c:	20000b74 	.word	0x20000b74
 8004250:	20000b6c 	.word	0x20000b6c
 8004254:	20000a6c 	.word	0x20000a6c

08004258 <set_row>:

void set_row(char* str, uint8_t rownum, uint8_t font) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	0008      	movs	r0, r1
 8004262:	0011      	movs	r1, r2
 8004264:	1cfb      	adds	r3, r7, #3
 8004266:	1c02      	adds	r2, r0, #0
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	1cbb      	adds	r3, r7, #2
 800426c:	1c0a      	adds	r2, r1, #0
 800426e:	701a      	strb	r2, [r3, #0]
	char* row = screen_buf+(rownum << 5);
 8004270:	1cfb      	adds	r3, r7, #3
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	015b      	lsls	r3, r3, #5
 8004276:	001a      	movs	r2, r3
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <set_row+0x78>)
 800427a:	18d3      	adds	r3, r2, r3
 800427c:	60fb      	str	r3, [r7, #12]
	strncpy(row, str, 32);
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	0018      	movs	r0, r3
 8004286:	f006 f853 	bl	800a330 <strncpy>
	screen_fonts[rownum] = font;
 800428a:	1cfb      	adds	r3, r7, #3
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <set_row+0x7c>)
 8004290:	1cb9      	adds	r1, r7, #2
 8004292:	7809      	ldrb	r1, [r1, #0]
 8004294:	54d1      	strb	r1, [r2, r3]
	if (font && rownum<7) {
 8004296:	1cbb      	adds	r3, r7, #2
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d013      	beq.n	80042c6 <set_row+0x6e>
 800429e:	1cfb      	adds	r3, r7, #3
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d80f      	bhi.n	80042c6 <set_row+0x6e>
		screen_fonts[rownum+1] = font+1;
 80042a6:	1cfb      	adds	r3, r7, #3
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	1cba      	adds	r2, r7, #2
 80042ae:	7812      	ldrb	r2, [r2, #0]
 80042b0:	3201      	adds	r2, #1
 80042b2:	b2d1      	uxtb	r1, r2
 80042b4:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <set_row+0x7c>)
 80042b6:	54d1      	strb	r1, [r2, r3]
		strncpy(row + (1<<5), str, 32);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3320      	adds	r3, #32
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	0018      	movs	r0, r3
 80042c2:	f006 f835 	bl	800a330 <strncpy>
	}
}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	20000a6c 	.word	0x20000a6c
 80042d4:	20000b6c 	.word	0x20000b6c

080042d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_MspInit+0x44>)
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_MspInit+0x44>)
 80042e4:	2101      	movs	r1, #1
 80042e6:	430a      	orrs	r2, r1
 80042e8:	619a      	str	r2, [r3, #24]
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_MspInit+0x44>)
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2201      	movs	r2, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_MspInit+0x44>)
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_MspInit+0x44>)
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	0549      	lsls	r1, r1, #21
 8004300:	430a      	orrs	r2, r1
 8004302:	61da      	str	r2, [r3, #28]
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_MspInit+0x44>)
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	055b      	lsls	r3, r3, #21
 800430c:	4013      	ands	r3, r2
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b002      	add	sp, #8
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	40021000 	.word	0x40021000

08004320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b08b      	sub	sp, #44	; 0x2c
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	2414      	movs	r4, #20
 800432a:	193b      	adds	r3, r7, r4
 800432c:	0018      	movs	r0, r3
 800432e:	2314      	movs	r3, #20
 8004330:	001a      	movs	r2, r3
 8004332:	2100      	movs	r1, #0
 8004334:	f005 ffd4 	bl	800a2e0 <memset>
  if(hadc->Instance==ADC1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a31      	ldr	r2, [pc, #196]	; (8004404 <HAL_ADC_MspInit+0xe4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d15b      	bne.n	80043fa <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004342:	4b31      	ldr	r3, [pc, #196]	; (8004408 <HAL_ADC_MspInit+0xe8>)
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_ADC_MspInit+0xe8>)
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	0089      	lsls	r1, r1, #2
 800434c:	430a      	orrs	r2, r1
 800434e:	619a      	str	r2, [r3, #24]
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_ADC_MspInit+0xe8>)
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4013      	ands	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_ADC_MspInit+0xe8>)
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	4b29      	ldr	r3, [pc, #164]	; (8004408 <HAL_ADC_MspInit+0xe8>)
 8004364:	2180      	movs	r1, #128	; 0x80
 8004366:	0289      	lsls	r1, r1, #10
 8004368:	430a      	orrs	r2, r1
 800436a:	615a      	str	r2, [r3, #20]
 800436c:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_ADC_MspInit+0xe8>)
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	2380      	movs	r3, #128	; 0x80
 8004372:	029b      	lsls	r3, r3, #10
 8004374:	4013      	ands	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = OPAMP_VOUT_Pin;
 800437a:	193b      	adds	r3, r7, r4
 800437c:	2202      	movs	r2, #2
 800437e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004380:	193b      	adds	r3, r7, r4
 8004382:	2203      	movs	r2, #3
 8004384:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004386:	193b      	adds	r3, r7, r4
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(OPAMP_VOUT_GPIO_Port, &GPIO_InitStruct);
 800438c:	193a      	adds	r2, r7, r4
 800438e:	2390      	movs	r3, #144	; 0x90
 8004390:	05db      	lsls	r3, r3, #23
 8004392:	0011      	movs	r1, r2
 8004394:	0018      	movs	r0, r3
 8004396:	f001 fb9b 	bl	8005ad0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_ADC_MspInit+0xec>)
 800439c:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <HAL_ADC_MspInit+0xf0>)
 800439e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043a0:	4b1a      	ldr	r3, [pc, #104]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80043ac:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	0052      	lsls	r2, r2, #1
 80043b8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	00d2      	lsls	r2, r2, #3
 80043c0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043c4:	2220      	movs	r2, #32
 80043c6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80043c8:	4b10      	ldr	r3, [pc, #64]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043d0:	0018      	movs	r0, r3
 80043d2:	f001 f993 	bl	80056fc <HAL_DMA_Init>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d001      	beq.n	80043de <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80043da:	f7fe ffbf 	bl	800335c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_ADC_MspInit+0xec>)
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2100      	movs	r1, #0
 80043ee:	200c      	movs	r0, #12
 80043f0:	f001 f952 	bl	8005698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80043f4:	200c      	movs	r0, #12
 80043f6:	f001 f964 	bl	80056c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b00b      	add	sp, #44	; 0x2c
 8004400:	bd90      	pop	{r4, r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40012400 	.word	0x40012400
 8004408:	40021000 	.word	0x40021000
 800440c:	200007d8 	.word	0x200007d8
 8004410:	40020008 	.word	0x40020008

08004414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b08b      	sub	sp, #44	; 0x2c
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	2414      	movs	r4, #20
 800441e:	193b      	adds	r3, r7, r4
 8004420:	0018      	movs	r0, r3
 8004422:	2314      	movs	r3, #20
 8004424:	001a      	movs	r2, r3
 8004426:	2100      	movs	r1, #0
 8004428:	f005 ff5a 	bl	800a2e0 <memset>
  if(hi2c->Instance==I2C2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a31      	ldr	r2, [pc, #196]	; (80044f8 <HAL_I2C_MspInit+0xe4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d15c      	bne.n	80044f0 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004436:	4b31      	ldr	r3, [pc, #196]	; (80044fc <HAL_I2C_MspInit+0xe8>)
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_I2C_MspInit+0xe8>)
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	03c9      	lsls	r1, r1, #15
 8004440:	430a      	orrs	r2, r1
 8004442:	615a      	str	r2, [r3, #20]
 8004444:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <HAL_I2C_MspInit+0xe8>)
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	03db      	lsls	r3, r3, #15
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF6     ------> I2C2_SCL
    PF7     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004452:	0021      	movs	r1, r4
 8004454:	187b      	adds	r3, r7, r1
 8004456:	22c0      	movs	r2, #192	; 0xc0
 8004458:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800445a:	187b      	adds	r3, r7, r1
 800445c:	2212      	movs	r2, #18
 800445e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004460:	187b      	adds	r3, r7, r1
 8004462:	2201      	movs	r2, #1
 8004464:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004466:	187b      	adds	r3, r7, r1
 8004468:	2203      	movs	r2, #3
 800446a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800446c:	187b      	adds	r3, r7, r1
 800446e:	4a24      	ldr	r2, [pc, #144]	; (8004500 <HAL_I2C_MspInit+0xec>)
 8004470:	0019      	movs	r1, r3
 8004472:	0010      	movs	r0, r2
 8004474:	f001 fb2c 	bl	8005ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004478:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_I2C_MspInit+0xe8>)
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	4b1f      	ldr	r3, [pc, #124]	; (80044fc <HAL_I2C_MspInit+0xe8>)
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	03c9      	lsls	r1, r1, #15
 8004482:	430a      	orrs	r2, r1
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HAL_I2C_MspInit+0xe8>)
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	03db      	lsls	r3, r3, #15
 800448e:	4013      	ands	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 8004496:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <HAL_I2C_MspInit+0xf4>)
 8004498:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800449a:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 800449c:	2210      	movs	r2, #16
 800449e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044a0:	4b18      	ldr	r3, [pc, #96]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044a6:	4b17      	ldr	r3, [pc, #92]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044a8:	2280      	movs	r2, #128	; 0x80
 80044aa:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044ac:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044c6:	0018      	movs	r0, r3
 80044c8:	f001 f918 	bl	80056fc <HAL_DMA_Init>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_I2C_MspInit+0xc0>
    {
      Error_Handler();
 80044d0:	f7fe ff44 	bl	800335c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0b      	ldr	r2, [pc, #44]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <HAL_I2C_MspInit+0xf0>)
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80044e0:	2200      	movs	r2, #0
 80044e2:	2100      	movs	r1, #0
 80044e4:	2018      	movs	r0, #24
 80044e6:	f001 f8d7 	bl	8005698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80044ea:	2018      	movs	r0, #24
 80044ec:	f001 f8e9 	bl	80056c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b00b      	add	sp, #44	; 0x2c
 80044f6:	bd90      	pop	{r4, r7, pc}
 80044f8:	40005800 	.word	0x40005800
 80044fc:	40021000 	.word	0x40021000
 8004500:	48001400 	.word	0x48001400
 8004504:	20000868 	.word	0x20000868
 8004508:	40020044 	.word	0x40020044

0800450c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a06      	ldr	r2, [pc, #24]	; (8004534 <HAL_RTC_MspInit+0x28>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d106      	bne.n	800452c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RTC_MspInit+0x2c>)
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RTC_MspInit+0x2c>)
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	0209      	lsls	r1, r1, #8
 8004528:	430a      	orrs	r2, r1
 800452a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	b002      	add	sp, #8
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40002800 	.word	0x40002800
 8004538:	40021000 	.word	0x40021000

0800453c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b08b      	sub	sp, #44	; 0x2c
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004544:	2414      	movs	r4, #20
 8004546:	193b      	adds	r3, r7, r4
 8004548:	0018      	movs	r0, r3
 800454a:	2314      	movs	r3, #20
 800454c:	001a      	movs	r2, r3
 800454e:	2100      	movs	r1, #0
 8004550:	f005 fec6 	bl	800a2e0 <memset>
  if(hspi->Instance==SPI1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1c      	ldr	r2, [pc, #112]	; (80045cc <HAL_SPI_MspInit+0x90>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d131      	bne.n	80045c2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <HAL_SPI_MspInit+0x94>)
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_SPI_MspInit+0x94>)
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	0149      	lsls	r1, r1, #5
 8004568:	430a      	orrs	r2, r1
 800456a:	619a      	str	r2, [r3, #24]
 800456c:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <HAL_SPI_MspInit+0x94>)
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	015b      	lsls	r3, r3, #5
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_SPI_MspInit+0x94>)
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <HAL_SPI_MspInit+0x94>)
 8004580:	2180      	movs	r1, #128	; 0x80
 8004582:	02c9      	lsls	r1, r1, #11
 8004584:	430a      	orrs	r2, r1
 8004586:	615a      	str	r2, [r3, #20]
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_SPI_MspInit+0x94>)
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	02db      	lsls	r3, r3, #11
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004596:	0021      	movs	r1, r4
 8004598:	187b      	adds	r3, r7, r1
 800459a:	2238      	movs	r2, #56	; 0x38
 800459c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459e:	187b      	adds	r3, r7, r1
 80045a0:	2202      	movs	r2, #2
 80045a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045aa:	187b      	adds	r3, r7, r1
 80045ac:	2203      	movs	r2, #3
 80045ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b6:	187b      	adds	r3, r7, r1
 80045b8:	4a06      	ldr	r2, [pc, #24]	; (80045d4 <HAL_SPI_MspInit+0x98>)
 80045ba:	0019      	movs	r1, r3
 80045bc:	0010      	movs	r0, r2
 80045be:	f001 fa87 	bl	8005ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b00b      	add	sp, #44	; 0x2c
 80045c8:	bd90      	pop	{r4, r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	40013000 	.word	0x40013000
 80045d0:	40021000 	.word	0x40021000
 80045d4:	48000400 	.word	0x48000400

080045d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a17      	ldr	r2, [pc, #92]	; (8004644 <HAL_TIM_PWM_MspInit+0x6c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d116      	bne.n	8004618 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <HAL_TIM_PWM_MspInit+0x70>)
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_TIM_PWM_MspInit+0x70>)
 80045f0:	2180      	movs	r1, #128	; 0x80
 80045f2:	0109      	lsls	r1, r1, #4
 80045f4:	430a      	orrs	r2, r1
 80045f6:	619a      	str	r2, [r3, #24]
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_TIM_PWM_MspInit+0x70>)
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	4013      	ands	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8004606:	2200      	movs	r2, #0
 8004608:	2100      	movs	r1, #0
 800460a:	200d      	movs	r0, #13
 800460c:	f001 f844 	bl	8005698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004610:	200d      	movs	r0, #13
 8004612:	f001 f856 	bl	80056c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004616:	e011      	b.n	800463c <HAL_TIM_PWM_MspInit+0x64>
  else if(htim_pwm->Instance==TIM2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	05db      	lsls	r3, r3, #23
 8004620:	429a      	cmp	r2, r3
 8004622:	d10b      	bne.n	800463c <HAL_TIM_PWM_MspInit+0x64>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004624:	4b08      	ldr	r3, [pc, #32]	; (8004648 <HAL_TIM_PWM_MspInit+0x70>)
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_TIM_PWM_MspInit+0x70>)
 800462a:	2101      	movs	r1, #1
 800462c:	430a      	orrs	r2, r1
 800462e:	61da      	str	r2, [r3, #28]
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_TIM_PWM_MspInit+0x70>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40021000 	.word	0x40021000

0800464c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b08b      	sub	sp, #44	; 0x2c
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	2414      	movs	r4, #20
 8004656:	193b      	adds	r3, r7, r4
 8004658:	0018      	movs	r0, r3
 800465a:	2314      	movs	r3, #20
 800465c:	001a      	movs	r2, r3
 800465e:	2100      	movs	r1, #0
 8004660:	f005 fe3e 	bl	800a2e0 <memset>
  if(htim->Instance==TIM1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <HAL_TIM_MspPostInit+0x114>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d149      	bne.n	8004702 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466e:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	4b3c      	ldr	r3, [pc, #240]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	0289      	lsls	r1, r1, #10
 8004678:	430a      	orrs	r2, r1
 800467a:	615a      	str	r2, [r3, #20]
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	029b      	lsls	r3, r3, #10
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468a:	4b36      	ldr	r3, [pc, #216]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	4b35      	ldr	r3, [pc, #212]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	02c9      	lsls	r1, r1, #11
 8004694:	430a      	orrs	r2, r1
 8004696:	615a      	str	r2, [r3, #20]
 8004698:	4b32      	ldr	r3, [pc, #200]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	02db      	lsls	r3, r3, #11
 80046a0:	4013      	ands	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	22e0      	movs	r2, #224	; 0xe0
 80046aa:	0092      	lsls	r2, r2, #2
 80046ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ae:	193b      	adds	r3, r7, r4
 80046b0:	2202      	movs	r2, #2
 80046b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b4:	193b      	adds	r3, r7, r4
 80046b6:	2200      	movs	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	2200      	movs	r2, #0
 80046be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	2202      	movs	r2, #2
 80046c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c6:	193a      	adds	r2, r7, r4
 80046c8:	2390      	movs	r3, #144	; 0x90
 80046ca:	05db      	lsls	r3, r3, #23
 80046cc:	0011      	movs	r1, r2
 80046ce:	0018      	movs	r0, r3
 80046d0:	f001 f9fe 	bl	8005ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046d4:	0021      	movs	r1, r4
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	2202      	movs	r2, #2
 80046e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	2200      	movs	r2, #0
 80046e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	2202      	movs	r2, #2
 80046f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f4:	187b      	adds	r3, r7, r1
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_TIM_MspPostInit+0x11c>)
 80046f8:	0019      	movs	r1, r3
 80046fa:	0010      	movs	r0, r2
 80046fc:	f001 f9e8 	bl	8005ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004700:	e02a      	b.n	8004758 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM2)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	05db      	lsls	r3, r3, #23
 800470a:	429a      	cmp	r2, r3
 800470c:	d124      	bne.n	8004758 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	02c9      	lsls	r1, r1, #11
 8004718:	430a      	orrs	r2, r1
 800471a:	615a      	str	r2, [r3, #20]
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_TIM_MspPostInit+0x118>)
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	02db      	lsls	r3, r3, #11
 8004724:	4013      	ands	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800472a:	2114      	movs	r1, #20
 800472c:	187b      	adds	r3, r7, r1
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	0112      	lsls	r2, r2, #4
 8004732:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	187b      	adds	r3, r7, r1
 8004736:	2202      	movs	r2, #2
 8004738:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	187b      	adds	r3, r7, r1
 800473c:	2200      	movs	r2, #0
 800473e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004740:	187b      	adds	r3, r7, r1
 8004742:	2200      	movs	r2, #0
 8004744:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004746:	187b      	adds	r3, r7, r1
 8004748:	2202      	movs	r2, #2
 800474a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800474c:	187b      	adds	r3, r7, r1
 800474e:	4a06      	ldr	r2, [pc, #24]	; (8004768 <HAL_TIM_MspPostInit+0x11c>)
 8004750:	0019      	movs	r1, r3
 8004752:	0010      	movs	r0, r2
 8004754:	f001 f9bc 	bl	8005ad0 <HAL_GPIO_Init>
}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b00b      	add	sp, #44	; 0x2c
 800475e:	bd90      	pop	{r4, r7, pc}
 8004760:	40012c00 	.word	0x40012c00
 8004764:	40021000 	.word	0x40021000
 8004768:	48000400 	.word	0x48000400

0800476c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b08b      	sub	sp, #44	; 0x2c
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004774:	2414      	movs	r4, #20
 8004776:	193b      	adds	r3, r7, r4
 8004778:	0018      	movs	r0, r3
 800477a:	2314      	movs	r3, #20
 800477c:	001a      	movs	r2, r3
 800477e:	2100      	movs	r1, #0
 8004780:	f005 fdae 	bl	800a2e0 <memset>
  if(huart->Instance==USART2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <HAL_UART_MspInit+0x90>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d132      	bne.n	80047f4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <HAL_UART_MspInit+0x94>)
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <HAL_UART_MspInit+0x94>)
 8004794:	2180      	movs	r1, #128	; 0x80
 8004796:	0289      	lsls	r1, r1, #10
 8004798:	430a      	orrs	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <HAL_UART_MspInit+0x94>)
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	029b      	lsls	r3, r3, #10
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <HAL_UART_MspInit+0x94>)
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <HAL_UART_MspInit+0x94>)
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	0289      	lsls	r1, r1, #10
 80047b4:	430a      	orrs	r2, r1
 80047b6:	615a      	str	r2, [r3, #20]
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_UART_MspInit+0x94>)
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	029b      	lsls	r3, r3, #10
 80047c0:	4013      	ands	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047c6:	0021      	movs	r1, r4
 80047c8:	187b      	adds	r3, r7, r1
 80047ca:	220c      	movs	r2, #12
 80047cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ce:	187b      	adds	r3, r7, r1
 80047d0:	2202      	movs	r2, #2
 80047d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	187b      	adds	r3, r7, r1
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047da:	187b      	adds	r3, r7, r1
 80047dc:	2203      	movs	r2, #3
 80047de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	2201      	movs	r2, #1
 80047e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e6:	187a      	adds	r2, r7, r1
 80047e8:	2390      	movs	r3, #144	; 0x90
 80047ea:	05db      	lsls	r3, r3, #23
 80047ec:	0011      	movs	r1, r2
 80047ee:	0018      	movs	r0, r3
 80047f0:	f001 f96e 	bl	8005ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b00b      	add	sp, #44	; 0x2c
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	40004400 	.word	0x40004400
 8004800:	40021000 	.word	0x40021000

08004804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004808:	e7fe      	b.n	8004808 <NMI_Handler+0x4>

0800480a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800480e:	e7fe      	b.n	800480e <HardFault_Handler+0x4>

08004810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004828:	f000 f8fa 	bl	8004a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <DMA1_Channel1_IRQHandler+0x14>)
 800483a:	0018      	movs	r0, r3
 800483c:	f001 f851 	bl	80058e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	200007d8 	.word	0x200007d8

0800484c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <DMA1_Channel4_5_IRQHandler+0x14>)
 8004852:	0018      	movs	r0, r3
 8004854:	f001 f845 	bl	80058e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	20000868 	.word	0x20000868

08004864 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <ADC1_COMP_IRQHandler+0x14>)
 800486a:	0018      	movs	r0, r3
 800486c:	f000 fada 	bl	8004e24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	20000798 	.word	0x20000798

0800487c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8004882:	0018      	movs	r0, r3
 8004884:	f004 fadc 	bl	8008e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	20000940 	.word	0x20000940

08004894 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <I2C2_IRQHandler+0x2c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	23e0      	movs	r3, #224	; 0xe0
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4013      	ands	r3, r2
 80048a4:	d004      	beq.n	80048b0 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <I2C2_IRQHandler+0x2c>)
 80048a8:	0018      	movs	r0, r3
 80048aa:	f001 fc8f 	bl	80061cc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80048ae:	e003      	b.n	80048b8 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <I2C2_IRQHandler+0x2c>)
 80048b2:	0018      	movs	r0, r3
 80048b4:	f001 fc70 	bl	8006198 <HAL_I2C_EV_IRQHandler>
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	2000081c 	.word	0x2000081c

080048c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048cc:	4a14      	ldr	r2, [pc, #80]	; (8004920 <_sbrk+0x5c>)
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <_sbrk+0x60>)
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <_sbrk+0x64>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048e0:	4b11      	ldr	r3, [pc, #68]	; (8004928 <_sbrk+0x64>)
 80048e2:	4a12      	ldr	r2, [pc, #72]	; (800492c <_sbrk+0x68>)
 80048e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <_sbrk+0x64>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	18d3      	adds	r3, r2, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d207      	bcs.n	8004904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048f4:	f005 fcca 	bl	800a28c <__errno>
 80048f8:	0003      	movs	r3, r0
 80048fa:	220c      	movs	r2, #12
 80048fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048fe:	2301      	movs	r3, #1
 8004900:	425b      	negs	r3, r3
 8004902:	e009      	b.n	8004918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004904:	4b08      	ldr	r3, [pc, #32]	; (8004928 <_sbrk+0x64>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800490a:	4b07      	ldr	r3, [pc, #28]	; (8004928 <_sbrk+0x64>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	18d2      	adds	r2, r2, r3
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <_sbrk+0x64>)
 8004914:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b006      	add	sp, #24
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20002000 	.word	0x20002000
 8004924:	00000400 	.word	0x00000400
 8004928:	20000b78 	.word	0x20000b78
 800492c:	20000b90 	.word	0x20000b90

08004930 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800493c:	480d      	ldr	r0, [pc, #52]	; (8004974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800493e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004940:	480d      	ldr	r0, [pc, #52]	; (8004978 <LoopForever+0x6>)
  ldr r1, =_edata
 8004942:	490e      	ldr	r1, [pc, #56]	; (800497c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004944:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <LoopForever+0xe>)
  movs r3, #0
 8004946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004948:	e002      	b.n	8004950 <LoopCopyDataInit>

0800494a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800494a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800494c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800494e:	3304      	adds	r3, #4

08004950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004954:	d3f9      	bcc.n	800494a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004956:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004958:	4c0b      	ldr	r4, [pc, #44]	; (8004988 <LoopForever+0x16>)
  movs r3, #0
 800495a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800495c:	e001      	b.n	8004962 <LoopFillZerobss>

0800495e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800495e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004960:	3204      	adds	r2, #4

08004962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004964:	d3fb      	bcc.n	800495e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004966:	f7ff ffe3 	bl	8004930 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800496a:	f005 fc95 	bl	800a298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800496e:	f7fd ff07 	bl	8002780 <main>

08004972 <LoopForever>:

LoopForever:
    b LoopForever
 8004972:	e7fe      	b.n	8004972 <LoopForever>
  ldr   r0, =_estack
 8004974:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800497c:	20000688 	.word	0x20000688
  ldr r2, =_sidata
 8004980:	0800bb40 	.word	0x0800bb40
  ldr r2, =_sbss
 8004984:	20000688 	.word	0x20000688
  ldr r4, =_ebss
 8004988:	20000b90 	.word	0x20000b90

0800498c <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800498c:	e7fe      	b.n	800498c <CEC_CAN_IRQHandler>
	...

08004990 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_Init+0x24>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_Init+0x24>)
 800499a:	2110      	movs	r1, #16
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80049a0:	2003      	movs	r0, #3
 80049a2:	f000 f809 	bl	80049b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049a6:	f7ff fc97 	bl	80042d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	40022000 	.word	0x40022000

080049b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049c0:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <HAL_InitTick+0x5c>)
 80049c2:	681c      	ldr	r4, [r3, #0]
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_InitTick+0x60>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	0019      	movs	r1, r3
 80049ca:	23fa      	movs	r3, #250	; 0xfa
 80049cc:	0098      	lsls	r0, r3, #2
 80049ce:	f7fb fbad 	bl	800012c <__udivsi3>
 80049d2:	0003      	movs	r3, r0
 80049d4:	0019      	movs	r1, r3
 80049d6:	0020      	movs	r0, r4
 80049d8:	f7fb fba8 	bl	800012c <__udivsi3>
 80049dc:	0003      	movs	r3, r0
 80049de:	0018      	movs	r0, r3
 80049e0:	f000 fe7f 	bl	80056e2 <HAL_SYSTICK_Config>
 80049e4:	1e03      	subs	r3, r0, #0
 80049e6:	d001      	beq.n	80049ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e00f      	b.n	8004a0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d80b      	bhi.n	8004a0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	2301      	movs	r3, #1
 80049f6:	425b      	negs	r3, r3
 80049f8:	2200      	movs	r2, #0
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 fe4c 	bl	8005698 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_InitTick+0x64>)
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b003      	add	sp, #12
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	20000618 	.word	0x20000618
 8004a18:	20000620 	.word	0x20000620
 8004a1c:	2000061c 	.word	0x2000061c

08004a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_IncTick+0x1c>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	001a      	movs	r2, r3
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_IncTick+0x20>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	18d2      	adds	r2, r2, r3
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_IncTick+0x20>)
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	20000620 	.word	0x20000620
 8004a40:	20000b7c 	.word	0x20000b7c

08004a44 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  return uwTick;
 8004a48:	4b02      	ldr	r3, [pc, #8]	; (8004a54 <HAL_GetTick+0x10>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	20000b7c 	.word	0x20000b7c

08004a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a60:	f7ff fff0 	bl	8004a44 <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	d005      	beq.n	8004a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a72:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <HAL_Delay+0x44>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	001a      	movs	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	189b      	adds	r3, r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	f7ff ffe0 	bl	8004a44 <HAL_GetTick>
 8004a84:	0002      	movs	r2, r0
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d8f7      	bhi.n	8004a80 <HAL_Delay+0x28>
  {
  }
}
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b004      	add	sp, #16
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	20000620 	.word	0x20000620

08004aa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aa8:	230f      	movs	r3, #15
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e125      	b.n	8004d0a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2234      	movs	r2, #52	; 0x34
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7ff fc22 	bl	8004320 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d000      	beq.n	8004ae8 <HAL_ADC_Init+0x48>
 8004ae6:	e103      	b.n	8004cf0 <HAL_ADC_Init+0x250>
 8004ae8:	230f      	movs	r3, #15
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d000      	beq.n	8004af4 <HAL_ADC_Init+0x54>
 8004af2:	e0fd      	b.n	8004cf0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2204      	movs	r2, #4
 8004afc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004afe:	d000      	beq.n	8004b02 <HAL_ADC_Init+0x62>
 8004b00:	e0f6      	b.n	8004cf0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	4a83      	ldr	r2, [pc, #524]	; (8004d14 <HAL_ADC_Init+0x274>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2203      	movs	r2, #3
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d112      	bne.n	8004b46 <HAL_ADC_Init+0xa6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2201      	movs	r2, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d009      	beq.n	8004b42 <HAL_ADC_Init+0xa2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	401a      	ands	r2, r3
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d101      	bne.n	8004b46 <HAL_ADC_Init+0xa6>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_ADC_Init+0xa8>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d116      	bne.n	8004b7a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2218      	movs	r2, #24
 8004b54:	4393      	bics	r3, r2
 8004b56:	0019      	movs	r1, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	0899      	lsrs	r1, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4964      	ldr	r1, [pc, #400]	; (8004d18 <HAL_ADC_Init+0x278>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	7e1b      	ldrb	r3, [r3, #24]
 8004b8e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	7e5b      	ldrb	r3, [r3, #25]
 8004b94:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b96:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	7e9b      	ldrb	r3, [r3, #26]
 8004b9c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004b9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d002      	beq.n	8004bae <HAL_ADC_Init+0x10e>
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	015b      	lsls	r3, r3, #5
 8004bac:	e000      	b.n	8004bb0 <HAL_ADC_Init+0x110>
 8004bae:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004bb0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004bb6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d101      	bne.n	8004bc4 <HAL_ADC_Init+0x124>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	e000      	b.n	8004bc6 <HAL_ADC_Init+0x126>
 8004bc4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004bc6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2124      	movs	r1, #36	; 0x24
 8004bcc:	5c5b      	ldrb	r3, [r3, r1]
 8004bce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004bd0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7edb      	ldrb	r3, [r3, #27]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d115      	bne.n	8004c0c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	7e9b      	ldrb	r3, [r3, #26]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2280      	movs	r2, #128	; 0x80
 8004bec:	0252      	lsls	r2, r2, #9
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	e00b      	b.n	8004c0c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	2201      	movs	r2, #1
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	23c2      	movs	r3, #194	; 0xc2
 8004c12:	33ff      	adds	r3, #255	; 0xff
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d007      	beq.n	8004c28 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004c20:	4313      	orrs	r3, r2
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68d9      	ldr	r1, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	055b      	lsls	r3, r3, #21
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d01b      	beq.n	8004c7c <HAL_ADC_Init+0x1dc>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d017      	beq.n	8004c7c <HAL_ADC_Init+0x1dc>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d013      	beq.n	8004c7c <HAL_ADC_Init+0x1dc>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d00f      	beq.n	8004c7c <HAL_ADC_Init+0x1dc>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d00b      	beq.n	8004c7c <HAL_ADC_Init+0x1dc>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	2b05      	cmp	r3, #5
 8004c6a:	d007      	beq.n	8004c7c <HAL_ADC_Init+0x1dc>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d003      	beq.n	8004c7c <HAL_ADC_Init+0x1dc>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	2b07      	cmp	r3, #7
 8004c7a:	d112      	bne.n	8004ca2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2107      	movs	r1, #7
 8004c88:	438a      	bics	r2, r1
 8004c8a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6959      	ldr	r1, [r3, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	2207      	movs	r2, #7
 8004c98:	401a      	ands	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_ADC_Init+0x27c>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d10b      	bne.n	8004cca <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	4393      	bics	r3, r2
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004cc8:	e01c      	b.n	8004d04 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	2212      	movs	r2, #18
 8004cd0:	4393      	bics	r3, r2
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	2201      	movs	r2, #1
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004ce6:	230f      	movs	r3, #15
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004cee:	e009      	b.n	8004d04 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004cfc:	230f      	movs	r3, #15
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004d04:	230f      	movs	r3, #15
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	781b      	ldrb	r3, [r3, #0]
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b004      	add	sp, #16
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	fffffefd 	.word	0xfffffefd
 8004d18:	fffe0219 	.word	0xfffe0219
 8004d1c:	833fffe7 	.word	0x833fffe7

08004d20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d2c:	2317      	movs	r3, #23
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d15e      	bne.n	8004dfe <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2234      	movs	r2, #52	; 0x34
 8004d44:	5c9b      	ldrb	r3, [r3, r2]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_ADC_Start_DMA+0x2e>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e05e      	b.n	8004e0c <HAL_ADC_Start_DMA+0xec>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2234      	movs	r2, #52	; 0x34
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	7e5b      	ldrb	r3, [r3, #25]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d007      	beq.n	8004d6e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004d5e:	2317      	movs	r3, #23
 8004d60:	18fc      	adds	r4, r7, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f000 fa3b 	bl	80051e0 <ADC_Enable>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004d6e:	2317      	movs	r3, #23
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d146      	bne.n	8004e06 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <HAL_ADC_Start_DMA+0xf4>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	0052      	lsls	r2, r2, #1
 8004d84:	431a      	orrs	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2234      	movs	r2, #52	; 0x34
 8004d94:	2100      	movs	r1, #0
 8004d96:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <HAL_ADC_Start_DMA+0xf8>)
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <HAL_ADC_Start_DMA+0xfc>)
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <HAL_ADC_Start_DMA+0x100>)
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	221c      	movs	r2, #28
 8004db6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3340      	adds	r3, #64	; 0x40
 8004de2:	0019      	movs	r1, r3
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f000 fcd0 	bl	800578c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2104      	movs	r1, #4
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e003      	b.n	8004e06 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004dfe:	2317      	movs	r3, #23
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004e06:	2317      	movs	r3, #23
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b007      	add	sp, #28
 8004e12:	bd90      	pop	{r4, r7, pc}
 8004e14:	fffff0fe 	.word	0xfffff0fe
 8004e18:	080052e9 	.word	0x080052e9
 8004e1c:	0800539d 	.word	0x0800539d
 8004e20:	080053bb 	.word	0x080053bb

08004e24 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2204      	movs	r2, #4
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d106      	bne.n	8004e48 <HAL_ADC_IRQHandler+0x24>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2204      	movs	r2, #4
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d00d      	beq.n	8004e64 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2208      	movs	r2, #8
 8004e50:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d14f      	bne.n	8004ef6 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d148      	bne.n	8004ef6 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	2210      	movs	r2, #16
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d106      	bne.n	8004e7c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	2280      	movs	r2, #128	; 0x80
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	23c0      	movs	r3, #192	; 0xc0
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	4013      	ands	r3, r2
 8004e88:	d12d      	bne.n	8004ee6 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d129      	bne.n	8004ee6 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d122      	bne.n	8004ee6 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d110      	bne.n	8004ece <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	210c      	movs	r1, #12
 8004eb8:	438a      	bics	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	4a33      	ldr	r2, [pc, #204]	; (8004f90 <HAL_ADC_IRQHandler+0x16c>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
 8004ecc:	e00b      	b.n	8004ee6 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	2201      	movs	r2, #1
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f7fc fc6b 	bl	80017c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	220c      	movs	r2, #12
 8004ef4:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2280      	movs	r2, #128	; 0x80
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d115      	bne.n	8004f30 <HAL_ADC_IRQHandler+0x10c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2280      	movs	r2, #128	; 0x80
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d10e      	bne.n	8004f30 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	2280      	movs	r2, #128	; 0x80
 8004f18:	0252      	lsls	r2, r2, #9
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 f83e 	bl	8004fa4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2280      	movs	r2, #128	; 0x80
 8004f2e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2210      	movs	r2, #16
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d123      	bne.n	8004f86 <HAL_ADC_IRQHandler+0x162>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2210      	movs	r2, #16
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d11c      	bne.n	8004f86 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d006      	beq.n	8004f62 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10d      	bne.n	8004f7e <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	2202      	movs	r2, #2
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2210      	movs	r2, #16
 8004f74:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 f81b 	bl	8004fb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2210      	movs	r2, #16
 8004f84:	601a      	str	r2, [r3, #0]
  }

}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b002      	add	sp, #8
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	fffffefe 	.word	0xfffffefe

08004f94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b002      	add	sp, #8
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fce:	230f      	movs	r3, #15
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	055b      	lsls	r3, r3, #21
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d011      	beq.n	800500a <HAL_ADC_ConfigChannel+0x46>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d00d      	beq.n	800500a <HAL_ADC_ConfigChannel+0x46>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d009      	beq.n	800500a <HAL_ADC_ConfigChannel+0x46>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d005      	beq.n	800500a <HAL_ADC_ConfigChannel+0x46>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	2b04      	cmp	r3, #4
 8005004:	d001      	beq.n	800500a <HAL_ADC_ConfigChannel+0x46>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2234      	movs	r2, #52	; 0x34
 800500e:	5c9b      	ldrb	r3, [r3, r2]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x54>
 8005014:	2302      	movs	r3, #2
 8005016:	e0d0      	b.n	80051ba <HAL_ADC_ConfigChannel+0x1f6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2234      	movs	r2, #52	; 0x34
 800501c:	2101      	movs	r1, #1
 800501e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2204      	movs	r2, #4
 8005028:	4013      	ands	r3, r2
 800502a:	d000      	beq.n	800502e <HAL_ADC_ConfigChannel+0x6a>
 800502c:	e0b4      	b.n	8005198 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4a64      	ldr	r2, [pc, #400]	; (80051c4 <HAL_ADC_ConfigChannel+0x200>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d100      	bne.n	800503a <HAL_ADC_ConfigChannel+0x76>
 8005038:	e082      	b.n	8005140 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2201      	movs	r2, #1
 8005046:	409a      	lsls	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	055b      	lsls	r3, r3, #21
 8005058:	429a      	cmp	r2, r3
 800505a:	d037      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d033      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	2b02      	cmp	r3, #2
 800506a:	d02f      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	2b03      	cmp	r3, #3
 8005072:	d02b      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	2b04      	cmp	r3, #4
 800507a:	d027      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	2b05      	cmp	r3, #5
 8005082:	d023      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	2b06      	cmp	r3, #6
 800508a:	d01f      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	2b07      	cmp	r3, #7
 8005092:	d01b      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	2107      	movs	r1, #7
 80050a0:	400b      	ands	r3, r1
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d012      	beq.n	80050cc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2107      	movs	r1, #7
 80050b2:	438a      	bics	r2, r1
 80050b4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6959      	ldr	r1, [r3, #20]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2207      	movs	r2, #7
 80050c2:	401a      	ands	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d007      	beq.n	80050e4 <HAL_ADC_ConfigChannel+0x120>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b11      	cmp	r3, #17
 80050da:	d003      	beq.n	80050e4 <HAL_ADC_ConfigChannel+0x120>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b12      	cmp	r3, #18
 80050e2:	d163      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80050e4:	4b38      	ldr	r3, [pc, #224]	; (80051c8 <HAL_ADC_ConfigChannel+0x204>)
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d009      	beq.n	8005104 <HAL_ADC_ConfigChannel+0x140>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b11      	cmp	r3, #17
 80050f6:	d102      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x13a>
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	03db      	lsls	r3, r3, #15
 80050fc:	e004      	b.n	8005108 <HAL_ADC_ConfigChannel+0x144>
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	045b      	lsls	r3, r3, #17
 8005102:	e001      	b.n	8005108 <HAL_ADC_ConfigChannel+0x144>
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	4a2f      	ldr	r2, [pc, #188]	; (80051c8 <HAL_ADC_ConfigChannel+0x204>)
 800510a:	430b      	orrs	r3, r1
 800510c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b10      	cmp	r3, #16
 8005114:	d14a      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005116:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <HAL_ADC_ConfigChannel+0x208>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	492d      	ldr	r1, [pc, #180]	; (80051d0 <HAL_ADC_ConfigChannel+0x20c>)
 800511c:	0018      	movs	r0, r3
 800511e:	f7fb f805 	bl	800012c <__udivsi3>
 8005122:	0003      	movs	r3, r0
 8005124:	001a      	movs	r2, r3
 8005126:	0013      	movs	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	189b      	adds	r3, r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005130:	e002      	b.n	8005138 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	3b01      	subs	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f9      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x16e>
 800513e:	e035      	b.n	80051ac <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2101      	movs	r1, #1
 800514c:	4099      	lsls	r1, r3
 800514e:	000b      	movs	r3, r1
 8005150:	43d9      	mvns	r1, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	400a      	ands	r2, r1
 8005158:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b10      	cmp	r3, #16
 8005160:	d007      	beq.n	8005172 <HAL_ADC_ConfigChannel+0x1ae>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b11      	cmp	r3, #17
 8005168:	d003      	beq.n	8005172 <HAL_ADC_ConfigChannel+0x1ae>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b12      	cmp	r3, #18
 8005170:	d11c      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <HAL_ADC_ConfigChannel+0x204>)
 8005174:	6819      	ldr	r1, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d007      	beq.n	800518e <HAL_ADC_ConfigChannel+0x1ca>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b11      	cmp	r3, #17
 8005184:	d101      	bne.n	800518a <HAL_ADC_ConfigChannel+0x1c6>
 8005186:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <HAL_ADC_ConfigChannel+0x210>)
 8005188:	e002      	b.n	8005190 <HAL_ADC_ConfigChannel+0x1cc>
 800518a:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_ADC_ConfigChannel+0x214>)
 800518c:	e000      	b.n	8005190 <HAL_ADC_ConfigChannel+0x1cc>
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <HAL_ADC_ConfigChannel+0x218>)
 8005190:	4a0d      	ldr	r2, [pc, #52]	; (80051c8 <HAL_ADC_ConfigChannel+0x204>)
 8005192:	400b      	ands	r3, r1
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e009      	b.n	80051ac <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	2220      	movs	r2, #32
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80051a4:	230f      	movs	r3, #15
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2234      	movs	r2, #52	; 0x34
 80051b0:	2100      	movs	r1, #0
 80051b2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80051b4:	230f      	movs	r3, #15
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	781b      	ldrb	r3, [r3, #0]
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b004      	add	sp, #16
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	00001001 	.word	0x00001001
 80051c8:	40012708 	.word	0x40012708
 80051cc:	20000618 	.word	0x20000618
 80051d0:	000f4240 	.word	0x000f4240
 80051d4:	ffbfffff 	.word	0xffbfffff
 80051d8:	feffffff 	.word	0xfeffffff
 80051dc:	ff7fffff 	.word	0xff7fffff

080051e0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2203      	movs	r2, #3
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d112      	bne.n	8005224 <ADC_Enable+0x44>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2201      	movs	r2, #1
 8005206:	4013      	ands	r3, r2
 8005208:	2b01      	cmp	r3, #1
 800520a:	d009      	beq.n	8005220 <ADC_Enable+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	401a      	ands	r2, r3
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	429a      	cmp	r2, r3
 800521e:	d101      	bne.n	8005224 <ADC_Enable+0x44>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <ADC_Enable+0x46>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d152      	bne.n	80052d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <ADC_Enable+0xfc>)
 8005232:	4013      	ands	r3, r2
 8005234:	d00d      	beq.n	8005252 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	2210      	movs	r2, #16
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	2201      	movs	r2, #1
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e03f      	b.n	80052d2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2101      	movs	r1, #1
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005262:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <ADC_Enable+0x100>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	491f      	ldr	r1, [pc, #124]	; (80052e4 <ADC_Enable+0x104>)
 8005268:	0018      	movs	r0, r3
 800526a:	f7fa ff5f 	bl	800012c <__udivsi3>
 800526e:	0003      	movs	r3, r0
 8005270:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005272:	e002      	b.n	800527a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3b01      	subs	r3, #1
 8005278:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f9      	bne.n	8005274 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005280:	f7ff fbe0 	bl	8004a44 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005288:	e01b      	b.n	80052c2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800528a:	f7ff fbdb 	bl	8004a44 <HAL_GetTick>
 800528e:	0002      	movs	r2, r0
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d914      	bls.n	80052c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2201      	movs	r2, #1
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d00d      	beq.n	80052c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	2210      	movs	r2, #16
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	2201      	movs	r2, #1
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e007      	b.n	80052d2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d1dc      	bne.n	800528a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	0018      	movs	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b004      	add	sp, #16
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	80000017 	.word	0x80000017
 80052e0:	20000618 	.word	0x20000618
 80052e4:	000f4240 	.word	0x000f4240

080052e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	2250      	movs	r2, #80	; 0x50
 80052fc:	4013      	ands	r3, r2
 80052fe:	d140      	bne.n	8005382 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	2280      	movs	r2, #128	; 0x80
 8005306:	0092      	lsls	r2, r2, #2
 8005308:	431a      	orrs	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	23c0      	movs	r3, #192	; 0xc0
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	4013      	ands	r3, r2
 800531a:	d12d      	bne.n	8005378 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005320:	2b00      	cmp	r3, #0
 8005322:	d129      	bne.n	8005378 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2208      	movs	r2, #8
 800532c:	4013      	ands	r3, r2
 800532e:	2b08      	cmp	r3, #8
 8005330:	d122      	bne.n	8005378 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2204      	movs	r2, #4
 800533a:	4013      	ands	r3, r2
 800533c:	d110      	bne.n	8005360 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	210c      	movs	r1, #12
 800534a:	438a      	bics	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	4a11      	ldr	r2, [pc, #68]	; (8005398 <ADC_DMAConvCplt+0xb0>)
 8005354:	4013      	ands	r3, r2
 8005356:	2201      	movs	r2, #1
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
 800535e:	e00b      	b.n	8005378 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	2220      	movs	r2, #32
 8005366:	431a      	orrs	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	2201      	movs	r2, #1
 8005372:	431a      	orrs	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	0018      	movs	r0, r3
 800537c:	f7fc fa22 	bl	80017c4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8005380:	e005      	b.n	800538e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	0010      	movs	r0, r2
 800538c:	4798      	blx	r3
}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	fffffefe 	.word	0xfffffefe

0800539c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7ff fdf1 	bl	8004f94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b004      	add	sp, #16
 80053b8:	bd80      	pop	{r7, pc}

080053ba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	2204      	movs	r2, #4
 80053da:	431a      	orrs	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7ff fde6 	bl	8004fb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053e8:	46c0      	nop			; (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b004      	add	sp, #16
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f8:	2317      	movs	r3, #23
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2234      	movs	r2, #52	; 0x34
 800540c:	5c9b      	ldrb	r3, [r3, r2]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_ADCEx_Calibration_Start+0x26>
 8005412:	2302      	movs	r3, #2
 8005414:	e08d      	b.n	8005532 <HAL_ADCEx_Calibration_Start+0x142>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2234      	movs	r2, #52	; 0x34
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2203      	movs	r2, #3
 8005426:	4013      	ands	r3, r2
 8005428:	2b01      	cmp	r3, #1
 800542a:	d112      	bne.n	8005452 <HAL_ADCEx_Calibration_Start+0x62>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	4013      	ands	r3, r2
 8005436:	2b01      	cmp	r3, #1
 8005438:	d009      	beq.n	800544e <HAL_ADCEx_Calibration_Start+0x5e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	401a      	ands	r2, r3
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	429a      	cmp	r2, r3
 800544c:	d101      	bne.n	8005452 <HAL_ADCEx_Calibration_Start+0x62>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_ADCEx_Calibration_Start+0x64>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d15b      	bne.n	8005510 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	4a37      	ldr	r2, [pc, #220]	; (800553c <HAL_ADCEx_Calibration_Start+0x14c>)
 800545e:	4013      	ands	r3, r2
 8005460:	2202      	movs	r2, #2
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2203      	movs	r2, #3
 8005470:	4013      	ands	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2103      	movs	r1, #3
 8005480:	438a      	bics	r2, r1
 8005482:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2180      	movs	r1, #128	; 0x80
 8005490:	0609      	lsls	r1, r1, #24
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8005496:	f7ff fad5 	bl	8004a44 <HAL_GetTick>
 800549a:	0003      	movs	r3, r0
 800549c:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800549e:	e01d      	b.n	80054dc <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80054a0:	f7ff fad0 	bl	8004a44 <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d916      	bls.n	80054dc <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	0fdb      	lsrs	r3, r3, #31
 80054b6:	07da      	lsls	r2, r3, #31
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	429a      	cmp	r2, r3
 80054be:	d10d      	bne.n	80054dc <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	2212      	movs	r2, #18
 80054c6:	4393      	bics	r3, r2
 80054c8:	2210      	movs	r2, #16
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2234      	movs	r2, #52	; 0x34
 80054d4:	2100      	movs	r1, #0
 80054d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e02a      	b.n	8005532 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	0fdb      	lsrs	r3, r3, #31
 80054e4:	07da      	lsls	r2, r3, #31
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	061b      	lsls	r3, r3, #24
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d0d8      	beq.n	80054a0 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68d9      	ldr	r1, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	2203      	movs	r2, #3
 8005504:	4393      	bics	r3, r2
 8005506:	2201      	movs	r2, #1
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
 800550e:	e009      	b.n	8005524 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	2220      	movs	r2, #32
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800551c:	2317      	movs	r3, #23
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2234      	movs	r2, #52	; 0x34
 8005528:	2100      	movs	r1, #0
 800552a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800552c:	2317      	movs	r3, #23
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	781b      	ldrb	r3, [r3, #0]
}
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b006      	add	sp, #24
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	fffffefd 	.word	0xfffffefd

08005540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	0002      	movs	r2, r0
 8005548:	1dfb      	adds	r3, r7, #7
 800554a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800554c:	1dfb      	adds	r3, r7, #7
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b7f      	cmp	r3, #127	; 0x7f
 8005552:	d809      	bhi.n	8005568 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005554:	1dfb      	adds	r3, r7, #7
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	001a      	movs	r2, r3
 800555a:	231f      	movs	r3, #31
 800555c:	401a      	ands	r2, r3
 800555e:	4b04      	ldr	r3, [pc, #16]	; (8005570 <__NVIC_EnableIRQ+0x30>)
 8005560:	2101      	movs	r1, #1
 8005562:	4091      	lsls	r1, r2
 8005564:	000a      	movs	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
  }
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b002      	add	sp, #8
 800556e:	bd80      	pop	{r7, pc}
 8005570:	e000e100 	.word	0xe000e100

08005574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	0002      	movs	r2, r0
 800557c:	6039      	str	r1, [r7, #0]
 800557e:	1dfb      	adds	r3, r7, #7
 8005580:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005582:	1dfb      	adds	r3, r7, #7
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b7f      	cmp	r3, #127	; 0x7f
 8005588:	d828      	bhi.n	80055dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800558a:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <__NVIC_SetPriority+0xd4>)
 800558c:	1dfb      	adds	r3, r7, #7
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	b25b      	sxtb	r3, r3
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	33c0      	adds	r3, #192	; 0xc0
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	589b      	ldr	r3, [r3, r2]
 800559a:	1dfa      	adds	r2, r7, #7
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	0011      	movs	r1, r2
 80055a0:	2203      	movs	r2, #3
 80055a2:	400a      	ands	r2, r1
 80055a4:	00d2      	lsls	r2, r2, #3
 80055a6:	21ff      	movs	r1, #255	; 0xff
 80055a8:	4091      	lsls	r1, r2
 80055aa:	000a      	movs	r2, r1
 80055ac:	43d2      	mvns	r2, r2
 80055ae:	401a      	ands	r2, r3
 80055b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	019b      	lsls	r3, r3, #6
 80055b6:	22ff      	movs	r2, #255	; 0xff
 80055b8:	401a      	ands	r2, r3
 80055ba:	1dfb      	adds	r3, r7, #7
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	0018      	movs	r0, r3
 80055c0:	2303      	movs	r3, #3
 80055c2:	4003      	ands	r3, r0
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055c8:	481f      	ldr	r0, [pc, #124]	; (8005648 <__NVIC_SetPriority+0xd4>)
 80055ca:	1dfb      	adds	r3, r7, #7
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	b25b      	sxtb	r3, r3
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	430a      	orrs	r2, r1
 80055d4:	33c0      	adds	r3, #192	; 0xc0
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80055da:	e031      	b.n	8005640 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055dc:	4a1b      	ldr	r2, [pc, #108]	; (800564c <__NVIC_SetPriority+0xd8>)
 80055de:	1dfb      	adds	r3, r7, #7
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	0019      	movs	r1, r3
 80055e4:	230f      	movs	r3, #15
 80055e6:	400b      	ands	r3, r1
 80055e8:	3b08      	subs	r3, #8
 80055ea:	089b      	lsrs	r3, r3, #2
 80055ec:	3306      	adds	r3, #6
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	18d3      	adds	r3, r2, r3
 80055f2:	3304      	adds	r3, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	1dfa      	adds	r2, r7, #7
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	0011      	movs	r1, r2
 80055fc:	2203      	movs	r2, #3
 80055fe:	400a      	ands	r2, r1
 8005600:	00d2      	lsls	r2, r2, #3
 8005602:	21ff      	movs	r1, #255	; 0xff
 8005604:	4091      	lsls	r1, r2
 8005606:	000a      	movs	r2, r1
 8005608:	43d2      	mvns	r2, r2
 800560a:	401a      	ands	r2, r3
 800560c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	019b      	lsls	r3, r3, #6
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	401a      	ands	r2, r3
 8005616:	1dfb      	adds	r3, r7, #7
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	0018      	movs	r0, r3
 800561c:	2303      	movs	r3, #3
 800561e:	4003      	ands	r3, r0
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005624:	4809      	ldr	r0, [pc, #36]	; (800564c <__NVIC_SetPriority+0xd8>)
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	001c      	movs	r4, r3
 800562c:	230f      	movs	r3, #15
 800562e:	4023      	ands	r3, r4
 8005630:	3b08      	subs	r3, #8
 8005632:	089b      	lsrs	r3, r3, #2
 8005634:	430a      	orrs	r2, r1
 8005636:	3306      	adds	r3, #6
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	18c3      	adds	r3, r0, r3
 800563c:	3304      	adds	r3, #4
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b003      	add	sp, #12
 8005646:	bd90      	pop	{r4, r7, pc}
 8005648:	e000e100 	.word	0xe000e100
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	1e5a      	subs	r2, r3, #1
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	045b      	lsls	r3, r3, #17
 8005660:	429a      	cmp	r2, r3
 8005662:	d301      	bcc.n	8005668 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005664:	2301      	movs	r3, #1
 8005666:	e010      	b.n	800568a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <SysTick_Config+0x44>)
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	3a01      	subs	r2, #1
 800566e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005670:	2301      	movs	r3, #1
 8005672:	425b      	negs	r3, r3
 8005674:	2103      	movs	r1, #3
 8005676:	0018      	movs	r0, r3
 8005678:	f7ff ff7c 	bl	8005574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <SysTick_Config+0x44>)
 800567e:	2200      	movs	r2, #0
 8005680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005682:	4b04      	ldr	r3, [pc, #16]	; (8005694 <SysTick_Config+0x44>)
 8005684:	2207      	movs	r2, #7
 8005686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005688:	2300      	movs	r3, #0
}
 800568a:	0018      	movs	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	b002      	add	sp, #8
 8005690:	bd80      	pop	{r7, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	e000e010 	.word	0xe000e010

08005698 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	210f      	movs	r1, #15
 80056a4:	187b      	adds	r3, r7, r1
 80056a6:	1c02      	adds	r2, r0, #0
 80056a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	187b      	adds	r3, r7, r1
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	b25b      	sxtb	r3, r3
 80056b2:	0011      	movs	r1, r2
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7ff ff5d 	bl	8005574 <__NVIC_SetPriority>
}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	46bd      	mov	sp, r7
 80056be:	b004      	add	sp, #16
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	0002      	movs	r2, r0
 80056ca:	1dfb      	adds	r3, r7, #7
 80056cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056ce:	1dfb      	adds	r3, r7, #7
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	b25b      	sxtb	r3, r3
 80056d4:	0018      	movs	r0, r3
 80056d6:	f7ff ff33 	bl	8005540 <__NVIC_EnableIRQ>
}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	46bd      	mov	sp, r7
 80056de:	b002      	add	sp, #8
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f7ff ffaf 	bl	8005650 <SysTick_Config>
 80056f2:	0003      	movs	r3, r0
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e036      	b.n	8005780 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2221      	movs	r2, #33	; 0x21
 8005716:	2102      	movs	r1, #2
 8005718:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_DMA_Init+0x8c>)
 8005726:	4013      	ands	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800573e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	0018      	movs	r0, r3
 8005764:	f000 f998 	bl	8005a98 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2221      	movs	r2, #33	; 0x21
 8005772:	2101      	movs	r1, #1
 8005774:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}  
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b004      	add	sp, #16
 8005786:	bd80      	pop	{r7, pc}
 8005788:	ffffc00f 	.word	0xffffc00f

0800578c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800579a:	2317      	movs	r3, #23
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	5c9b      	ldrb	r3, [r3, r2]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_DMA_Start_IT+0x24>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e04f      	b.n	8005850 <HAL_DMA_Start_IT+0xc4>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	2101      	movs	r1, #1
 80057b6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2221      	movs	r2, #33	; 0x21
 80057bc:	5c9b      	ldrb	r3, [r3, r2]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d13a      	bne.n	800583a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2221      	movs	r2, #33	; 0x21
 80057c8:	2102      	movs	r1, #2
 80057ca:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2101      	movs	r1, #1
 80057de:	438a      	bics	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f928 	bl	8005a3e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	210e      	movs	r1, #14
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e00f      	b.n	8005828 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	210a      	movs	r1, #10
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2104      	movs	r1, #4
 8005824:	438a      	bics	r2, r1
 8005826:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2101      	movs	r1, #1
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e007      	b.n	800584a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005842:	2317      	movs	r3, #23
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	2202      	movs	r2, #2
 8005848:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800584a:	2317      	movs	r3, #23
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	781b      	ldrb	r3, [r3, #0]
} 
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b006      	add	sp, #24
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	210f      	movs	r1, #15
 8005862:	187b      	adds	r3, r7, r1
 8005864:	2200      	movs	r2, #0
 8005866:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2221      	movs	r2, #33	; 0x21
 800586c:	5c9b      	ldrb	r3, [r3, r2]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d006      	beq.n	8005882 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2204      	movs	r2, #4
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800587a:	187b      	adds	r3, r7, r1
 800587c:	2201      	movs	r2, #1
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	e028      	b.n	80058d4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	210e      	movs	r1, #14
 800588e:	438a      	bics	r2, r1
 8005890:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2101      	movs	r1, #1
 800589e:	438a      	bics	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	2101      	movs	r1, #1
 80058ac:	4091      	lsls	r1, r2
 80058ae:	000a      	movs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2221      	movs	r2, #33	; 0x21
 80058b6:	2101      	movs	r1, #1
 80058b8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	2100      	movs	r1, #0
 80058c0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	0010      	movs	r0, r2
 80058d2:	4798      	blx	r3
    } 
  }
  return status;
 80058d4:	230f      	movs	r3, #15
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	781b      	ldrb	r3, [r3, #0]
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b004      	add	sp, #16
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	2204      	movs	r2, #4
 8005900:	409a      	lsls	r2, r3
 8005902:	0013      	movs	r3, r2
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4013      	ands	r3, r2
 8005908:	d024      	beq.n	8005954 <HAL_DMA_IRQHandler+0x72>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2204      	movs	r2, #4
 800590e:	4013      	ands	r3, r2
 8005910:	d020      	beq.n	8005954 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2220      	movs	r2, #32
 800591a:	4013      	ands	r3, r2
 800591c:	d107      	bne.n	800592e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2104      	movs	r1, #4
 800592a:	438a      	bics	r2, r1
 800592c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	2104      	movs	r1, #4
 8005938:	4091      	lsls	r1, r2
 800593a:	000a      	movs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d100      	bne.n	8005948 <HAL_DMA_IRQHandler+0x66>
 8005946:	e06a      	b.n	8005a1e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	0010      	movs	r0, r2
 8005950:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005952:	e064      	b.n	8005a1e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	2202      	movs	r2, #2
 800595a:	409a      	lsls	r2, r3
 800595c:	0013      	movs	r3, r2
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4013      	ands	r3, r2
 8005962:	d02b      	beq.n	80059bc <HAL_DMA_IRQHandler+0xda>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2202      	movs	r2, #2
 8005968:	4013      	ands	r3, r2
 800596a:	d027      	beq.n	80059bc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2220      	movs	r2, #32
 8005974:	4013      	ands	r3, r2
 8005976:	d10b      	bne.n	8005990 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	210a      	movs	r1, #10
 8005984:	438a      	bics	r2, r1
 8005986:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2221      	movs	r2, #33	; 0x21
 800598c:	2101      	movs	r1, #1
 800598e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	2102      	movs	r1, #2
 800599a:	4091      	lsls	r1, r2
 800599c:	000a      	movs	r2, r1
 800599e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	2100      	movs	r1, #0
 80059a6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d036      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	0010      	movs	r0, r2
 80059b8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80059ba:	e030      	b.n	8005a1e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	2208      	movs	r2, #8
 80059c2:	409a      	lsls	r2, r3
 80059c4:	0013      	movs	r3, r2
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4013      	ands	r3, r2
 80059ca:	d028      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x13c>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2208      	movs	r2, #8
 80059d0:	4013      	ands	r3, r2
 80059d2:	d024      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	210e      	movs	r1, #14
 80059e0:	438a      	bics	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ec:	2101      	movs	r1, #1
 80059ee:	4091      	lsls	r1, r2
 80059f0:	000a      	movs	r2, r1
 80059f2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2221      	movs	r2, #33	; 0x21
 80059fe:	2101      	movs	r1, #1
 8005a00:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	2100      	movs	r1, #0
 8005a08:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	0010      	movs	r0, r2
 8005a1a:	4798      	blx	r3
    }
   }
}  
 8005a1c:	e7ff      	b.n	8005a1e <HAL_DMA_IRQHandler+0x13c>
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b004      	add	sp, #16
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2221      	movs	r2, #33	; 0x21
 8005a32:	5c9b      	ldrb	r3, [r3, r2]
 8005a34:	b2db      	uxtb	r3, r3
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b002      	add	sp, #8
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	2101      	movs	r1, #1
 8005a56:	4091      	lsls	r1, r2
 8005a58:	000a      	movs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d108      	bne.n	8005a7e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a7c:	e007      	b.n	8005a8e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	60da      	str	r2, [r3, #12]
}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b004      	add	sp, #16
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <DMA_CalcBaseAndBitshift+0x30>)
 8005aa6:	4694      	mov	ip, r2
 8005aa8:	4463      	add	r3, ip
 8005aaa:	2114      	movs	r1, #20
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7fa fb3d 	bl	800012c <__udivsi3>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	009a      	lsls	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a03      	ldr	r2, [pc, #12]	; (8005acc <DMA_CalcBaseAndBitshift+0x34>)
 8005abe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b002      	add	sp, #8
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	bffdfff8 	.word	0xbffdfff8
 8005acc:	40020000 	.word	0x40020000

08005ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ade:	e14f      	b.n	8005d80 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4091      	lsls	r1, r2
 8005aea:	000a      	movs	r2, r1
 8005aec:	4013      	ands	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d100      	bne.n	8005af8 <HAL_GPIO_Init+0x28>
 8005af6:	e140      	b.n	8005d7a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2203      	movs	r2, #3
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d005      	beq.n	8005b10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2203      	movs	r2, #3
 8005b0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d130      	bne.n	8005b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	0013      	movs	r3, r2
 8005b20:	43da      	mvns	r2, r3
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4013      	ands	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	409a      	lsls	r2, r3
 8005b32:	0013      	movs	r3, r2
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b46:	2201      	movs	r2, #1
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	0013      	movs	r3, r2
 8005b4e:	43da      	mvns	r2, r3
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4013      	ands	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	091b      	lsrs	r3, r3, #4
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	401a      	ands	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	409a      	lsls	r2, r3
 8005b64:	0013      	movs	r3, r2
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2203      	movs	r2, #3
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d017      	beq.n	8005bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	2203      	movs	r2, #3
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	0013      	movs	r3, r2
 8005b8e:	43da      	mvns	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4013      	ands	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	0013      	movs	r3, r2
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d123      	bne.n	8005c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	08da      	lsrs	r2, r3, #3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3208      	adds	r2, #8
 8005bc2:	0092      	lsls	r2, r2, #2
 8005bc4:	58d3      	ldr	r3, [r2, r3]
 8005bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2207      	movs	r2, #7
 8005bcc:	4013      	ands	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	220f      	movs	r2, #15
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	0013      	movs	r3, r2
 8005bd6:	43da      	mvns	r2, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2107      	movs	r1, #7
 8005be6:	400b      	ands	r3, r1
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	409a      	lsls	r2, r3
 8005bec:	0013      	movs	r3, r2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	08da      	lsrs	r2, r3, #3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3208      	adds	r2, #8
 8005bfc:	0092      	lsls	r2, r2, #2
 8005bfe:	6939      	ldr	r1, [r7, #16]
 8005c00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	0013      	movs	r3, r2
 8005c12:	43da      	mvns	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4013      	ands	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2203      	movs	r2, #3
 8005c20:	401a      	ands	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	409a      	lsls	r2, r3
 8005c28:	0013      	movs	r3, r2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	23c0      	movs	r3, #192	; 0xc0
 8005c3c:	029b      	lsls	r3, r3, #10
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d100      	bne.n	8005c44 <HAL_GPIO_Init+0x174>
 8005c42:	e09a      	b.n	8005d7a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c44:	4b54      	ldr	r3, [pc, #336]	; (8005d98 <HAL_GPIO_Init+0x2c8>)
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	4b53      	ldr	r3, [pc, #332]	; (8005d98 <HAL_GPIO_Init+0x2c8>)
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	619a      	str	r2, [r3, #24]
 8005c50:	4b51      	ldr	r3, [pc, #324]	; (8005d98 <HAL_GPIO_Init+0x2c8>)
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2201      	movs	r2, #1
 8005c56:	4013      	ands	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]
 8005c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c5c:	4a4f      	ldr	r2, [pc, #316]	; (8005d9c <HAL_GPIO_Init+0x2cc>)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	089b      	lsrs	r3, r3, #2
 8005c62:	3302      	adds	r3, #2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	589b      	ldr	r3, [r3, r2]
 8005c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	4013      	ands	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	220f      	movs	r2, #15
 8005c74:	409a      	lsls	r2, r3
 8005c76:	0013      	movs	r3, r2
 8005c78:	43da      	mvns	r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	2390      	movs	r3, #144	; 0x90
 8005c84:	05db      	lsls	r3, r3, #23
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d013      	beq.n	8005cb2 <HAL_GPIO_Init+0x1e2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a44      	ldr	r2, [pc, #272]	; (8005da0 <HAL_GPIO_Init+0x2d0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00d      	beq.n	8005cae <HAL_GPIO_Init+0x1de>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a43      	ldr	r2, [pc, #268]	; (8005da4 <HAL_GPIO_Init+0x2d4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <HAL_GPIO_Init+0x1da>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a42      	ldr	r2, [pc, #264]	; (8005da8 <HAL_GPIO_Init+0x2d8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <HAL_GPIO_Init+0x1d6>
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e006      	b.n	8005cb4 <HAL_GPIO_Init+0x1e4>
 8005ca6:	2305      	movs	r3, #5
 8005ca8:	e004      	b.n	8005cb4 <HAL_GPIO_Init+0x1e4>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e002      	b.n	8005cb4 <HAL_GPIO_Init+0x1e4>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <HAL_GPIO_Init+0x1e4>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	2103      	movs	r1, #3
 8005cb8:	400a      	ands	r2, r1
 8005cba:	0092      	lsls	r2, r2, #2
 8005cbc:	4093      	lsls	r3, r2
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005cc4:	4935      	ldr	r1, [pc, #212]	; (8005d9c <HAL_GPIO_Init+0x2cc>)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	089b      	lsrs	r3, r3, #2
 8005cca:	3302      	adds	r3, #2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <HAL_GPIO_Init+0x2dc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	025b      	lsls	r3, r3, #9
 8005cea:	4013      	ands	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <HAL_GPIO_Init+0x2dc>)
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005cfc:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <HAL_GPIO_Init+0x2dc>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	43da      	mvns	r2, r3
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	029b      	lsls	r3, r3, #10
 8005d14:	4013      	ands	r3, r2
 8005d16:	d003      	beq.n	8005d20 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005d20:	4b22      	ldr	r3, [pc, #136]	; (8005dac <HAL_GPIO_Init+0x2dc>)
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d26:	4b21      	ldr	r3, [pc, #132]	; (8005dac <HAL_GPIO_Init+0x2dc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	43da      	mvns	r2, r3
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4013      	ands	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	035b      	lsls	r3, r3, #13
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d4a:	4b18      	ldr	r3, [pc, #96]	; (8005dac <HAL_GPIO_Init+0x2dc>)
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005d50:	4b16      	ldr	r3, [pc, #88]	; (8005dac <HAL_GPIO_Init+0x2dc>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	43da      	mvns	r2, r3
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	039b      	lsls	r3, r3, #14
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <HAL_GPIO_Init+0x2dc>)
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	40da      	lsrs	r2, r3
 8005d88:	1e13      	subs	r3, r2, #0
 8005d8a:	d000      	beq.n	8005d8e <HAL_GPIO_Init+0x2be>
 8005d8c:	e6a8      	b.n	8005ae0 <HAL_GPIO_Init+0x10>
  } 
}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b006      	add	sp, #24
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	48000400 	.word	0x48000400
 8005da4:	48000800 	.word	0x48000800
 8005da8:	48000c00 	.word	0x48000c00
 8005dac:	40010400 	.word	0x40010400

08005db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	000a      	movs	r2, r1
 8005dba:	1cbb      	adds	r3, r7, #2
 8005dbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	1cba      	adds	r2, r7, #2
 8005dc4:	8812      	ldrh	r2, [r2, #0]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005dca:	230f      	movs	r3, #15
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e003      	b.n	8005ddc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dd4:	230f      	movs	r3, #15
 8005dd6:	18fb      	adds	r3, r7, r3
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005ddc:	230f      	movs	r3, #15
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	781b      	ldrb	r3, [r3, #0]
  }
 8005de2:	0018      	movs	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b004      	add	sp, #16
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	0008      	movs	r0, r1
 8005df4:	0011      	movs	r1, r2
 8005df6:	1cbb      	adds	r3, r7, #2
 8005df8:	1c02      	adds	r2, r0, #0
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	1c7b      	adds	r3, r7, #1
 8005dfe:	1c0a      	adds	r2, r1, #0
 8005e00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e02:	1c7b      	adds	r3, r7, #1
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e0a:	1cbb      	adds	r3, r7, #2
 8005e0c:	881a      	ldrh	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e12:	e003      	b.n	8005e1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e14:	1cbb      	adds	r3, r7, #2
 8005e16:	881a      	ldrh	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b002      	add	sp, #8
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	000a      	movs	r2, r1
 8005e2e:	1cbb      	adds	r3, r7, #2
 8005e30:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e38:	1cbb      	adds	r3, r7, #2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	041a      	lsls	r2, r3, #16
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	1cb9      	adds	r1, r7, #2
 8005e48:	8809      	ldrh	r1, [r1, #0]
 8005e4a:	400b      	ands	r3, r1
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	619a      	str	r2, [r3, #24]
}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b004      	add	sp, #16
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e082      	b.n	8005f74 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2241      	movs	r2, #65	; 0x41
 8005e72:	5c9b      	ldrb	r3, [r3, r2]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d107      	bne.n	8005e8a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2240      	movs	r2, #64	; 0x40
 8005e7e:	2100      	movs	r1, #0
 8005e80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	0018      	movs	r0, r3
 8005e86:	f7fe fac5 	bl	8004414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2241      	movs	r2, #65	; 0x41
 8005e8e:	2124      	movs	r1, #36	; 0x24
 8005e90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	438a      	bics	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4934      	ldr	r1, [pc, #208]	; (8005f7c <HAL_I2C_Init+0x120>)
 8005eac:	400a      	ands	r2, r1
 8005eae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4931      	ldr	r1, [pc, #196]	; (8005f80 <HAL_I2C_Init+0x124>)
 8005ebc:	400a      	ands	r2, r1
 8005ebe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d108      	bne.n	8005eda <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2180      	movs	r1, #128	; 0x80
 8005ed2:	0209      	lsls	r1, r1, #8
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	e007      	b.n	8005eea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2184      	movs	r1, #132	; 0x84
 8005ee4:	0209      	lsls	r1, r1, #8
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d104      	bne.n	8005efc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2280      	movs	r2, #128	; 0x80
 8005ef8:	0112      	lsls	r2, r2, #4
 8005efa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	491f      	ldr	r1, [pc, #124]	; (8005f84 <HAL_I2C_Init+0x128>)
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	491a      	ldr	r1, [pc, #104]	; (8005f80 <HAL_I2C_Init+0x124>)
 8005f18:	400a      	ands	r2, r1
 8005f1a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	431a      	orrs	r2, r3
 8005f26:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69d9      	ldr	r1, [r3, #28]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2101      	movs	r1, #1
 8005f52:	430a      	orrs	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2241      	movs	r2, #65	; 0x41
 8005f60:	2120      	movs	r1, #32
 8005f62:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2242      	movs	r2, #66	; 0x42
 8005f6e:	2100      	movs	r1, #0
 8005f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	0018      	movs	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	f0ffffff 	.word	0xf0ffffff
 8005f80:	ffff7fff 	.word	0xffff7fff
 8005f84:	02008000 	.word	0x02008000

08005f88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	0008      	movs	r0, r1
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	0019      	movs	r1, r3
 8005f96:	230a      	movs	r3, #10
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	1c02      	adds	r2, r0, #0
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	1c0a      	adds	r2, r1, #0
 8005fa4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2241      	movs	r2, #65	; 0x41
 8005faa:	5c9b      	ldrb	r3, [r3, r2]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d000      	beq.n	8005fb4 <HAL_I2C_Master_Transmit+0x2c>
 8005fb2:	e0e7      	b.n	8006184 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2240      	movs	r2, #64	; 0x40
 8005fb8:	5c9b      	ldrb	r3, [r3, r2]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_I2C_Master_Transmit+0x3a>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e0e1      	b.n	8006186 <HAL_I2C_Master_Transmit+0x1fe>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2240      	movs	r2, #64	; 0x40
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fca:	f7fe fd3b 	bl	8004a44 <HAL_GetTick>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	0219      	lsls	r1, r3, #8
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	2319      	movs	r3, #25
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f000 fe76 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8005fe4:	1e03      	subs	r3, r0, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0cc      	b.n	8006186 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2241      	movs	r2, #65	; 0x41
 8005ff0:	2121      	movs	r1, #33	; 0x21
 8005ff2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2242      	movs	r2, #66	; 0x42
 8005ff8:	2110      	movs	r1, #16
 8005ffa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2208      	movs	r2, #8
 800600c:	18ba      	adds	r2, r7, r2
 800600e:	8812      	ldrh	r2, [r2, #0]
 8006010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2bff      	cmp	r3, #255	; 0xff
 8006020:	d911      	bls.n	8006046 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602c:	b2da      	uxtb	r2, r3
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	045c      	lsls	r4, r3, #17
 8006032:	230a      	movs	r3, #10
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	8819      	ldrh	r1, [r3, #0]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	4b55      	ldr	r3, [pc, #340]	; (8006190 <HAL_I2C_Master_Transmit+0x208>)
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	0023      	movs	r3, r4
 8006040:	f000 ff7a 	bl	8006f38 <I2C_TransferConfig>
 8006044:	e075      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006054:	b2da      	uxtb	r2, r3
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	049c      	lsls	r4, r3, #18
 800605a:	230a      	movs	r3, #10
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	8819      	ldrh	r1, [r3, #0]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	4b4b      	ldr	r3, [pc, #300]	; (8006190 <HAL_I2C_Master_Transmit+0x208>)
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	0023      	movs	r3, r4
 8006068:	f000 ff66 	bl	8006f38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800606c:	e061      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	0018      	movs	r0, r3
 8006076:	f000 fe6a 	bl	8006d4e <I2C_WaitOnTXISFlagUntilTimeout>
 800607a:	1e03      	subs	r3, r0, #0
 800607c:	d001      	beq.n	8006082 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e081      	b.n	8006186 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d03a      	beq.n	8006132 <HAL_I2C_Master_Transmit+0x1aa>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d136      	bne.n	8006132 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	0013      	movs	r3, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	f000 fdfd 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 80060d6:	1e03      	subs	r3, r0, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e053      	b.n	8006186 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2bff      	cmp	r3, #255	; 0xff
 80060e6:	d911      	bls.n	800610c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	22ff      	movs	r2, #255	; 0xff
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	045c      	lsls	r4, r3, #17
 80060f8:	230a      	movs	r3, #10
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	8819      	ldrh	r1, [r3, #0]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	2300      	movs	r3, #0
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	0023      	movs	r3, r4
 8006106:	f000 ff17 	bl	8006f38 <I2C_TransferConfig>
 800610a:	e012      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	b2da      	uxtb	r2, r3
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	049c      	lsls	r4, r3, #18
 8006120:	230a      	movs	r3, #10
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	8819      	ldrh	r1, [r3, #0]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	2300      	movs	r3, #0
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	0023      	movs	r3, r4
 800612e:	f000 ff03 	bl	8006f38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d198      	bne.n	800606e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	0018      	movs	r0, r3
 8006144:	f000 fe42 	bl	8006dcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006148:	1e03      	subs	r3, r0, #0
 800614a:	d001      	beq.n	8006150 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e01a      	b.n	8006186 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2220      	movs	r2, #32
 8006156:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	490c      	ldr	r1, [pc, #48]	; (8006194 <HAL_I2C_Master_Transmit+0x20c>)
 8006164:	400a      	ands	r2, r1
 8006166:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2241      	movs	r2, #65	; 0x41
 800616c:	2120      	movs	r1, #32
 800616e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2242      	movs	r2, #66	; 0x42
 8006174:	2100      	movs	r1, #0
 8006176:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2240      	movs	r2, #64	; 0x40
 800617c:	2100      	movs	r1, #0
 800617e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	0018      	movs	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	b007      	add	sp, #28
 800618c:	bd90      	pop	{r4, r7, pc}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	80002000 	.word	0x80002000
 8006194:	fe00e800 	.word	0xfe00e800

08006198 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	68f9      	ldr	r1, [r7, #12]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
  }
}
 80061c4:	46c0      	nop			; (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b004      	add	sp, #16
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	001a      	movs	r2, r3
 80061ea:	2301      	movs	r3, #1
 80061ec:	4013      	ands	r3, r2
 80061ee:	d010      	beq.n	8006212 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	09db      	lsrs	r3, r3, #7
 80061f4:	001a      	movs	r2, r3
 80061f6:	2301      	movs	r3, #1
 80061f8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80061fa:	d00a      	beq.n	8006212 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006200:	2201      	movs	r2, #1
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2280      	movs	r2, #128	; 0x80
 800620e:	0052      	lsls	r2, r2, #1
 8006210:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	0a9b      	lsrs	r3, r3, #10
 8006216:	001a      	movs	r2, r3
 8006218:	2301      	movs	r3, #1
 800621a:	4013      	ands	r3, r2
 800621c:	d010      	beq.n	8006240 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	09db      	lsrs	r3, r3, #7
 8006222:	001a      	movs	r2, r3
 8006224:	2301      	movs	r3, #1
 8006226:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006228:	d00a      	beq.n	8006240 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	2208      	movs	r2, #8
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2280      	movs	r2, #128	; 0x80
 800623c:	00d2      	lsls	r2, r2, #3
 800623e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	0a5b      	lsrs	r3, r3, #9
 8006244:	001a      	movs	r2, r3
 8006246:	2301      	movs	r3, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d010      	beq.n	800626e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	09db      	lsrs	r3, r3, #7
 8006250:	001a      	movs	r2, r3
 8006252:	2301      	movs	r3, #1
 8006254:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006256:	d00a      	beq.n	800626e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625c:	2202      	movs	r2, #2
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2280      	movs	r2, #128	; 0x80
 800626a:	0092      	lsls	r2, r2, #2
 800626c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	220b      	movs	r2, #11
 8006278:	4013      	ands	r3, r2
 800627a:	d005      	beq.n	8006288 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	0011      	movs	r1, r2
 8006282:	0018      	movs	r0, r3
 8006284:	f000 fbd8 	bl	8006a38 <I2C_ITError>
  }
}
 8006288:	46c0      	nop			; (mov r8, r8)
 800628a:	46bd      	mov	sp, r7
 800628c:	b006      	add	sp, #24
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b002      	add	sp, #8
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80062a8:	46c0      	nop			; (mov r8, r8)
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b002      	add	sp, #8
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	0008      	movs	r0, r1
 80062ba:	0011      	movs	r1, r2
 80062bc:	1cfb      	adds	r3, r7, #3
 80062be:	1c02      	adds	r2, r0, #0
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	003b      	movs	r3, r7
 80062c4:	1c0a      	adds	r2, r1, #0
 80062c6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b002      	add	sp, #8
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	46bd      	mov	sp, r7
 80062dc:	b002      	add	sp, #8
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80062e8:	46c0      	nop			; (mov r8, r8)
 80062ea:	46bd      	mov	sp, r7
 80062ec:	b002      	add	sp, #8
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b002      	add	sp, #8
 80062fe:	bd80      	pop	{r7, pc}

08006300 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2240      	movs	r2, #64	; 0x40
 800631a:	5c9b      	ldrb	r3, [r3, r2]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <I2C_Slave_ISR_IT+0x24>
 8006320:	2302      	movs	r3, #2
 8006322:	e0fa      	b.n	800651a <I2C_Slave_ISR_IT+0x21a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2240      	movs	r2, #64	; 0x40
 8006328:	2101      	movs	r1, #1
 800632a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	001a      	movs	r2, r3
 8006332:	2301      	movs	r3, #1
 8006334:	4013      	ands	r3, r2
 8006336:	d00b      	beq.n	8006350 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	001a      	movs	r2, r3
 800633e:	2301      	movs	r3, #1
 8006340:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006342:	d005      	beq.n	8006350 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	0011      	movs	r1, r2
 800634a:	0018      	movs	r0, r3
 800634c:	f000 f9f6 	bl	800673c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	091b      	lsrs	r3, r3, #4
 8006354:	001a      	movs	r2, r3
 8006356:	2301      	movs	r3, #1
 8006358:	4013      	ands	r3, r2
 800635a:	d054      	beq.n	8006406 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	091b      	lsrs	r3, r3, #4
 8006360:	001a      	movs	r2, r3
 8006362:	2301      	movs	r3, #1
 8006364:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006366:	d04e      	beq.n	8006406 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d12d      	bne.n	80063ce <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2241      	movs	r2, #65	; 0x41
 8006376:	5c9b      	ldrb	r3, [r3, r2]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b28      	cmp	r3, #40	; 0x28
 800637c:	d10b      	bne.n	8006396 <I2C_Slave_ISR_IT+0x96>
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	049b      	lsls	r3, r3, #18
 8006384:	429a      	cmp	r2, r3
 8006386:	d106      	bne.n	8006396 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	0011      	movs	r1, r2
 800638e:	0018      	movs	r0, r3
 8006390:	f000 faf8 	bl	8006984 <I2C_ITListenCplt>
 8006394:	e036      	b.n	8006404 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2241      	movs	r2, #65	; 0x41
 800639a:	5c9b      	ldrb	r3, [r3, r2]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b29      	cmp	r3, #41	; 0x29
 80063a0:	d110      	bne.n	80063c4 <I2C_Slave_ISR_IT+0xc4>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4a5f      	ldr	r2, [pc, #380]	; (8006524 <I2C_Slave_ISR_IT+0x224>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00c      	beq.n	80063c4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2210      	movs	r2, #16
 80063b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f000 fc4a 	bl	8006c4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	0018      	movs	r0, r3
 80063be:	f000 f957 	bl	8006670 <I2C_ITSlaveSeqCplt>
 80063c2:	e01f      	b.n	8006404 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2210      	movs	r2, #16
 80063ca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80063cc:	e09d      	b.n	800650a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2210      	movs	r2, #16
 80063d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	2204      	movs	r2, #4
 80063dc:	431a      	orrs	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <I2C_Slave_ISR_IT+0xf4>
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	045b      	lsls	r3, r3, #17
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d000      	beq.n	80063f4 <I2C_Slave_ISR_IT+0xf4>
 80063f2:	e08a      	b.n	800650a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	0011      	movs	r1, r2
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 fb1b 	bl	8006a38 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006402:	e082      	b.n	800650a <I2C_Slave_ISR_IT+0x20a>
 8006404:	e081      	b.n	800650a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	089b      	lsrs	r3, r3, #2
 800640a:	001a      	movs	r2, r3
 800640c:	2301      	movs	r3, #1
 800640e:	4013      	ands	r3, r2
 8006410:	d031      	beq.n	8006476 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	089b      	lsrs	r3, r3, #2
 8006416:	001a      	movs	r2, r3
 8006418:	2301      	movs	r3, #1
 800641a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800641c:	d02b      	beq.n	8006476 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d018      	beq.n	800645a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d154      	bne.n	800650e <I2C_Slave_ISR_IT+0x20e>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4a2f      	ldr	r2, [pc, #188]	; (8006524 <I2C_Slave_ISR_IT+0x224>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d050      	beq.n	800650e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	0018      	movs	r0, r3
 8006470:	f000 f8fe 	bl	8006670 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006474:	e04b      	b.n	800650e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	08db      	lsrs	r3, r3, #3
 800647a:	001a      	movs	r2, r3
 800647c:	2301      	movs	r3, #1
 800647e:	4013      	ands	r3, r2
 8006480:	d00c      	beq.n	800649c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	08db      	lsrs	r3, r3, #3
 8006486:	001a      	movs	r2, r3
 8006488:	2301      	movs	r3, #1
 800648a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800648c:	d006      	beq.n	800649c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	0011      	movs	r1, r2
 8006494:	0018      	movs	r0, r3
 8006496:	f000 f847 	bl	8006528 <I2C_ITAddrCplt>
 800649a:	e039      	b.n	8006510 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	001a      	movs	r2, r3
 80064a2:	2301      	movs	r3, #1
 80064a4:	4013      	ands	r3, r2
 80064a6:	d033      	beq.n	8006510 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	001a      	movs	r2, r3
 80064ae:	2301      	movs	r3, #1
 80064b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064b2:	d02d      	beq.n	8006510 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d018      	beq.n	80064f0 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80064ee:	e00f      	b.n	8006510 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	2380      	movs	r3, #128	; 0x80
 80064f4:	045b      	lsls	r3, r3, #17
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d002      	beq.n	8006500 <I2C_Slave_ISR_IT+0x200>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	0018      	movs	r0, r3
 8006504:	f000 f8b4 	bl	8006670 <I2C_ITSlaveSeqCplt>
 8006508:	e002      	b.n	8006510 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	e000      	b.n	8006510 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800650e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2240      	movs	r2, #64	; 0x40
 8006514:	2100      	movs	r1, #0
 8006516:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	0018      	movs	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	b006      	add	sp, #24
 8006520:	bd80      	pop	{r7, pc}
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	ffff0000 	.word	0xffff0000

08006528 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006528:	b5b0      	push	{r4, r5, r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2241      	movs	r2, #65	; 0x41
 8006536:	5c9b      	ldrb	r3, [r3, r2]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	001a      	movs	r2, r3
 800653c:	2328      	movs	r3, #40	; 0x28
 800653e:	4013      	ands	r3, r2
 8006540:	2b28      	cmp	r3, #40	; 0x28
 8006542:	d000      	beq.n	8006546 <I2C_ITAddrCplt+0x1e>
 8006544:	e088      	b.n	8006658 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	b2da      	uxtb	r2, r3
 8006550:	250f      	movs	r5, #15
 8006552:	197b      	adds	r3, r7, r5
 8006554:	2101      	movs	r1, #1
 8006556:	400a      	ands	r2, r1
 8006558:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	b29a      	uxth	r2, r3
 8006564:	200c      	movs	r0, #12
 8006566:	183b      	adds	r3, r7, r0
 8006568:	21fe      	movs	r1, #254	; 0xfe
 800656a:	400a      	ands	r2, r1
 800656c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	b29a      	uxth	r2, r3
 8006576:	240a      	movs	r4, #10
 8006578:	193b      	adds	r3, r7, r4
 800657a:	0592      	lsls	r2, r2, #22
 800657c:	0d92      	lsrs	r2, r2, #22
 800657e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	b29a      	uxth	r2, r3
 8006588:	2308      	movs	r3, #8
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	21fe      	movs	r1, #254	; 0xfe
 800658e:	400a      	ands	r2, r1
 8006590:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d148      	bne.n	800662c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800659a:	0021      	movs	r1, r4
 800659c:	187b      	adds	r3, r7, r1
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	09db      	lsrs	r3, r3, #7
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	183b      	adds	r3, r7, r0
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	4053      	eors	r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	001a      	movs	r2, r3
 80065ae:	2306      	movs	r3, #6
 80065b0:	4013      	ands	r3, r2
 80065b2:	d120      	bne.n	80065f6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80065b4:	183b      	adds	r3, r7, r0
 80065b6:	187a      	adds	r2, r7, r1
 80065b8:	8812      	ldrh	r2, [r2, #0]
 80065ba:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d14c      	bne.n	8006668 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2208      	movs	r2, #8
 80065da:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2240      	movs	r2, #64	; 0x40
 80065e0:	2100      	movs	r1, #0
 80065e2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065e4:	183b      	adds	r3, r7, r0
 80065e6:	881a      	ldrh	r2, [r3, #0]
 80065e8:	197b      	adds	r3, r7, r5
 80065ea:	7819      	ldrb	r1, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	0018      	movs	r0, r3
 80065f0:	f7ff fe5e 	bl	80062b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80065f4:	e038      	b.n	8006668 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80065f6:	240c      	movs	r4, #12
 80065f8:	193b      	adds	r3, r7, r4
 80065fa:	2208      	movs	r2, #8
 80065fc:	18ba      	adds	r2, r7, r2
 80065fe:	8812      	ldrh	r2, [r2, #0]
 8006600:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006602:	2380      	movs	r3, #128	; 0x80
 8006604:	021a      	lsls	r2, r3, #8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0011      	movs	r1, r2
 800660a:	0018      	movs	r0, r3
 800660c:	f000 fcca 	bl	8006fa4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2240      	movs	r2, #64	; 0x40
 8006614:	2100      	movs	r1, #0
 8006616:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006618:	193b      	adds	r3, r7, r4
 800661a:	881a      	ldrh	r2, [r3, #0]
 800661c:	230f      	movs	r3, #15
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	7819      	ldrb	r1, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0018      	movs	r0, r3
 8006626:	f7ff fe43 	bl	80062b0 <HAL_I2C_AddrCallback>
}
 800662a:	e01d      	b.n	8006668 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	021a      	lsls	r2, r3, #8
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	0011      	movs	r1, r2
 8006634:	0018      	movs	r0, r3
 8006636:	f000 fcb5 	bl	8006fa4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2240      	movs	r2, #64	; 0x40
 800663e:	2100      	movs	r1, #0
 8006640:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006642:	230c      	movs	r3, #12
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	881a      	ldrh	r2, [r3, #0]
 8006648:	230f      	movs	r3, #15
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	7819      	ldrb	r1, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f7ff fe2d 	bl	80062b0 <HAL_I2C_AddrCallback>
}
 8006656:	e007      	b.n	8006668 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2208      	movs	r2, #8
 800665e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2240      	movs	r2, #64	; 0x40
 8006664:	2100      	movs	r1, #0
 8006666:	5499      	strb	r1, [r3, r2]
}
 8006668:	46c0      	nop			; (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b004      	add	sp, #16
 800666e:	bdb0      	pop	{r4, r5, r7, pc}

08006670 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2242      	movs	r2, #66	; 0x42
 8006684:	2100      	movs	r1, #0
 8006686:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	0b9b      	lsrs	r3, r3, #14
 800668c:	001a      	movs	r2, r3
 800668e:	2301      	movs	r3, #1
 8006690:	4013      	ands	r3, r2
 8006692:	d008      	beq.n	80066a6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4925      	ldr	r1, [pc, #148]	; (8006734 <I2C_ITSlaveSeqCplt+0xc4>)
 80066a0:	400a      	ands	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e00d      	b.n	80066c2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	0bdb      	lsrs	r3, r3, #15
 80066aa:	001a      	movs	r2, r3
 80066ac:	2301      	movs	r3, #1
 80066ae:	4013      	ands	r3, r2
 80066b0:	d007      	beq.n	80066c2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	491e      	ldr	r1, [pc, #120]	; (8006738 <I2C_ITSlaveSeqCplt+0xc8>)
 80066be:	400a      	ands	r2, r1
 80066c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2241      	movs	r2, #65	; 0x41
 80066c6:	5c9b      	ldrb	r3, [r3, r2]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b29      	cmp	r3, #41	; 0x29
 80066cc:	d114      	bne.n	80066f8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2241      	movs	r2, #65	; 0x41
 80066d2:	2128      	movs	r1, #40	; 0x28
 80066d4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2221      	movs	r2, #33	; 0x21
 80066da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2101      	movs	r1, #1
 80066e0:	0018      	movs	r0, r3
 80066e2:	f000 fc5f 	bl	8006fa4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2240      	movs	r2, #64	; 0x40
 80066ea:	2100      	movs	r1, #0
 80066ec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7ff fdcd 	bl	8006290 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80066f6:	e019      	b.n	800672c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2241      	movs	r2, #65	; 0x41
 80066fc:	5c9b      	ldrb	r3, [r3, r2]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b2a      	cmp	r3, #42	; 0x2a
 8006702:	d113      	bne.n	800672c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2241      	movs	r2, #65	; 0x41
 8006708:	2128      	movs	r1, #40	; 0x28
 800670a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2222      	movs	r2, #34	; 0x22
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2102      	movs	r1, #2
 8006716:	0018      	movs	r0, r3
 8006718:	f000 fc44 	bl	8006fa4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	2100      	movs	r1, #0
 8006722:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	0018      	movs	r0, r3
 8006728:	f7ff fdba 	bl	80062a0 <HAL_I2C_SlaveRxCpltCallback>
}
 800672c:	46c0      	nop			; (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	b004      	add	sp, #16
 8006732:	bd80      	pop	{r7, pc}
 8006734:	ffffbfff 	.word	0xffffbfff
 8006738:	ffff7fff 	.word	0xffff7fff

0800673c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006752:	200f      	movs	r0, #15
 8006754:	183b      	adds	r3, r7, r0
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	2141      	movs	r1, #65	; 0x41
 800675a:	5c52      	ldrb	r2, [r2, r1]
 800675c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2220      	movs	r2, #32
 8006764:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006766:	183b      	adds	r3, r7, r0
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b21      	cmp	r3, #33	; 0x21
 800676c:	d003      	beq.n	8006776 <I2C_ITSlaveCplt+0x3a>
 800676e:	183b      	adds	r3, r7, r0
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b29      	cmp	r3, #41	; 0x29
 8006774:	d109      	bne.n	800678a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006776:	4a7d      	ldr	r2, [pc, #500]	; (800696c <I2C_ITSlaveCplt+0x230>)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0011      	movs	r1, r2
 800677c:	0018      	movs	r0, r3
 800677e:	f000 fc11 	bl	8006fa4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2221      	movs	r2, #33	; 0x21
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
 8006788:	e011      	b.n	80067ae <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800678a:	220f      	movs	r2, #15
 800678c:	18bb      	adds	r3, r7, r2
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b22      	cmp	r3, #34	; 0x22
 8006792:	d003      	beq.n	800679c <I2C_ITSlaveCplt+0x60>
 8006794:	18bb      	adds	r3, r7, r2
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b2a      	cmp	r3, #42	; 0x2a
 800679a:	d108      	bne.n	80067ae <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800679c:	4a74      	ldr	r2, [pc, #464]	; (8006970 <I2C_ITSlaveCplt+0x234>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	0011      	movs	r1, r2
 80067a2:	0018      	movs	r0, r3
 80067a4:	f000 fbfe 	bl	8006fa4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2222      	movs	r2, #34	; 0x22
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	0209      	lsls	r1, r1, #8
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	496a      	ldr	r1, [pc, #424]	; (8006974 <I2C_ITSlaveCplt+0x238>)
 80067cc:	400a      	ands	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	0018      	movs	r0, r3
 80067d4:	f000 fa3b 	bl	8006c4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	0b9b      	lsrs	r3, r3, #14
 80067dc:	001a      	movs	r2, r3
 80067de:	2301      	movs	r3, #1
 80067e0:	4013      	ands	r3, r2
 80067e2:	d013      	beq.n	800680c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4962      	ldr	r1, [pc, #392]	; (8006978 <I2C_ITSlaveCplt+0x23c>)
 80067f0:	400a      	ands	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d020      	beq.n	800683e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	855a      	strh	r2, [r3, #42]	; 0x2a
 800680a:	e018      	b.n	800683e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	0bdb      	lsrs	r3, r3, #15
 8006810:	001a      	movs	r2, r3
 8006812:	2301      	movs	r3, #1
 8006814:	4013      	ands	r3, r2
 8006816:	d012      	beq.n	800683e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4956      	ldr	r1, [pc, #344]	; (800697c <I2C_ITSlaveCplt+0x240>)
 8006824:	400a      	ands	r2, r1
 8006826:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	089b      	lsrs	r3, r3, #2
 8006842:	001a      	movs	r2, r3
 8006844:	2301      	movs	r3, #1
 8006846:	4013      	ands	r3, r2
 8006848:	d020      	beq.n	800688c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2204      	movs	r2, #4
 800684e:	4393      	bics	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	2204      	movs	r2, #4
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2242      	movs	r2, #66	; 0x42
 80068a6:	2100      	movs	r1, #0
 80068a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d013      	beq.n	80068e0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	0011      	movs	r1, r2
 80068c0:	0018      	movs	r0, r3
 80068c2:	f000 f8b9 	bl	8006a38 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2241      	movs	r2, #65	; 0x41
 80068ca:	5c9b      	ldrb	r3, [r3, r2]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b28      	cmp	r3, #40	; 0x28
 80068d0:	d147      	bne.n	8006962 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	0011      	movs	r1, r2
 80068d8:	0018      	movs	r0, r3
 80068da:	f000 f853 	bl	8006984 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068de:	e040      	b.n	8006962 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a26      	ldr	r2, [pc, #152]	; (8006980 <I2C_ITSlaveCplt+0x244>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d016      	beq.n	8006918 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff febf 	bl	8006670 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a22      	ldr	r2, [pc, #136]	; (8006980 <I2C_ITSlaveCplt+0x244>)
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2241      	movs	r2, #65	; 0x41
 80068fc:	2120      	movs	r1, #32
 80068fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2240      	movs	r2, #64	; 0x40
 800690a:	2100      	movs	r1, #0
 800690c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0018      	movs	r0, r3
 8006912:	f7ff fcdd 	bl	80062d0 <HAL_I2C_ListenCpltCallback>
}
 8006916:	e024      	b.n	8006962 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2241      	movs	r2, #65	; 0x41
 800691c:	5c9b      	ldrb	r3, [r3, r2]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b22      	cmp	r3, #34	; 0x22
 8006922:	d10f      	bne.n	8006944 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2241      	movs	r2, #65	; 0x41
 8006928:	2120      	movs	r1, #32
 800692a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2240      	movs	r2, #64	; 0x40
 8006936:	2100      	movs	r1, #0
 8006938:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	0018      	movs	r0, r3
 800693e:	f7ff fcaf 	bl	80062a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006942:	e00e      	b.n	8006962 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2241      	movs	r2, #65	; 0x41
 8006948:	2120      	movs	r1, #32
 800694a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2240      	movs	r2, #64	; 0x40
 8006956:	2100      	movs	r1, #0
 8006958:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0018      	movs	r0, r3
 800695e:	f7ff fc97 	bl	8006290 <HAL_I2C_SlaveTxCpltCallback>
}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	46bd      	mov	sp, r7
 8006966:	b006      	add	sp, #24
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	00008001 	.word	0x00008001
 8006970:	00008002 	.word	0x00008002
 8006974:	fe00e800 	.word	0xfe00e800
 8006978:	ffffbfff 	.word	0xffffbfff
 800697c:	ffff7fff 	.word	0xffff7fff
 8006980:	ffff0000 	.word	0xffff0000

08006984 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a27      	ldr	r2, [pc, #156]	; (8006a30 <I2C_ITListenCplt+0xac>)
 8006992:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2241      	movs	r2, #65	; 0x41
 800699e:	2120      	movs	r1, #32
 80069a0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2242      	movs	r2, #66	; 0x42
 80069a6:	2100      	movs	r1, #0
 80069a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	089b      	lsrs	r3, r3, #2
 80069b4:	001a      	movs	r2, r3
 80069b6:	2301      	movs	r3, #1
 80069b8:	4013      	ands	r3, r2
 80069ba:	d022      	beq.n	8006a02 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	2204      	movs	r2, #4
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a02:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <I2C_ITListenCplt+0xb0>)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	0011      	movs	r1, r2
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 facb 	bl	8006fa4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2210      	movs	r2, #16
 8006a14:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2240      	movs	r2, #64	; 0x40
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7ff fc55 	bl	80062d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b002      	add	sp, #8
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	ffff0000 	.word	0xffff0000
 8006a34:	00008003 	.word	0x00008003

08006a38 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006a42:	200f      	movs	r0, #15
 8006a44:	183b      	adds	r3, r7, r0
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	2141      	movs	r1, #65	; 0x41
 8006a4a:	5c52      	ldrb	r2, [r2, r1]
 8006a4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2242      	movs	r2, #66	; 0x42
 8006a52:	2100      	movs	r1, #0
 8006a54:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a62      	ldr	r2, [pc, #392]	; (8006be4 <I2C_ITError+0x1ac>)
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a6e:	183b      	adds	r3, r7, r0
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b28      	cmp	r3, #40	; 0x28
 8006a74:	d007      	beq.n	8006a86 <I2C_ITError+0x4e>
 8006a76:	183b      	adds	r3, r7, r0
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b29      	cmp	r3, #41	; 0x29
 8006a7c:	d003      	beq.n	8006a86 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006a7e:	183b      	adds	r3, r7, r0
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b2a      	cmp	r3, #42	; 0x2a
 8006a84:	d10c      	bne.n	8006aa0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2103      	movs	r1, #3
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f000 fa8a 	bl	8006fa4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2241      	movs	r2, #65	; 0x41
 8006a94:	2128      	movs	r1, #40	; 0x28
 8006a96:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a53      	ldr	r2, [pc, #332]	; (8006be8 <I2C_ITError+0x1b0>)
 8006a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8006a9e:	e012      	b.n	8006ac6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006aa0:	4a52      	ldr	r2, [pc, #328]	; (8006bec <I2C_ITError+0x1b4>)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 fa7c 	bl	8006fa4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2241      	movs	r2, #65	; 0x41
 8006ab0:	5c9b      	ldrb	r3, [r3, r2]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b60      	cmp	r3, #96	; 0x60
 8006ab6:	d003      	beq.n	8006ac0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2241      	movs	r2, #65	; 0x41
 8006abc:	2120      	movs	r1, #32
 8006abe:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d03b      	beq.n	8006b4c <I2C_ITError+0x114>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b11      	cmp	r3, #17
 8006ad8:	d002      	beq.n	8006ae0 <I2C_ITError+0xa8>
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b21      	cmp	r3, #33	; 0x21
 8006ade:	d135      	bne.n	8006b4c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	2380      	movs	r3, #128	; 0x80
 8006ae8:	01db      	lsls	r3, r3, #7
 8006aea:	401a      	ands	r2, r3
 8006aec:	2380      	movs	r3, #128	; 0x80
 8006aee:	01db      	lsls	r3, r3, #7
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d107      	bne.n	8006b04 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	493c      	ldr	r1, [pc, #240]	; (8006bf0 <I2C_ITError+0x1b8>)
 8006b00:	400a      	ands	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7fe ff8c 	bl	8005a26 <HAL_DMA_GetState>
 8006b0e:	0003      	movs	r3, r0
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d016      	beq.n	8006b42 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	4a36      	ldr	r2, [pc, #216]	; (8006bf4 <I2C_ITError+0x1bc>)
 8006b1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2240      	movs	r2, #64	; 0x40
 8006b20:	2100      	movs	r1, #0
 8006b22:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7fe fe95 	bl	8005858 <HAL_DMA_Abort_IT>
 8006b2e:	1e03      	subs	r3, r0, #0
 8006b30:	d051      	beq.n	8006bd6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b40:	e049      	b.n	8006bd6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	0018      	movs	r0, r3
 8006b46:	f000 f859 	bl	8006bfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b4a:	e044      	b.n	8006bd6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d03b      	beq.n	8006bcc <I2C_ITError+0x194>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b12      	cmp	r3, #18
 8006b58:	d002      	beq.n	8006b60 <I2C_ITError+0x128>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b22      	cmp	r3, #34	; 0x22
 8006b5e:	d135      	bne.n	8006bcc <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	2380      	movs	r3, #128	; 0x80
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	401a      	ands	r2, r3
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d107      	bne.n	8006b84 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	491e      	ldr	r1, [pc, #120]	; (8006bf8 <I2C_ITError+0x1c0>)
 8006b80:	400a      	ands	r2, r1
 8006b82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7fe ff4c 	bl	8005a26 <HAL_DMA_GetState>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d016      	beq.n	8006bc2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b98:	4a16      	ldr	r2, [pc, #88]	; (8006bf4 <I2C_ITError+0x1bc>)
 8006b9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2240      	movs	r2, #64	; 0x40
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7fe fe55 	bl	8005858 <HAL_DMA_Abort_IT>
 8006bae:	1e03      	subs	r3, r0, #0
 8006bb0:	d013      	beq.n	8006bda <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bc0:	e00b      	b.n	8006bda <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f000 f819 	bl	8006bfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bca:	e006      	b.n	8006bda <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 f814 	bl	8006bfc <I2C_TreatErrorCallback>
  }
}
 8006bd4:	e002      	b.n	8006bdc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	e000      	b.n	8006bdc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bda:	46c0      	nop			; (mov r8, r8)
}
 8006bdc:	46c0      	nop			; (mov r8, r8)
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b004      	add	sp, #16
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	ffff0000 	.word	0xffff0000
 8006be8:	08006301 	.word	0x08006301
 8006bec:	00008003 	.word	0x00008003
 8006bf0:	ffffbfff 	.word	0xffffbfff
 8006bf4:	08006c93 	.word	0x08006c93
 8006bf8:	ffff7fff 	.word	0xffff7fff

08006bfc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2241      	movs	r2, #65	; 0x41
 8006c08:	5c9b      	ldrb	r3, [r3, r2]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b60      	cmp	r3, #96	; 0x60
 8006c0e:	d10f      	bne.n	8006c30 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2241      	movs	r2, #65	; 0x41
 8006c14:	2120      	movs	r1, #32
 8006c16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2240      	movs	r2, #64	; 0x40
 8006c22:	2100      	movs	r1, #0
 8006c24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	0018      	movs	r0, r3
 8006c2a:	f7ff fb61 	bl	80062f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c2e:	e00a      	b.n	8006c46 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2240      	movs	r2, #64	; 0x40
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0018      	movs	r0, r3
 8006c42:	f7ff fb4d 	bl	80062e0 <HAL_I2C_ErrorCallback>
}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b002      	add	sp, #8
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d103      	bne.n	8006c6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2201      	movs	r2, #1
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d007      	beq.n	8006c8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	699a      	ldr	r2, [r3, #24]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2101      	movs	r1, #1
 8006c86:	430a      	orrs	r2, r1
 8006c88:	619a      	str	r2, [r3, #24]
  }
}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b002      	add	sp, #8
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	2200      	movs	r2, #0
 8006cae:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f7ff ff9a 	bl	8006bfc <I2C_TreatErrorCallback>
}
 8006cc8:	46c0      	nop			; (mov r8, r8)
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b004      	add	sp, #16
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	1dfb      	adds	r3, r7, #7
 8006cde:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce0:	e021      	b.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	d01e      	beq.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce8:	f7fd feac 	bl	8004a44 <HAL_GetTick>
 8006cec:	0002      	movs	r2, r0
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d113      	bne.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	2220      	movs	r2, #32
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2241      	movs	r2, #65	; 0x41
 8006d0e:	2120      	movs	r1, #32
 8006d10:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2242      	movs	r2, #66	; 0x42
 8006d16:	2100      	movs	r1, #0
 8006d18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2240      	movs	r2, #64	; 0x40
 8006d1e:	2100      	movs	r1, #0
 8006d20:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e00f      	b.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	425a      	negs	r2, r3
 8006d36:	4153      	adcs	r3, r2
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	1dfb      	adds	r3, r7, #7
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d0ce      	beq.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	0018      	movs	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b004      	add	sp, #16
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d5a:	e02b      	b.n	8006db4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	0018      	movs	r0, r3
 8006d64:	f000 f86e 	bl	8006e44 <I2C_IsAcknowledgeFailed>
 8006d68:	1e03      	subs	r3, r0, #0
 8006d6a:	d001      	beq.n	8006d70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e029      	b.n	8006dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	3301      	adds	r3, #1
 8006d74:	d01e      	beq.n	8006db4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fd fe65 	bl	8004a44 <HAL_GetTick>
 8006d7a:	0002      	movs	r2, r0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d113      	bne.n	8006db4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	2220      	movs	r2, #32
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2241      	movs	r2, #65	; 0x41
 8006d9c:	2120      	movs	r1, #32
 8006d9e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2242      	movs	r2, #66	; 0x42
 8006da4:	2100      	movs	r1, #0
 8006da6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2240      	movs	r2, #64	; 0x40
 8006dac:	2100      	movs	r1, #0
 8006dae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e007      	b.n	8006dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d1cc      	bne.n	8006d5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b004      	add	sp, #16
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dd8:	e028      	b.n	8006e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f000 f82f 	bl	8006e44 <I2C_IsAcknowledgeFailed>
 8006de6:	1e03      	subs	r3, r0, #0
 8006de8:	d001      	beq.n	8006dee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e026      	b.n	8006e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dee:	f7fd fe29 	bl	8004a44 <HAL_GetTick>
 8006df2:	0002      	movs	r2, r0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d302      	bcc.n	8006e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d113      	bne.n	8006e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	2220      	movs	r2, #32
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2241      	movs	r2, #65	; 0x41
 8006e14:	2120      	movs	r1, #32
 8006e16:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2242      	movs	r2, #66	; 0x42
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2240      	movs	r2, #64	; 0x40
 8006e24:	2100      	movs	r1, #0
 8006e26:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e007      	b.n	8006e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2220      	movs	r2, #32
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d1cf      	bne.n	8006dda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b004      	add	sp, #16
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	2210      	movs	r2, #16
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b10      	cmp	r3, #16
 8006e5c:	d164      	bne.n	8006f28 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	049b      	lsls	r3, r3, #18
 8006e68:	401a      	ands	r2, r3
 8006e6a:	2380      	movs	r3, #128	; 0x80
 8006e6c:	049b      	lsls	r3, r3, #18
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d02b      	beq.n	8006eca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	01c9      	lsls	r1, r1, #7
 8006e80:	430a      	orrs	r2, r1
 8006e82:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e84:	e021      	b.n	8006eca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	d01e      	beq.n	8006eca <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8c:	f7fd fdda 	bl	8004a44 <HAL_GetTick>
 8006e90:	0002      	movs	r2, r0
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d302      	bcc.n	8006ea2 <I2C_IsAcknowledgeFailed+0x5e>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d113      	bne.n	8006eca <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2241      	movs	r2, #65	; 0x41
 8006eb2:	2120      	movs	r1, #32
 8006eb4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2242      	movs	r2, #66	; 0x42
 8006eba:	2100      	movs	r1, #0
 8006ebc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2240      	movs	r2, #64	; 0x40
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e02f      	b.n	8006f2a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d1d6      	bne.n	8006e86 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2210      	movs	r2, #16
 8006ede:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	0018      	movs	r0, r3
 8006eec:	f7ff feaf 	bl	8006c4e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	490e      	ldr	r1, [pc, #56]	; (8006f34 <I2C_IsAcknowledgeFailed+0xf0>)
 8006efc:	400a      	ands	r2, r1
 8006efe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f04:	2204      	movs	r2, #4
 8006f06:	431a      	orrs	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2241      	movs	r2, #65	; 0x41
 8006f10:	2120      	movs	r1, #32
 8006f12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2242      	movs	r2, #66	; 0x42
 8006f18:	2100      	movs	r1, #0
 8006f1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2240      	movs	r2, #64	; 0x40
 8006f20:	2100      	movs	r1, #0
 8006f22:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b004      	add	sp, #16
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	46c0      	nop			; (mov r8, r8)
 8006f34:	fe00e800 	.word	0xfe00e800

08006f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f38:	b590      	push	{r4, r7, lr}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	0008      	movs	r0, r1
 8006f42:	0011      	movs	r1, r2
 8006f44:	607b      	str	r3, [r7, #4]
 8006f46:	240a      	movs	r4, #10
 8006f48:	193b      	adds	r3, r7, r4
 8006f4a:	1c02      	adds	r2, r0, #0
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	2009      	movs	r0, #9
 8006f50:	183b      	adds	r3, r7, r0
 8006f52:	1c0a      	adds	r2, r1, #0
 8006f54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	6a3a      	ldr	r2, [r7, #32]
 8006f5e:	0d51      	lsrs	r1, r2, #21
 8006f60:	2280      	movs	r2, #128	; 0x80
 8006f62:	00d2      	lsls	r2, r2, #3
 8006f64:	400a      	ands	r2, r1
 8006f66:	490e      	ldr	r1, [pc, #56]	; (8006fa0 <I2C_TransferConfig+0x68>)
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	43d2      	mvns	r2, r2
 8006f6c:	401a      	ands	r2, r3
 8006f6e:	0011      	movs	r1, r2
 8006f70:	193b      	adds	r3, r7, r4
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	059b      	lsls	r3, r3, #22
 8006f76:	0d9a      	lsrs	r2, r3, #22
 8006f78:	183b      	adds	r3, r7, r0
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	0418      	lsls	r0, r3, #16
 8006f7e:	23ff      	movs	r3, #255	; 0xff
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	4003      	ands	r3, r0
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b005      	add	sp, #20
 8006f9c:	bd90      	pop	{r4, r7, pc}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	03ff63ff 	.word	0x03ff63ff

08006fa4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	000a      	movs	r2, r1
 8006fae:	1cbb      	adds	r3, r7, #2
 8006fb0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006fb6:	1cbb      	adds	r3, r7, #2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d010      	beq.n	8006fe2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2242      	movs	r2, #66	; 0x42
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2241      	movs	r2, #65	; 0x41
 8006fcc:	5c9b      	ldrb	r3, [r3, r2]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	2328      	movs	r3, #40	; 0x28
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b28      	cmp	r3, #40	; 0x28
 8006fd8:	d003      	beq.n	8006fe2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	22b0      	movs	r2, #176	; 0xb0
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006fe2:	1cbb      	adds	r3, r7, #2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d010      	beq.n	800700e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2244      	movs	r2, #68	; 0x44
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2241      	movs	r2, #65	; 0x41
 8006ff8:	5c9b      	ldrb	r3, [r3, r2]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	2328      	movs	r3, #40	; 0x28
 8007000:	4013      	ands	r3, r2
 8007002:	2b28      	cmp	r3, #40	; 0x28
 8007004:	d003      	beq.n	800700e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	22b0      	movs	r2, #176	; 0xb0
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800700e:	1cbb      	adds	r3, r7, #2
 8007010:	2200      	movs	r2, #0
 8007012:	5e9b      	ldrsh	r3, [r3, r2]
 8007014:	2b00      	cmp	r3, #0
 8007016:	da03      	bge.n	8007020 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	22b8      	movs	r2, #184	; 0xb8
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007020:	1cbb      	adds	r3, r7, #2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	2b10      	cmp	r3, #16
 8007026:	d103      	bne.n	8007030 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2290      	movs	r2, #144	; 0x90
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007030:	1cbb      	adds	r3, r7, #2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	2b20      	cmp	r3, #32
 8007036:	d103      	bne.n	8007040 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007040:	1cbb      	adds	r3, r7, #2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	2b40      	cmp	r3, #64	; 0x40
 8007046:	d103      	bne.n	8007050 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2240      	movs	r2, #64	; 0x40
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	43d9      	mvns	r1, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	400a      	ands	r2, r1
 8007060:	601a      	str	r2, [r3, #0]
}
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	46bd      	mov	sp, r7
 8007066:	b004      	add	sp, #16
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2241      	movs	r2, #65	; 0x41
 800707a:	5c9b      	ldrb	r3, [r3, r2]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b20      	cmp	r3, #32
 8007080:	d138      	bne.n	80070f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2240      	movs	r2, #64	; 0x40
 8007086:	5c9b      	ldrb	r3, [r3, r2]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800708c:	2302      	movs	r3, #2
 800708e:	e032      	b.n	80070f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2240      	movs	r2, #64	; 0x40
 8007094:	2101      	movs	r1, #1
 8007096:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2241      	movs	r2, #65	; 0x41
 800709c:	2124      	movs	r1, #36	; 0x24
 800709e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2101      	movs	r1, #1
 80070ac:	438a      	bics	r2, r1
 80070ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4911      	ldr	r1, [pc, #68]	; (8007100 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80070bc:	400a      	ands	r2, r1
 80070be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2101      	movs	r1, #1
 80070dc:	430a      	orrs	r2, r1
 80070de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2241      	movs	r2, #65	; 0x41
 80070e4:	2120      	movs	r1, #32
 80070e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2240      	movs	r2, #64	; 0x40
 80070ec:	2100      	movs	r1, #0
 80070ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e000      	b.n	80070f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
  }
}
 80070f6:	0018      	movs	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	b002      	add	sp, #8
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	ffffefff 	.word	0xffffefff

08007104 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2241      	movs	r2, #65	; 0x41
 8007112:	5c9b      	ldrb	r3, [r3, r2]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b20      	cmp	r3, #32
 8007118:	d139      	bne.n	800718e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2240      	movs	r2, #64	; 0x40
 800711e:	5c9b      	ldrb	r3, [r3, r2]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007124:	2302      	movs	r3, #2
 8007126:	e033      	b.n	8007190 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2240      	movs	r2, #64	; 0x40
 800712c:	2101      	movs	r1, #1
 800712e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2241      	movs	r2, #65	; 0x41
 8007134:	2124      	movs	r1, #36	; 0x24
 8007136:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2101      	movs	r1, #1
 8007144:	438a      	bics	r2, r1
 8007146:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4a11      	ldr	r2, [pc, #68]	; (8007198 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007154:	4013      	ands	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2101      	movs	r1, #1
 8007176:	430a      	orrs	r2, r1
 8007178:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2241      	movs	r2, #65	; 0x41
 800717e:	2120      	movs	r1, #32
 8007180:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2240      	movs	r2, #64	; 0x40
 8007186:	2100      	movs	r1, #0
 8007188:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	e000      	b.n	8007190 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800718e:	2302      	movs	r3, #2
  }
}
 8007190:	0018      	movs	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	b004      	add	sp, #16
 8007196:	bd80      	pop	{r7, pc}
 8007198:	fffff0ff 	.word	0xfffff0ff

0800719c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e03d      	b.n	800722a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a20      	ldr	r2, [pc, #128]	; (8007234 <HAL_IWDG_Init+0x98>)
 80071b4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <HAL_IWDG_Init+0x9c>)
 80071bc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6852      	ldr	r2, [r2, #4]
 80071c6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6892      	ldr	r2, [r2, #8]
 80071d0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80071d2:	f7fd fc37 	bl	8004a44 <HAL_GetTick>
 80071d6:	0003      	movs	r3, r0
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80071da:	e00e      	b.n	80071fa <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80071dc:	f7fd fc32 	bl	8004a44 <HAL_GetTick>
 80071e0:	0002      	movs	r2, r0
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b27      	cmp	r3, #39	; 0x27
 80071e8:	d907      	bls.n	80071fa <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2207      	movs	r2, #7
 80071f2:	4013      	ands	r3, r2
 80071f4:	d001      	beq.n	80071fa <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e017      	b.n	800722a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	2207      	movs	r2, #7
 8007202:	4013      	ands	r3, r2
 8007204:	d1ea      	bne.n	80071dc <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	429a      	cmp	r2, r3
 8007212:	d005      	beq.n	8007220 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68d2      	ldr	r2, [r2, #12]
 800721c:	611a      	str	r2, [r3, #16]
 800721e:	e003      	b.n	8007228 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a05      	ldr	r2, [pc, #20]	; (800723c <HAL_IWDG_Init+0xa0>)
 8007226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	0018      	movs	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	b004      	add	sp, #16
 8007230:	bd80      	pop	{r7, pc}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	0000cccc 	.word	0x0000cccc
 8007238:	00005555 	.word	0x00005555
 800723c:	0000aaaa 	.word	0x0000aaaa

08007240 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a03      	ldr	r2, [pc, #12]	; (800725c <HAL_IWDG_Refresh+0x1c>)
 800724e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b002      	add	sp, #8
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	0000aaaa 	.word	0x0000aaaa

08007260 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8007264:	4b04      	ldr	r3, [pc, #16]	; (8007278 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	4b03      	ldr	r3, [pc, #12]	; (8007278 <HAL_PWR_EnableBkUpAccess+0x18>)
 800726a:	2180      	movs	r1, #128	; 0x80
 800726c:	0049      	lsls	r1, r1, #1
 800726e:	430a      	orrs	r2, r1
 8007270:	601a      	str	r2, [r3, #0]
}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40007000 	.word	0x40007000

0800727c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e301      	b.n	8007892 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2201      	movs	r2, #1
 8007294:	4013      	ands	r3, r2
 8007296:	d100      	bne.n	800729a <HAL_RCC_OscConfig+0x1e>
 8007298:	e08d      	b.n	80073b6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800729a:	4bc3      	ldr	r3, [pc, #780]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	220c      	movs	r2, #12
 80072a0:	4013      	ands	r3, r2
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d00e      	beq.n	80072c4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072a6:	4bc0      	ldr	r3, [pc, #768]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	220c      	movs	r2, #12
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d116      	bne.n	80072e0 <HAL_RCC_OscConfig+0x64>
 80072b2:	4bbd      	ldr	r3, [pc, #756]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	2380      	movs	r3, #128	; 0x80
 80072b8:	025b      	lsls	r3, r3, #9
 80072ba:	401a      	ands	r2, r3
 80072bc:	2380      	movs	r3, #128	; 0x80
 80072be:	025b      	lsls	r3, r3, #9
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d10d      	bne.n	80072e0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c4:	4bb8      	ldr	r3, [pc, #736]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	2380      	movs	r3, #128	; 0x80
 80072ca:	029b      	lsls	r3, r3, #10
 80072cc:	4013      	ands	r3, r2
 80072ce:	d100      	bne.n	80072d2 <HAL_RCC_OscConfig+0x56>
 80072d0:	e070      	b.n	80073b4 <HAL_RCC_OscConfig+0x138>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d000      	beq.n	80072dc <HAL_RCC_OscConfig+0x60>
 80072da:	e06b      	b.n	80073b4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e2d8      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d107      	bne.n	80072f8 <HAL_RCC_OscConfig+0x7c>
 80072e8:	4baf      	ldr	r3, [pc, #700]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	4bae      	ldr	r3, [pc, #696]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	0249      	lsls	r1, r1, #9
 80072f2:	430a      	orrs	r2, r1
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	e02f      	b.n	8007358 <HAL_RCC_OscConfig+0xdc>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10c      	bne.n	800731a <HAL_RCC_OscConfig+0x9e>
 8007300:	4ba9      	ldr	r3, [pc, #676]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4ba8      	ldr	r3, [pc, #672]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007306:	49a9      	ldr	r1, [pc, #676]	; (80075ac <HAL_RCC_OscConfig+0x330>)
 8007308:	400a      	ands	r2, r1
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	4ba6      	ldr	r3, [pc, #664]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	4ba5      	ldr	r3, [pc, #660]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007312:	49a7      	ldr	r1, [pc, #668]	; (80075b0 <HAL_RCC_OscConfig+0x334>)
 8007314:	400a      	ands	r2, r1
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e01e      	b.n	8007358 <HAL_RCC_OscConfig+0xdc>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2b05      	cmp	r3, #5
 8007320:	d10e      	bne.n	8007340 <HAL_RCC_OscConfig+0xc4>
 8007322:	4ba1      	ldr	r3, [pc, #644]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4ba0      	ldr	r3, [pc, #640]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	02c9      	lsls	r1, r1, #11
 800732c:	430a      	orrs	r2, r1
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	4b9d      	ldr	r3, [pc, #628]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b9c      	ldr	r3, [pc, #624]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007336:	2180      	movs	r1, #128	; 0x80
 8007338:	0249      	lsls	r1, r1, #9
 800733a:	430a      	orrs	r2, r1
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e00b      	b.n	8007358 <HAL_RCC_OscConfig+0xdc>
 8007340:	4b99      	ldr	r3, [pc, #612]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4b98      	ldr	r3, [pc, #608]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007346:	4999      	ldr	r1, [pc, #612]	; (80075ac <HAL_RCC_OscConfig+0x330>)
 8007348:	400a      	ands	r2, r1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	4b96      	ldr	r3, [pc, #600]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	4b95      	ldr	r3, [pc, #596]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007352:	4997      	ldr	r1, [pc, #604]	; (80075b0 <HAL_RCC_OscConfig+0x334>)
 8007354:	400a      	ands	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d014      	beq.n	800738a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007360:	f7fd fb70 	bl	8004a44 <HAL_GetTick>
 8007364:	0003      	movs	r3, r0
 8007366:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007368:	e008      	b.n	800737c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800736a:	f7fd fb6b 	bl	8004a44 <HAL_GetTick>
 800736e:	0002      	movs	r2, r0
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b64      	cmp	r3, #100	; 0x64
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e28a      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737c:	4b8a      	ldr	r3, [pc, #552]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	2380      	movs	r3, #128	; 0x80
 8007382:	029b      	lsls	r3, r3, #10
 8007384:	4013      	ands	r3, r2
 8007386:	d0f0      	beq.n	800736a <HAL_RCC_OscConfig+0xee>
 8007388:	e015      	b.n	80073b6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738a:	f7fd fb5b 	bl	8004a44 <HAL_GetTick>
 800738e:	0003      	movs	r3, r0
 8007390:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007394:	f7fd fb56 	bl	8004a44 <HAL_GetTick>
 8007398:	0002      	movs	r2, r0
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b64      	cmp	r3, #100	; 0x64
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e275      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a6:	4b80      	ldr	r3, [pc, #512]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	2380      	movs	r3, #128	; 0x80
 80073ac:	029b      	lsls	r3, r3, #10
 80073ae:	4013      	ands	r3, r2
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0x118>
 80073b2:	e000      	b.n	80073b6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2202      	movs	r2, #2
 80073bc:	4013      	ands	r3, r2
 80073be:	d100      	bne.n	80073c2 <HAL_RCC_OscConfig+0x146>
 80073c0:	e069      	b.n	8007496 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80073c2:	4b79      	ldr	r3, [pc, #484]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	220c      	movs	r2, #12
 80073c8:	4013      	ands	r3, r2
 80073ca:	d00b      	beq.n	80073e4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80073cc:	4b76      	ldr	r3, [pc, #472]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	220c      	movs	r2, #12
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d11c      	bne.n	8007412 <HAL_RCC_OscConfig+0x196>
 80073d8:	4b73      	ldr	r3, [pc, #460]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	2380      	movs	r3, #128	; 0x80
 80073de:	025b      	lsls	r3, r3, #9
 80073e0:	4013      	ands	r3, r2
 80073e2:	d116      	bne.n	8007412 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073e4:	4b70      	ldr	r3, [pc, #448]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2202      	movs	r2, #2
 80073ea:	4013      	ands	r3, r2
 80073ec:	d005      	beq.n	80073fa <HAL_RCC_OscConfig+0x17e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d001      	beq.n	80073fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e24b      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073fa:	4b6b      	ldr	r3, [pc, #428]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	22f8      	movs	r2, #248	; 0xf8
 8007400:	4393      	bics	r3, r2
 8007402:	0019      	movs	r1, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	00da      	lsls	r2, r3, #3
 800740a:	4b67      	ldr	r3, [pc, #412]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800740c:	430a      	orrs	r2, r1
 800740e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007410:	e041      	b.n	8007496 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d024      	beq.n	8007464 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800741a:	4b63      	ldr	r3, [pc, #396]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4b62      	ldr	r3, [pc, #392]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007420:	2101      	movs	r1, #1
 8007422:	430a      	orrs	r2, r1
 8007424:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007426:	f7fd fb0d 	bl	8004a44 <HAL_GetTick>
 800742a:	0003      	movs	r3, r0
 800742c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007430:	f7fd fb08 	bl	8004a44 <HAL_GetTick>
 8007434:	0002      	movs	r2, r0
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e227      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007442:	4b59      	ldr	r3, [pc, #356]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2202      	movs	r2, #2
 8007448:	4013      	ands	r3, r2
 800744a:	d0f1      	beq.n	8007430 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800744c:	4b56      	ldr	r3, [pc, #344]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	22f8      	movs	r2, #248	; 0xf8
 8007452:	4393      	bics	r3, r2
 8007454:	0019      	movs	r1, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	00da      	lsls	r2, r3, #3
 800745c:	4b52      	ldr	r3, [pc, #328]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800745e:	430a      	orrs	r2, r1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e018      	b.n	8007496 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007464:	4b50      	ldr	r3, [pc, #320]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b4f      	ldr	r3, [pc, #316]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800746a:	2101      	movs	r1, #1
 800746c:	438a      	bics	r2, r1
 800746e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007470:	f7fd fae8 	bl	8004a44 <HAL_GetTick>
 8007474:	0003      	movs	r3, r0
 8007476:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800747a:	f7fd fae3 	bl	8004a44 <HAL_GetTick>
 800747e:	0002      	movs	r2, r0
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e202      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800748c:	4b46      	ldr	r3, [pc, #280]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2202      	movs	r2, #2
 8007492:	4013      	ands	r3, r2
 8007494:	d1f1      	bne.n	800747a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2208      	movs	r2, #8
 800749c:	4013      	ands	r3, r2
 800749e:	d036      	beq.n	800750e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d019      	beq.n	80074dc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074a8:	4b3f      	ldr	r3, [pc, #252]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80074aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ac:	4b3e      	ldr	r3, [pc, #248]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80074ae:	2101      	movs	r1, #1
 80074b0:	430a      	orrs	r2, r1
 80074b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074b4:	f7fd fac6 	bl	8004a44 <HAL_GetTick>
 80074b8:	0003      	movs	r3, r0
 80074ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074bc:	e008      	b.n	80074d0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074be:	f7fd fac1 	bl	8004a44 <HAL_GetTick>
 80074c2:	0002      	movs	r2, r0
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e1e0      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074d0:	4b35      	ldr	r3, [pc, #212]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2202      	movs	r2, #2
 80074d6:	4013      	ands	r3, r2
 80074d8:	d0f1      	beq.n	80074be <HAL_RCC_OscConfig+0x242>
 80074da:	e018      	b.n	800750e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074dc:	4b32      	ldr	r3, [pc, #200]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80074de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074e0:	4b31      	ldr	r3, [pc, #196]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80074e2:	2101      	movs	r1, #1
 80074e4:	438a      	bics	r2, r1
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074e8:	f7fd faac 	bl	8004a44 <HAL_GetTick>
 80074ec:	0003      	movs	r3, r0
 80074ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074f2:	f7fd faa7 	bl	8004a44 <HAL_GetTick>
 80074f6:	0002      	movs	r2, r0
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e1c6      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007504:	4b28      	ldr	r3, [pc, #160]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	2202      	movs	r2, #2
 800750a:	4013      	ands	r3, r2
 800750c:	d1f1      	bne.n	80074f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2204      	movs	r2, #4
 8007514:	4013      	ands	r3, r2
 8007516:	d100      	bne.n	800751a <HAL_RCC_OscConfig+0x29e>
 8007518:	e0b4      	b.n	8007684 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800751a:	201f      	movs	r0, #31
 800751c:	183b      	adds	r3, r7, r0
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007522:	4b21      	ldr	r3, [pc, #132]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007524:	69da      	ldr	r2, [r3, #28]
 8007526:	2380      	movs	r3, #128	; 0x80
 8007528:	055b      	lsls	r3, r3, #21
 800752a:	4013      	ands	r3, r2
 800752c:	d110      	bne.n	8007550 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800752e:	4b1e      	ldr	r3, [pc, #120]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007530:	69da      	ldr	r2, [r3, #28]
 8007532:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 8007534:	2180      	movs	r1, #128	; 0x80
 8007536:	0549      	lsls	r1, r1, #21
 8007538:	430a      	orrs	r2, r1
 800753a:	61da      	str	r2, [r3, #28]
 800753c:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	2380      	movs	r3, #128	; 0x80
 8007542:	055b      	lsls	r3, r3, #21
 8007544:	4013      	ands	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800754a:	183b      	adds	r3, r7, r0
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007550:	4b18      	ldr	r3, [pc, #96]	; (80075b4 <HAL_RCC_OscConfig+0x338>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	4013      	ands	r3, r2
 800755a:	d11a      	bne.n	8007592 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800755c:	4b15      	ldr	r3, [pc, #84]	; (80075b4 <HAL_RCC_OscConfig+0x338>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b14      	ldr	r3, [pc, #80]	; (80075b4 <HAL_RCC_OscConfig+0x338>)
 8007562:	2180      	movs	r1, #128	; 0x80
 8007564:	0049      	lsls	r1, r1, #1
 8007566:	430a      	orrs	r2, r1
 8007568:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800756a:	f7fd fa6b 	bl	8004a44 <HAL_GetTick>
 800756e:	0003      	movs	r3, r0
 8007570:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007574:	f7fd fa66 	bl	8004a44 <HAL_GetTick>
 8007578:	0002      	movs	r2, r0
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b64      	cmp	r3, #100	; 0x64
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e185      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <HAL_RCC_OscConfig+0x338>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	2380      	movs	r3, #128	; 0x80
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4013      	ands	r3, r2
 8007590:	d0f0      	beq.n	8007574 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10e      	bne.n	80075b8 <HAL_RCC_OscConfig+0x33c>
 800759a:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <HAL_RCC_OscConfig+0x32c>)
 80075a0:	2101      	movs	r1, #1
 80075a2:	430a      	orrs	r2, r1
 80075a4:	621a      	str	r2, [r3, #32]
 80075a6:	e035      	b.n	8007614 <HAL_RCC_OscConfig+0x398>
 80075a8:	40021000 	.word	0x40021000
 80075ac:	fffeffff 	.word	0xfffeffff
 80075b0:	fffbffff 	.word	0xfffbffff
 80075b4:	40007000 	.word	0x40007000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <HAL_RCC_OscConfig+0x35e>
 80075c0:	4bb6      	ldr	r3, [pc, #728]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075c2:	6a1a      	ldr	r2, [r3, #32]
 80075c4:	4bb5      	ldr	r3, [pc, #724]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075c6:	2101      	movs	r1, #1
 80075c8:	438a      	bics	r2, r1
 80075ca:	621a      	str	r2, [r3, #32]
 80075cc:	4bb3      	ldr	r3, [pc, #716]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075ce:	6a1a      	ldr	r2, [r3, #32]
 80075d0:	4bb2      	ldr	r3, [pc, #712]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075d2:	2104      	movs	r1, #4
 80075d4:	438a      	bics	r2, r1
 80075d6:	621a      	str	r2, [r3, #32]
 80075d8:	e01c      	b.n	8007614 <HAL_RCC_OscConfig+0x398>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d10c      	bne.n	80075fc <HAL_RCC_OscConfig+0x380>
 80075e2:	4bae      	ldr	r3, [pc, #696]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075e4:	6a1a      	ldr	r2, [r3, #32]
 80075e6:	4bad      	ldr	r3, [pc, #692]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075e8:	2104      	movs	r1, #4
 80075ea:	430a      	orrs	r2, r1
 80075ec:	621a      	str	r2, [r3, #32]
 80075ee:	4bab      	ldr	r3, [pc, #684]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075f0:	6a1a      	ldr	r2, [r3, #32]
 80075f2:	4baa      	ldr	r3, [pc, #680]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075f4:	2101      	movs	r1, #1
 80075f6:	430a      	orrs	r2, r1
 80075f8:	621a      	str	r2, [r3, #32]
 80075fa:	e00b      	b.n	8007614 <HAL_RCC_OscConfig+0x398>
 80075fc:	4ba7      	ldr	r3, [pc, #668]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80075fe:	6a1a      	ldr	r2, [r3, #32]
 8007600:	4ba6      	ldr	r3, [pc, #664]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007602:	2101      	movs	r1, #1
 8007604:	438a      	bics	r2, r1
 8007606:	621a      	str	r2, [r3, #32]
 8007608:	4ba4      	ldr	r3, [pc, #656]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800760a:	6a1a      	ldr	r2, [r3, #32]
 800760c:	4ba3      	ldr	r3, [pc, #652]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800760e:	2104      	movs	r1, #4
 8007610:	438a      	bics	r2, r1
 8007612:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d014      	beq.n	8007646 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800761c:	f7fd fa12 	bl	8004a44 <HAL_GetTick>
 8007620:	0003      	movs	r3, r0
 8007622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007624:	e009      	b.n	800763a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007626:	f7fd fa0d 	bl	8004a44 <HAL_GetTick>
 800762a:	0002      	movs	r2, r0
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	4a9b      	ldr	r2, [pc, #620]	; (80078a0 <HAL_RCC_OscConfig+0x624>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e12b      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800763a:	4b98      	ldr	r3, [pc, #608]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	2202      	movs	r2, #2
 8007640:	4013      	ands	r3, r2
 8007642:	d0f0      	beq.n	8007626 <HAL_RCC_OscConfig+0x3aa>
 8007644:	e013      	b.n	800766e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007646:	f7fd f9fd 	bl	8004a44 <HAL_GetTick>
 800764a:	0003      	movs	r3, r0
 800764c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800764e:	e009      	b.n	8007664 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007650:	f7fd f9f8 	bl	8004a44 <HAL_GetTick>
 8007654:	0002      	movs	r2, r0
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	4a91      	ldr	r2, [pc, #580]	; (80078a0 <HAL_RCC_OscConfig+0x624>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e116      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007664:	4b8d      	ldr	r3, [pc, #564]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	2202      	movs	r2, #2
 800766a:	4013      	ands	r3, r2
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800766e:	231f      	movs	r3, #31
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d105      	bne.n	8007684 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007678:	4b88      	ldr	r3, [pc, #544]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	4b87      	ldr	r3, [pc, #540]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800767e:	4989      	ldr	r1, [pc, #548]	; (80078a4 <HAL_RCC_OscConfig+0x628>)
 8007680:	400a      	ands	r2, r1
 8007682:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2210      	movs	r2, #16
 800768a:	4013      	ands	r3, r2
 800768c:	d063      	beq.n	8007756 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d12a      	bne.n	80076ec <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007696:	4b81      	ldr	r3, [pc, #516]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800769a:	4b80      	ldr	r3, [pc, #512]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800769c:	2104      	movs	r1, #4
 800769e:	430a      	orrs	r2, r1
 80076a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80076a2:	4b7e      	ldr	r3, [pc, #504]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80076a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076a6:	4b7d      	ldr	r3, [pc, #500]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80076a8:	2101      	movs	r1, #1
 80076aa:	430a      	orrs	r2, r1
 80076ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ae:	f7fd f9c9 	bl	8004a44 <HAL_GetTick>
 80076b2:	0003      	movs	r3, r0
 80076b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80076b8:	f7fd f9c4 	bl	8004a44 <HAL_GetTick>
 80076bc:	0002      	movs	r2, r0
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e0e3      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80076ca:	4b74      	ldr	r3, [pc, #464]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	2202      	movs	r2, #2
 80076d0:	4013      	ands	r3, r2
 80076d2:	d0f1      	beq.n	80076b8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80076d4:	4b71      	ldr	r3, [pc, #452]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80076d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d8:	22f8      	movs	r2, #248	; 0xf8
 80076da:	4393      	bics	r3, r2
 80076dc:	0019      	movs	r1, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	00da      	lsls	r2, r3, #3
 80076e4:	4b6d      	ldr	r3, [pc, #436]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80076e6:	430a      	orrs	r2, r1
 80076e8:	635a      	str	r2, [r3, #52]	; 0x34
 80076ea:	e034      	b.n	8007756 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	3305      	adds	r3, #5
 80076f2:	d111      	bne.n	8007718 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80076f4:	4b69      	ldr	r3, [pc, #420]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80076f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076f8:	4b68      	ldr	r3, [pc, #416]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80076fa:	2104      	movs	r1, #4
 80076fc:	438a      	bics	r2, r1
 80076fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007700:	4b66      	ldr	r3, [pc, #408]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007704:	22f8      	movs	r2, #248	; 0xf8
 8007706:	4393      	bics	r3, r2
 8007708:	0019      	movs	r1, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	00da      	lsls	r2, r3, #3
 8007710:	4b62      	ldr	r3, [pc, #392]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007712:	430a      	orrs	r2, r1
 8007714:	635a      	str	r2, [r3, #52]	; 0x34
 8007716:	e01e      	b.n	8007756 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007718:	4b60      	ldr	r3, [pc, #384]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800771a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771c:	4b5f      	ldr	r3, [pc, #380]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800771e:	2104      	movs	r1, #4
 8007720:	430a      	orrs	r2, r1
 8007722:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007724:	4b5d      	ldr	r3, [pc, #372]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007728:	4b5c      	ldr	r3, [pc, #368]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800772a:	2101      	movs	r1, #1
 800772c:	438a      	bics	r2, r1
 800772e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007730:	f7fd f988 	bl	8004a44 <HAL_GetTick>
 8007734:	0003      	movs	r3, r0
 8007736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007738:	e008      	b.n	800774c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800773a:	f7fd f983 	bl	8004a44 <HAL_GetTick>
 800773e:	0002      	movs	r2, r0
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e0a2      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800774c:	4b53      	ldr	r3, [pc, #332]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	2202      	movs	r2, #2
 8007752:	4013      	ands	r3, r2
 8007754:	d1f1      	bne.n	800773a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d100      	bne.n	8007760 <HAL_RCC_OscConfig+0x4e4>
 800775e:	e097      	b.n	8007890 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007760:	4b4e      	ldr	r3, [pc, #312]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	220c      	movs	r2, #12
 8007766:	4013      	ands	r3, r2
 8007768:	2b08      	cmp	r3, #8
 800776a:	d100      	bne.n	800776e <HAL_RCC_OscConfig+0x4f2>
 800776c:	e06b      	b.n	8007846 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d14c      	bne.n	8007810 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007776:	4b49      	ldr	r3, [pc, #292]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b48      	ldr	r3, [pc, #288]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800777c:	494a      	ldr	r1, [pc, #296]	; (80078a8 <HAL_RCC_OscConfig+0x62c>)
 800777e:	400a      	ands	r2, r1
 8007780:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007782:	f7fd f95f 	bl	8004a44 <HAL_GetTick>
 8007786:	0003      	movs	r3, r0
 8007788:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800778c:	f7fd f95a 	bl	8004a44 <HAL_GetTick>
 8007790:	0002      	movs	r2, r0
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e079      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800779e:	4b3f      	ldr	r3, [pc, #252]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	2380      	movs	r3, #128	; 0x80
 80077a4:	049b      	lsls	r3, r3, #18
 80077a6:	4013      	ands	r3, r2
 80077a8:	d1f0      	bne.n	800778c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077aa:	4b3c      	ldr	r3, [pc, #240]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	220f      	movs	r2, #15
 80077b0:	4393      	bics	r3, r2
 80077b2:	0019      	movs	r1, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	4b38      	ldr	r3, [pc, #224]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80077ba:	430a      	orrs	r2, r1
 80077bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80077be:	4b37      	ldr	r3, [pc, #220]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	4a3a      	ldr	r2, [pc, #232]	; (80078ac <HAL_RCC_OscConfig+0x630>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	0019      	movs	r1, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	431a      	orrs	r2, r3
 80077d2:	4b32      	ldr	r3, [pc, #200]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80077d4:	430a      	orrs	r2, r1
 80077d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077d8:	4b30      	ldr	r3, [pc, #192]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	4b2f      	ldr	r3, [pc, #188]	; (800789c <HAL_RCC_OscConfig+0x620>)
 80077de:	2180      	movs	r1, #128	; 0x80
 80077e0:	0449      	lsls	r1, r1, #17
 80077e2:	430a      	orrs	r2, r1
 80077e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e6:	f7fd f92d 	bl	8004a44 <HAL_GetTick>
 80077ea:	0003      	movs	r3, r0
 80077ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077f0:	f7fd f928 	bl	8004a44 <HAL_GetTick>
 80077f4:	0002      	movs	r2, r0
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e047      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007802:	4b26      	ldr	r3, [pc, #152]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	2380      	movs	r3, #128	; 0x80
 8007808:	049b      	lsls	r3, r3, #18
 800780a:	4013      	ands	r3, r2
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0x574>
 800780e:	e03f      	b.n	8007890 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007810:	4b22      	ldr	r3, [pc, #136]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	4b21      	ldr	r3, [pc, #132]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007816:	4924      	ldr	r1, [pc, #144]	; (80078a8 <HAL_RCC_OscConfig+0x62c>)
 8007818:	400a      	ands	r2, r1
 800781a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800781c:	f7fd f912 	bl	8004a44 <HAL_GetTick>
 8007820:	0003      	movs	r3, r0
 8007822:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007824:	e008      	b.n	8007838 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007826:	f7fd f90d 	bl	8004a44 <HAL_GetTick>
 800782a:	0002      	movs	r2, r0
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e02c      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007838:	4b18      	ldr	r3, [pc, #96]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	049b      	lsls	r3, r3, #18
 8007840:	4013      	ands	r3, r2
 8007842:	d1f0      	bne.n	8007826 <HAL_RCC_OscConfig+0x5aa>
 8007844:	e024      	b.n	8007890 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d101      	bne.n	8007852 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e01f      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007852:	4b12      	ldr	r3, [pc, #72]	; (800789c <HAL_RCC_OscConfig+0x620>)
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007858:	4b10      	ldr	r3, [pc, #64]	; (800789c <HAL_RCC_OscConfig+0x620>)
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	025b      	lsls	r3, r3, #9
 8007864:	401a      	ands	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	429a      	cmp	r2, r3
 800786c:	d10e      	bne.n	800788c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	220f      	movs	r2, #15
 8007872:	401a      	ands	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007878:	429a      	cmp	r2, r3
 800787a:	d107      	bne.n	800788c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	23f0      	movs	r3, #240	; 0xf0
 8007880:	039b      	lsls	r3, r3, #14
 8007882:	401a      	ands	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007888:	429a      	cmp	r2, r3
 800788a:	d001      	beq.n	8007890 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	0018      	movs	r0, r3
 8007894:	46bd      	mov	sp, r7
 8007896:	b008      	add	sp, #32
 8007898:	bd80      	pop	{r7, pc}
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	40021000 	.word	0x40021000
 80078a0:	00001388 	.word	0x00001388
 80078a4:	efffffff 	.word	0xefffffff
 80078a8:	feffffff 	.word	0xfeffffff
 80078ac:	ffc2ffff 	.word	0xffc2ffff

080078b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0b3      	b.n	8007a2c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078c4:	4b5b      	ldr	r3, [pc, #364]	; (8007a34 <HAL_RCC_ClockConfig+0x184>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2201      	movs	r2, #1
 80078ca:	4013      	ands	r3, r2
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d911      	bls.n	80078f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d2:	4b58      	ldr	r3, [pc, #352]	; (8007a34 <HAL_RCC_ClockConfig+0x184>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2201      	movs	r2, #1
 80078d8:	4393      	bics	r3, r2
 80078da:	0019      	movs	r1, r3
 80078dc:	4b55      	ldr	r3, [pc, #340]	; (8007a34 <HAL_RCC_ClockConfig+0x184>)
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e4:	4b53      	ldr	r3, [pc, #332]	; (8007a34 <HAL_RCC_ClockConfig+0x184>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2201      	movs	r2, #1
 80078ea:	4013      	ands	r3, r2
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d001      	beq.n	80078f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e09a      	b.n	8007a2c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2202      	movs	r2, #2
 80078fc:	4013      	ands	r3, r2
 80078fe:	d015      	beq.n	800792c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2204      	movs	r2, #4
 8007906:	4013      	ands	r3, r2
 8007908:	d006      	beq.n	8007918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800790a:	4b4b      	ldr	r3, [pc, #300]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	4b4a      	ldr	r3, [pc, #296]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007910:	21e0      	movs	r1, #224	; 0xe0
 8007912:	00c9      	lsls	r1, r1, #3
 8007914:	430a      	orrs	r2, r1
 8007916:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007918:	4b47      	ldr	r3, [pc, #284]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	22f0      	movs	r2, #240	; 0xf0
 800791e:	4393      	bics	r3, r2
 8007920:	0019      	movs	r1, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	4b44      	ldr	r3, [pc, #272]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2201      	movs	r2, #1
 8007932:	4013      	ands	r3, r2
 8007934:	d040      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d107      	bne.n	800794e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800793e:	4b3e      	ldr	r3, [pc, #248]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	2380      	movs	r3, #128	; 0x80
 8007944:	029b      	lsls	r3, r3, #10
 8007946:	4013      	ands	r3, r2
 8007948:	d114      	bne.n	8007974 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e06e      	b.n	8007a2c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d107      	bne.n	8007966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007956:	4b38      	ldr	r3, [pc, #224]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	2380      	movs	r3, #128	; 0x80
 800795c:	049b      	lsls	r3, r3, #18
 800795e:	4013      	ands	r3, r2
 8007960:	d108      	bne.n	8007974 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e062      	b.n	8007a2c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007966:	4b34      	ldr	r3, [pc, #208]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2202      	movs	r2, #2
 800796c:	4013      	ands	r3, r2
 800796e:	d101      	bne.n	8007974 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e05b      	b.n	8007a2c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007974:	4b30      	ldr	r3, [pc, #192]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2203      	movs	r2, #3
 800797a:	4393      	bics	r3, r2
 800797c:	0019      	movs	r1, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	4b2d      	ldr	r3, [pc, #180]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007984:	430a      	orrs	r2, r1
 8007986:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007988:	f7fd f85c 	bl	8004a44 <HAL_GetTick>
 800798c:	0003      	movs	r3, r0
 800798e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007990:	e009      	b.n	80079a6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007992:	f7fd f857 	bl	8004a44 <HAL_GetTick>
 8007996:	0002      	movs	r2, r0
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	4a27      	ldr	r2, [pc, #156]	; (8007a3c <HAL_RCC_ClockConfig+0x18c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e042      	b.n	8007a2c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079a6:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	220c      	movs	r2, #12
 80079ac:	401a      	ands	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d1ec      	bne.n	8007992 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079b8:	4b1e      	ldr	r3, [pc, #120]	; (8007a34 <HAL_RCC_ClockConfig+0x184>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2201      	movs	r2, #1
 80079be:	4013      	ands	r3, r2
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d211      	bcs.n	80079ea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079c6:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <HAL_RCC_ClockConfig+0x184>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2201      	movs	r2, #1
 80079cc:	4393      	bics	r3, r2
 80079ce:	0019      	movs	r1, r3
 80079d0:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <HAL_RCC_ClockConfig+0x184>)
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079d8:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <HAL_RCC_ClockConfig+0x184>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2201      	movs	r2, #1
 80079de:	4013      	ands	r3, r2
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d001      	beq.n	80079ea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e020      	b.n	8007a2c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2204      	movs	r2, #4
 80079f0:	4013      	ands	r3, r2
 80079f2:	d009      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80079f4:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	4a11      	ldr	r2, [pc, #68]	; (8007a40 <HAL_RCC_ClockConfig+0x190>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	0019      	movs	r1, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007a04:	430a      	orrs	r2, r1
 8007a06:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007a08:	f000 f820 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8007a0c:	0001      	movs	r1, r0
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <HAL_RCC_ClockConfig+0x188>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	091b      	lsrs	r3, r3, #4
 8007a14:	220f      	movs	r2, #15
 8007a16:	4013      	ands	r3, r2
 8007a18:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <HAL_RCC_ClockConfig+0x194>)
 8007a1a:	5cd3      	ldrb	r3, [r2, r3]
 8007a1c:	000a      	movs	r2, r1
 8007a1e:	40da      	lsrs	r2, r3
 8007a20:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <HAL_RCC_ClockConfig+0x198>)
 8007a22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007a24:	2003      	movs	r0, #3
 8007a26:	f7fc ffc7 	bl	80049b8 <HAL_InitTick>
  
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b004      	add	sp, #16
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40022000 	.word	0x40022000
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	00001388 	.word	0x00001388
 8007a40:	fffff8ff 	.word	0xfffff8ff
 8007a44:	0800baec 	.word	0x0800baec
 8007a48:	20000618 	.word	0x20000618

08007a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a4c:	b590      	push	{r4, r7, lr}
 8007a4e:	b08f      	sub	sp, #60	; 0x3c
 8007a50:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8007a52:	2314      	movs	r3, #20
 8007a54:	18fb      	adds	r3, r7, r3
 8007a56:	4a2b      	ldr	r2, [pc, #172]	; (8007b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007a5a:	c313      	stmia	r3!, {r0, r1, r4}
 8007a5c:	6812      	ldr	r2, [r2, #0]
 8007a5e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8007a60:	1d3b      	adds	r3, r7, #4
 8007a62:	4a29      	ldr	r2, [pc, #164]	; (8007b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007a66:	c313      	stmia	r3!, {r0, r1, r4}
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a70:	2300      	movs	r3, #0
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a74:	2300      	movs	r3, #0
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34
 8007a78:	2300      	movs	r3, #0
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8007a80:	4b22      	ldr	r3, [pc, #136]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	220c      	movs	r2, #12
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d002      	beq.n	8007a96 <HAL_RCC_GetSysClockFreq+0x4a>
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d003      	beq.n	8007a9c <HAL_RCC_GetSysClockFreq+0x50>
 8007a94:	e02d      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a96:	4b1e      	ldr	r3, [pc, #120]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007a98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007a9a:	e02d      	b.n	8007af8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	0c9b      	lsrs	r3, r3, #18
 8007aa0:	220f      	movs	r2, #15
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2214      	movs	r2, #20
 8007aa6:	18ba      	adds	r2, r7, r2
 8007aa8:	5cd3      	ldrb	r3, [r2, r3]
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007aac:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	220f      	movs	r2, #15
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	1d3a      	adds	r2, r7, #4
 8007ab6:	5cd3      	ldrb	r3, [r2, r3]
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007abc:	2380      	movs	r3, #128	; 0x80
 8007abe:	025b      	lsls	r3, r3, #9
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	d009      	beq.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ac6:	4812      	ldr	r0, [pc, #72]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ac8:	f7f8 fb30 	bl	800012c <__udivsi3>
 8007acc:	0003      	movs	r3, r0
 8007ace:	001a      	movs	r2, r3
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	4353      	muls	r3, r2
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad6:	e009      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ada:	000a      	movs	r2, r1
 8007adc:	0152      	lsls	r2, r2, #5
 8007ade:	1a52      	subs	r2, r2, r1
 8007ae0:	0193      	lsls	r3, r2, #6
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	185b      	adds	r3, r3, r1
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007af0:	e002      	b.n	8007af8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007af2:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007af4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007af6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007afa:	0018      	movs	r0, r3
 8007afc:	46bd      	mov	sp, r7
 8007afe:	b00f      	add	sp, #60	; 0x3c
 8007b00:	bd90      	pop	{r4, r7, pc}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	0800ae64 	.word	0x0800ae64
 8007b08:	0800ae74 	.word	0x0800ae74
 8007b0c:	40021000 	.word	0x40021000
 8007b10:	007a1200 	.word	0x007a1200

08007b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b18:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
}
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	20000618 	.word	0x20000618

08007b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007b2c:	f7ff fff2 	bl	8007b14 <HAL_RCC_GetHCLKFreq>
 8007b30:	0001      	movs	r1, r0
 8007b32:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	2207      	movs	r2, #7
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	4a04      	ldr	r2, [pc, #16]	; (8007b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b3e:	5cd3      	ldrb	r3, [r2, r3]
 8007b40:	40d9      	lsrs	r1, r3
 8007b42:	000b      	movs	r3, r1
}    
 8007b44:	0018      	movs	r0, r3
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	0800bafc 	.word	0x0800bafc

08007b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	2380      	movs	r3, #128	; 0x80
 8007b6a:	025b      	lsls	r3, r3, #9
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	d100      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007b70:	e08e      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8007b72:	2017      	movs	r0, #23
 8007b74:	183b      	adds	r3, r7, r0
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b7a:	4b5f      	ldr	r3, [pc, #380]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007b7c:	69da      	ldr	r2, [r3, #28]
 8007b7e:	2380      	movs	r3, #128	; 0x80
 8007b80:	055b      	lsls	r3, r3, #21
 8007b82:	4013      	ands	r3, r2
 8007b84:	d110      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b86:	4b5c      	ldr	r3, [pc, #368]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007b88:	69da      	ldr	r2, [r3, #28]
 8007b8a:	4b5b      	ldr	r3, [pc, #364]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007b8c:	2180      	movs	r1, #128	; 0x80
 8007b8e:	0549      	lsls	r1, r1, #21
 8007b90:	430a      	orrs	r2, r1
 8007b92:	61da      	str	r2, [r3, #28]
 8007b94:	4b58      	ldr	r3, [pc, #352]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	055b      	lsls	r3, r3, #21
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60bb      	str	r3, [r7, #8]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ba2:	183b      	adds	r3, r7, r0
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ba8:	4b54      	ldr	r3, [pc, #336]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	2380      	movs	r3, #128	; 0x80
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	d11a      	bne.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bb4:	4b51      	ldr	r3, [pc, #324]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b50      	ldr	r3, [pc, #320]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007bba:	2180      	movs	r1, #128	; 0x80
 8007bbc:	0049      	lsls	r1, r1, #1
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bc2:	f7fc ff3f 	bl	8004a44 <HAL_GetTick>
 8007bc6:	0003      	movs	r3, r0
 8007bc8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bca:	e008      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bcc:	f7fc ff3a 	bl	8004a44 <HAL_GetTick>
 8007bd0:	0002      	movs	r2, r0
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b64      	cmp	r3, #100	; 0x64
 8007bd8:	d901      	bls.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e087      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bde:	4b47      	ldr	r3, [pc, #284]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	2380      	movs	r3, #128	; 0x80
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	4013      	ands	r3, r2
 8007be8:	d0f0      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bea:	4b43      	ldr	r3, [pc, #268]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	23c0      	movs	r3, #192	; 0xc0
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d034      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	23c0      	movs	r3, #192	; 0xc0
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4013      	ands	r3, r2
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d02c      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c0c:	4b3a      	ldr	r3, [pc, #232]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	4a3b      	ldr	r2, [pc, #236]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c12:	4013      	ands	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c16:	4b38      	ldr	r3, [pc, #224]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	4b37      	ldr	r3, [pc, #220]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c1c:	2180      	movs	r1, #128	; 0x80
 8007c1e:	0249      	lsls	r1, r1, #9
 8007c20:	430a      	orrs	r2, r1
 8007c22:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c24:	4b34      	ldr	r3, [pc, #208]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	4b33      	ldr	r3, [pc, #204]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c2a:	4936      	ldr	r1, [pc, #216]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007c2c:	400a      	ands	r2, r1
 8007c2e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007c30:	4b31      	ldr	r3, [pc, #196]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3e:	f7fc ff01 	bl	8004a44 <HAL_GetTick>
 8007c42:	0003      	movs	r3, r0
 8007c44:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c46:	e009      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c48:	f7fc fefc 	bl	8004a44 <HAL_GetTick>
 8007c4c:	0002      	movs	r2, r0
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	4a2d      	ldr	r2, [pc, #180]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e048      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c5c:	4b26      	ldr	r3, [pc, #152]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	2202      	movs	r2, #2
 8007c62:	4013      	ands	r3, r2
 8007c64:	d0f0      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c66:	4b24      	ldr	r3, [pc, #144]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	4a25      	ldr	r2, [pc, #148]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	0019      	movs	r1, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	4b20      	ldr	r3, [pc, #128]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c76:	430a      	orrs	r2, r1
 8007c78:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007c7a:	2317      	movs	r3, #23
 8007c7c:	18fb      	adds	r3, r7, r3
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d105      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c84:	4b1c      	ldr	r3, [pc, #112]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c8a:	4920      	ldr	r1, [pc, #128]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c8c:	400a      	ands	r2, r1
 8007c8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2201      	movs	r2, #1
 8007c96:	4013      	ands	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c9a:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	4393      	bics	r3, r2
 8007ca2:	0019      	movs	r1, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007caa:	430a      	orrs	r2, r1
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbc:	2210      	movs	r2, #16
 8007cbe:	4393      	bics	r3, r2
 8007cc0:	0019      	movs	r1, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	2380      	movs	r3, #128	; 0x80
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	d009      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cd8:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	2240      	movs	r2, #64	; 0x40
 8007cde:	4393      	bics	r3, r2
 8007ce0:	0019      	movs	r1, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	0018      	movs	r0, r3
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	b006      	add	sp, #24
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	46c0      	nop			; (mov r8, r8)
 8007cf8:	40021000 	.word	0x40021000
 8007cfc:	40007000 	.word	0x40007000
 8007d00:	fffffcff 	.word	0xfffffcff
 8007d04:	fffeffff 	.word	0xfffeffff
 8007d08:	00001388 	.word	0x00001388
 8007d0c:	efffffff 	.word	0xefffffff

08007d10 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e081      	b.n	8007e26 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7f5b      	ldrb	r3, [r3, #29]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d106      	bne.n	8007d3a <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	0018      	movs	r0, r3
 8007d36:	f7fc fbe9 	bl	800450c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	22ca      	movs	r2, #202	; 0xca
 8007d46:	625a      	str	r2, [r3, #36]	; 0x24
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2253      	movs	r2, #83	; 0x53
 8007d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	0018      	movs	r0, r3
 8007d54:	f000 f899 	bl	8007e8a <RTC_EnterInitMode>
 8007d58:	1e03      	subs	r3, r0, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	22ff      	movs	r2, #255	; 0xff
 8007d62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2204      	movs	r2, #4
 8007d68:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e05b      	b.n	8007e26 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	492d      	ldr	r1, [pc, #180]	; (8007e30 <HAL_RTC_Init+0x120>)
 8007d7a:	400a      	ands	r2, r1
 8007d7c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6899      	ldr	r1, [r3, #8]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68d2      	ldr	r2, [r2, #12]
 8007da4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6919      	ldr	r1, [r3, #16]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	041a      	lsls	r2, r3, #16
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68da      	ldr	r2, [r3, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2180      	movs	r1, #128	; 0x80
 8007dc6:	438a      	bics	r2, r1
 8007dc8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	d10e      	bne.n	8007df4 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f000 f82d 	bl	8007e38 <HAL_RTC_WaitForSynchro>
 8007dde:	1e03      	subs	r3, r0, #0
 8007de0:	d008      	beq.n	8007df4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	22ff      	movs	r2, #255	; 0xff
 8007de8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2204      	movs	r2, #4
 8007dee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e018      	b.n	8007e26 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	490d      	ldr	r1, [pc, #52]	; (8007e34 <HAL_RTC_Init+0x124>)
 8007e00:	400a      	ands	r2, r1
 8007e02:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	22ff      	movs	r2, #255	; 0xff
 8007e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007e24:	2300      	movs	r3, #0
  }
}
 8007e26:	0018      	movs	r0, r3
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	b002      	add	sp, #8
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	ff8fffbf 	.word	0xff8fffbf
 8007e34:	fffbffff 	.word	0xfffbffff

08007e38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	21a0      	movs	r1, #160	; 0xa0
 8007e50:	438a      	bics	r2, r1
 8007e52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007e54:	f7fc fdf6 	bl	8004a44 <HAL_GetTick>
 8007e58:	0003      	movs	r3, r0
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e5c:	e00a      	b.n	8007e74 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e5e:	f7fc fdf1 	bl	8004a44 <HAL_GetTick>
 8007e62:	0002      	movs	r2, r0
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	23fa      	movs	r3, #250	; 0xfa
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d901      	bls.n	8007e74 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e006      	b.n	8007e82 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	d0ee      	beq.n	8007e5e <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	0018      	movs	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	b004      	add	sp, #16
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	2240      	movs	r2, #64	; 0x40
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d11a      	bne.n	8007ed8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4252      	negs	r2, r2
 8007eaa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007eac:	f7fc fdca 	bl	8004a44 <HAL_GetTick>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007eb4:	e00a      	b.n	8007ecc <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007eb6:	f7fc fdc5 	bl	8004a44 <HAL_GetTick>
 8007eba:	0002      	movs	r2, r0
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	23fa      	movs	r3, #250	; 0xfa
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d901      	bls.n	8007ecc <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e006      	b.n	8007eda <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2240      	movs	r2, #64	; 0x40
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	d0ee      	beq.n	8007eb6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	0018      	movs	r0, r3
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b004      	add	sp, #16
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b086      	sub	sp, #24
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3350      	adds	r3, #80	; 0x50
 8007ef8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	18d3      	adds	r3, r2, r3
 8007f02:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	601a      	str	r2, [r3, #0]
}
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	b006      	add	sp, #24
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 4 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3350      	adds	r3, #80	; 0x50
 8007f26:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	18d3      	adds	r3, r2, r3
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
}
 8007f36:	0018      	movs	r0, r3
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b004      	add	sp, #16
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e0a8      	b.n	80080a4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	2382      	movs	r3, #130	; 0x82
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d009      	beq.n	8007f7a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	61da      	str	r2, [r3, #28]
 8007f6c:	e005      	b.n	8007f7a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	225d      	movs	r2, #93	; 0x5d
 8007f84:	5c9b      	ldrb	r3, [r3, r2]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d107      	bne.n	8007f9c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	225c      	movs	r2, #92	; 0x5c
 8007f90:	2100      	movs	r1, #0
 8007f92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	0018      	movs	r0, r3
 8007f98:	f7fc fad0 	bl	800453c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	225d      	movs	r2, #93	; 0x5d
 8007fa0:	2102      	movs	r1, #2
 8007fa2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2140      	movs	r1, #64	; 0x40
 8007fb0:	438a      	bics	r2, r1
 8007fb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	23e0      	movs	r3, #224	; 0xe0
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d902      	bls.n	8007fc6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e002      	b.n	8007fcc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fc6:	2380      	movs	r3, #128	; 0x80
 8007fc8:	015b      	lsls	r3, r3, #5
 8007fca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	23f0      	movs	r3, #240	; 0xf0
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d008      	beq.n	8007fea <HAL_SPI_Init+0xaa>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	23e0      	movs	r3, #224	; 0xe0
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d002      	beq.n	8007fea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	2382      	movs	r3, #130	; 0x82
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	401a      	ands	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6899      	ldr	r1, [r3, #8]
 8007ff8:	2384      	movs	r3, #132	; 0x84
 8007ffa:	021b      	lsls	r3, r3, #8
 8007ffc:	400b      	ands	r3, r1
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2102      	movs	r1, #2
 8008006:	400b      	ands	r3, r1
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	2101      	movs	r1, #1
 8008010:	400b      	ands	r3, r1
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6999      	ldr	r1, [r3, #24]
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	400b      	ands	r3, r1
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	2138      	movs	r1, #56	; 0x38
 8008026:	400b      	ands	r3, r1
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	400b      	ands	r3, r1
 8008032:	431a      	orrs	r2, r3
 8008034:	0011      	movs	r1, r2
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800803a:	2380      	movs	r3, #128	; 0x80
 800803c:	019b      	lsls	r3, r3, #6
 800803e:	401a      	ands	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	0c1b      	lsrs	r3, r3, #16
 800804e:	2204      	movs	r2, #4
 8008050:	401a      	ands	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2110      	movs	r1, #16
 8008058:	400b      	ands	r3, r1
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	2108      	movs	r1, #8
 8008062:	400b      	ands	r3, r1
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68d9      	ldr	r1, [r3, #12]
 800806a:	23f0      	movs	r3, #240	; 0xf0
 800806c:	011b      	lsls	r3, r3, #4
 800806e:	400b      	ands	r3, r1
 8008070:	431a      	orrs	r2, r3
 8008072:	0011      	movs	r1, r2
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	2380      	movs	r3, #128	; 0x80
 8008078:	015b      	lsls	r3, r3, #5
 800807a:	401a      	ands	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69da      	ldr	r2, [r3, #28]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4907      	ldr	r1, [pc, #28]	; (80080ac <HAL_SPI_Init+0x16c>)
 8008090:	400a      	ands	r2, r1
 8008092:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	225d      	movs	r2, #93	; 0x5d
 800809e:	2101      	movs	r1, #1
 80080a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	0018      	movs	r0, r3
 80080a6:	46bd      	mov	sp, r7
 80080a8:	b004      	add	sp, #16
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	fffff7ff 	.word	0xfffff7ff

080080b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b0:	b590      	push	{r4, r7, lr}
 80080b2:	b089      	sub	sp, #36	; 0x24
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	1dbb      	adds	r3, r7, #6
 80080be:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080c0:	2317      	movs	r3, #23
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	2382      	movs	r3, #130	; 0x82
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d113      	bne.n	80080fc <HAL_SPI_Receive+0x4c>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10f      	bne.n	80080fc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	225d      	movs	r2, #93	; 0x5d
 80080e0:	2104      	movs	r1, #4
 80080e2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80080e4:	1dbb      	adds	r3, r7, #6
 80080e6:	881c      	ldrh	r4, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	0023      	movs	r3, r4
 80080f4:	f000 f928 	bl	8008348 <HAL_SPI_TransmitReceive>
 80080f8:	0003      	movs	r3, r0
 80080fa:	e11c      	b.n	8008336 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	225c      	movs	r2, #92	; 0x5c
 8008100:	5c9b      	ldrb	r3, [r3, r2]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_SPI_Receive+0x5a>
 8008106:	2302      	movs	r3, #2
 8008108:	e115      	b.n	8008336 <HAL_SPI_Receive+0x286>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	225c      	movs	r2, #92	; 0x5c
 800810e:	2101      	movs	r1, #1
 8008110:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008112:	f7fc fc97 	bl	8004a44 <HAL_GetTick>
 8008116:	0003      	movs	r3, r0
 8008118:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	225d      	movs	r2, #93	; 0x5d
 800811e:	5c9b      	ldrb	r3, [r3, r2]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b01      	cmp	r3, #1
 8008124:	d004      	beq.n	8008130 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8008126:	2317      	movs	r3, #23
 8008128:	18fb      	adds	r3, r7, r3
 800812a:	2202      	movs	r2, #2
 800812c:	701a      	strb	r2, [r3, #0]
    goto error;
 800812e:	e0f7      	b.n	8008320 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_SPI_Receive+0x8e>
 8008136:	1dbb      	adds	r3, r7, #6
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800813e:	2317      	movs	r3, #23
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	2201      	movs	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
    goto error;
 8008146:	e0eb      	b.n	8008320 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	225d      	movs	r2, #93	; 0x5d
 800814c:	2104      	movs	r1, #4
 800814e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1dba      	adds	r2, r7, #6
 8008160:	2144      	movs	r1, #68	; 0x44
 8008162:	8812      	ldrh	r2, [r2, #0]
 8008164:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	1dba      	adds	r2, r7, #6
 800816a:	2146      	movs	r1, #70	; 0x46
 800816c:	8812      	ldrh	r2, [r2, #0]
 800816e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	23e0      	movs	r3, #224	; 0xe0
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	429a      	cmp	r2, r3
 8008198:	d908      	bls.n	80081ac <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4966      	ldr	r1, [pc, #408]	; (8008340 <HAL_SPI_Receive+0x290>)
 80081a6:	400a      	ands	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	e008      	b.n	80081be <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2180      	movs	r1, #128	; 0x80
 80081b8:	0149      	lsls	r1, r1, #5
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689a      	ldr	r2, [r3, #8]
 80081c2:	2380      	movs	r3, #128	; 0x80
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d10f      	bne.n	80081ea <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2140      	movs	r1, #64	; 0x40
 80081d6:	438a      	bics	r2, r1
 80081d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4957      	ldr	r1, [pc, #348]	; (8008344 <HAL_SPI_Receive+0x294>)
 80081e6:	400a      	ands	r2, r1
 80081e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2240      	movs	r2, #64	; 0x40
 80081f2:	4013      	ands	r3, r2
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	d007      	beq.n	8008208 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2140      	movs	r1, #64	; 0x40
 8008204:	430a      	orrs	r2, r1
 8008206:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	23e0      	movs	r3, #224	; 0xe0
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	429a      	cmp	r2, r3
 8008212:	d900      	bls.n	8008216 <HAL_SPI_Receive+0x166>
 8008214:	e069      	b.n	80082ea <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008216:	e031      	b.n	800827c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2201      	movs	r2, #1
 8008220:	4013      	ands	r3, r2
 8008222:	2b01      	cmp	r3, #1
 8008224:	d117      	bne.n	8008256 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	330c      	adds	r3, #12
 800822c:	001a      	movs	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	7812      	ldrb	r2, [r2, #0]
 8008234:	b2d2      	uxtb	r2, r2
 8008236:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2246      	movs	r2, #70	; 0x46
 8008246:	5a9b      	ldrh	r3, [r3, r2]
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b299      	uxth	r1, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2246      	movs	r2, #70	; 0x46
 8008252:	5299      	strh	r1, [r3, r2]
 8008254:	e012      	b.n	800827c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008256:	f7fc fbf5 	bl	8004a44 <HAL_GetTick>
 800825a:	0002      	movs	r2, r0
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d802      	bhi.n	800826c <HAL_SPI_Receive+0x1bc>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	3301      	adds	r3, #1
 800826a:	d102      	bne.n	8008272 <HAL_SPI_Receive+0x1c2>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8008272:	2317      	movs	r3, #23
 8008274:	18fb      	adds	r3, r7, r3
 8008276:	2203      	movs	r2, #3
 8008278:	701a      	strb	r2, [r3, #0]
          goto error;
 800827a:	e051      	b.n	8008320 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2246      	movs	r2, #70	; 0x46
 8008280:	5a9b      	ldrh	r3, [r3, r2]
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1c7      	bne.n	8008218 <HAL_SPI_Receive+0x168>
 8008288:	e035      	b.n	80082f6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2201      	movs	r2, #1
 8008292:	4013      	ands	r3, r2
 8008294:	2b01      	cmp	r3, #1
 8008296:	d115      	bne.n	80082c4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	b292      	uxth	r2, r2
 80082a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	1c9a      	adds	r2, r3, #2
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2246      	movs	r2, #70	; 0x46
 80082b4:	5a9b      	ldrh	r3, [r3, r2]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	3b01      	subs	r3, #1
 80082ba:	b299      	uxth	r1, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2246      	movs	r2, #70	; 0x46
 80082c0:	5299      	strh	r1, [r3, r2]
 80082c2:	e012      	b.n	80082ea <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082c4:	f7fc fbbe 	bl	8004a44 <HAL_GetTick>
 80082c8:	0002      	movs	r2, r0
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d802      	bhi.n	80082da <HAL_SPI_Receive+0x22a>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	3301      	adds	r3, #1
 80082d8:	d102      	bne.n	80082e0 <HAL_SPI_Receive+0x230>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d104      	bne.n	80082ea <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80082e0:	2317      	movs	r3, #23
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	2203      	movs	r2, #3
 80082e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80082e8:	e01a      	b.n	8008320 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2246      	movs	r2, #70	; 0x46
 80082ee:	5a9b      	ldrh	r3, [r3, r2]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1c9      	bne.n	800828a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f000 fb25 	bl	800894c <SPI_EndRxTransaction>
 8008302:	1e03      	subs	r3, r0, #0
 8008304:	d002      	beq.n	800830c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2220      	movs	r2, #32
 800830a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8008314:	2317      	movs	r3, #23
 8008316:	18fb      	adds	r3, r7, r3
 8008318:	2201      	movs	r2, #1
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	e000      	b.n	8008320 <HAL_SPI_Receive+0x270>
  }

error :
 800831e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	225d      	movs	r2, #93	; 0x5d
 8008324:	2101      	movs	r1, #1
 8008326:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	225c      	movs	r2, #92	; 0x5c
 800832c:	2100      	movs	r1, #0
 800832e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008330:	2317      	movs	r3, #23
 8008332:	18fb      	adds	r3, r7, r3
 8008334:	781b      	ldrb	r3, [r3, #0]
}
 8008336:	0018      	movs	r0, r3
 8008338:	46bd      	mov	sp, r7
 800833a:	b007      	add	sp, #28
 800833c:	bd90      	pop	{r4, r7, pc}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	ffffefff 	.word	0xffffefff
 8008344:	ffffbfff 	.word	0xffffbfff

08008348 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	001a      	movs	r2, r3
 8008356:	1cbb      	adds	r3, r7, #2
 8008358:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800835a:	2301      	movs	r3, #1
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800835e:	2323      	movs	r3, #35	; 0x23
 8008360:	18fb      	adds	r3, r7, r3
 8008362:	2200      	movs	r2, #0
 8008364:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	225c      	movs	r2, #92	; 0x5c
 800836a:	5c9b      	ldrb	r3, [r3, r2]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d101      	bne.n	8008374 <HAL_SPI_TransmitReceive+0x2c>
 8008370:	2302      	movs	r3, #2
 8008372:	e1b5      	b.n	80086e0 <HAL_SPI_TransmitReceive+0x398>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	225c      	movs	r2, #92	; 0x5c
 8008378:	2101      	movs	r1, #1
 800837a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800837c:	f7fc fb62 	bl	8004a44 <HAL_GetTick>
 8008380:	0003      	movs	r3, r0
 8008382:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008384:	201b      	movs	r0, #27
 8008386:	183b      	adds	r3, r7, r0
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	215d      	movs	r1, #93	; 0x5d
 800838c:	5c52      	ldrb	r2, [r2, r1]
 800838e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008396:	2312      	movs	r3, #18
 8008398:	18fb      	adds	r3, r7, r3
 800839a:	1cba      	adds	r2, r7, #2
 800839c:	8812      	ldrh	r2, [r2, #0]
 800839e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083a0:	183b      	adds	r3, r7, r0
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d011      	beq.n	80083cc <HAL_SPI_TransmitReceive+0x84>
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	2382      	movs	r3, #130	; 0x82
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d107      	bne.n	80083c2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d103      	bne.n	80083c2 <HAL_SPI_TransmitReceive+0x7a>
 80083ba:	183b      	adds	r3, r7, r0
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d004      	beq.n	80083cc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80083c2:	2323      	movs	r3, #35	; 0x23
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	2202      	movs	r2, #2
 80083c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80083ca:	e17e      	b.n	80086ca <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d006      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x98>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x98>
 80083d8:	1cbb      	adds	r3, r7, #2
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80083e0:	2323      	movs	r3, #35	; 0x23
 80083e2:	18fb      	adds	r3, r7, r3
 80083e4:	2201      	movs	r2, #1
 80083e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80083e8:	e16f      	b.n	80086ca <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	225d      	movs	r2, #93	; 0x5d
 80083ee:	5c9b      	ldrb	r3, [r3, r2]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d003      	beq.n	80083fe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	225d      	movs	r2, #93	; 0x5d
 80083fa:	2105      	movs	r1, #5
 80083fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	1cba      	adds	r2, r7, #2
 800840e:	2146      	movs	r1, #70	; 0x46
 8008410:	8812      	ldrh	r2, [r2, #0]
 8008412:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	1cba      	adds	r2, r7, #2
 8008418:	2144      	movs	r1, #68	; 0x44
 800841a:	8812      	ldrh	r2, [r2, #0]
 800841c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	1cba      	adds	r2, r7, #2
 8008428:	8812      	ldrh	r2, [r2, #0]
 800842a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	1cba      	adds	r2, r7, #2
 8008430:	8812      	ldrh	r2, [r2, #0]
 8008432:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	23e0      	movs	r3, #224	; 0xe0
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	429a      	cmp	r2, r3
 800844a:	d908      	bls.n	800845e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	49a4      	ldr	r1, [pc, #656]	; (80086e8 <HAL_SPI_TransmitReceive+0x3a0>)
 8008458:	400a      	ands	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
 800845c:	e008      	b.n	8008470 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2180      	movs	r1, #128	; 0x80
 800846a:	0149      	lsls	r1, r1, #5
 800846c:	430a      	orrs	r2, r1
 800846e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2240      	movs	r2, #64	; 0x40
 8008478:	4013      	ands	r3, r2
 800847a:	2b40      	cmp	r3, #64	; 0x40
 800847c:	d007      	beq.n	800848e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2140      	movs	r1, #64	; 0x40
 800848a:	430a      	orrs	r2, r1
 800848c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	23e0      	movs	r3, #224	; 0xe0
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	429a      	cmp	r2, r3
 8008498:	d800      	bhi.n	800849c <HAL_SPI_TransmitReceive+0x154>
 800849a:	e07f      	b.n	800859c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_SPI_TransmitReceive+0x168>
 80084a4:	2312      	movs	r3, #18
 80084a6:	18fb      	adds	r3, r7, r3
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d000      	beq.n	80084b0 <HAL_SPI_TransmitReceive+0x168>
 80084ae:	e069      	b.n	8008584 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	881a      	ldrh	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	1c9a      	adds	r2, r3, #2
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084d4:	e056      	b.n	8008584 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	2202      	movs	r2, #2
 80084de:	4013      	ands	r3, r2
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d11b      	bne.n	800851c <HAL_SPI_TransmitReceive+0x1d4>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d016      	beq.n	800851c <HAL_SPI_TransmitReceive+0x1d4>
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d113      	bne.n	800851c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f8:	881a      	ldrh	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	1c9a      	adds	r2, r3, #2
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	2201      	movs	r2, #1
 8008524:	4013      	ands	r3, r2
 8008526:	2b01      	cmp	r3, #1
 8008528:	d11c      	bne.n	8008564 <HAL_SPI_TransmitReceive+0x21c>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2246      	movs	r2, #70	; 0x46
 800852e:	5a9b      	ldrh	r3, [r3, r2]
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d016      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	b292      	uxth	r2, r2
 8008542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	1c9a      	adds	r2, r3, #2
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2246      	movs	r2, #70	; 0x46
 8008552:	5a9b      	ldrh	r3, [r3, r2]
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b299      	uxth	r1, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2246      	movs	r2, #70	; 0x46
 800855e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008560:	2301      	movs	r3, #1
 8008562:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008564:	f7fc fa6e 	bl	8004a44 <HAL_GetTick>
 8008568:	0002      	movs	r2, r0
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008570:	429a      	cmp	r2, r3
 8008572:	d807      	bhi.n	8008584 <HAL_SPI_TransmitReceive+0x23c>
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	3301      	adds	r3, #1
 8008578:	d004      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800857a:	2323      	movs	r3, #35	; 0x23
 800857c:	18fb      	adds	r3, r7, r3
 800857e:	2203      	movs	r2, #3
 8008580:	701a      	strb	r2, [r3, #0]
        goto error;
 8008582:	e0a2      	b.n	80086ca <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1a3      	bne.n	80084d6 <HAL_SPI_TransmitReceive+0x18e>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2246      	movs	r2, #70	; 0x46
 8008592:	5a9b      	ldrh	r3, [r3, r2]
 8008594:	b29b      	uxth	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d19d      	bne.n	80084d6 <HAL_SPI_TransmitReceive+0x18e>
 800859a:	e085      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x268>
 80085a4:	2312      	movs	r3, #18
 80085a6:	18fb      	adds	r3, r7, r3
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d000      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x268>
 80085ae:	e070      	b.n	8008692 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	330c      	adds	r3, #12
 80085ba:	7812      	ldrb	r2, [r2, #0]
 80085bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085d6:	e05c      	b.n	8008692 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2202      	movs	r2, #2
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d11c      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x2d8>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d017      	beq.n	8008620 <HAL_SPI_TransmitReceive+0x2d8>
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d114      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	330c      	adds	r3, #12
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008612:	b29b      	uxth	r3, r3
 8008614:	3b01      	subs	r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	2201      	movs	r2, #1
 8008628:	4013      	ands	r3, r2
 800862a:	2b01      	cmp	r3, #1
 800862c:	d11e      	bne.n	800866c <HAL_SPI_TransmitReceive+0x324>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2246      	movs	r2, #70	; 0x46
 8008632:	5a9b      	ldrh	r3, [r3, r2]
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d018      	beq.n	800866c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	330c      	adds	r3, #12
 8008640:	001a      	movs	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2246      	movs	r2, #70	; 0x46
 800865a:	5a9b      	ldrh	r3, [r3, r2]
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b299      	uxth	r1, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2246      	movs	r2, #70	; 0x46
 8008666:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008668:	2301      	movs	r3, #1
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800866c:	f7fc f9ea 	bl	8004a44 <HAL_GetTick>
 8008670:	0002      	movs	r2, r0
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008678:	429a      	cmp	r2, r3
 800867a:	d802      	bhi.n	8008682 <HAL_SPI_TransmitReceive+0x33a>
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	3301      	adds	r3, #1
 8008680:	d102      	bne.n	8008688 <HAL_SPI_TransmitReceive+0x340>
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	2b00      	cmp	r3, #0
 8008686:	d104      	bne.n	8008692 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8008688:	2323      	movs	r3, #35	; 0x23
 800868a:	18fb      	adds	r3, r7, r3
 800868c:	2203      	movs	r2, #3
 800868e:	701a      	strb	r2, [r3, #0]
        goto error;
 8008690:	e01b      	b.n	80086ca <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d19d      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x290>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2246      	movs	r2, #70	; 0x46
 80086a0:	5a9b      	ldrh	r3, [r3, r2]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d197      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	0018      	movs	r0, r3
 80086b0:	f000 f9aa 	bl	8008a08 <SPI_EndRxTxTransaction>
 80086b4:	1e03      	subs	r3, r0, #0
 80086b6:	d007      	beq.n	80086c8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80086b8:	2323      	movs	r3, #35	; 0x23
 80086ba:	18fb      	adds	r3, r7, r3
 80086bc:	2201      	movs	r2, #1
 80086be:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2220      	movs	r2, #32
 80086c4:	661a      	str	r2, [r3, #96]	; 0x60
 80086c6:	e000      	b.n	80086ca <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80086c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	225d      	movs	r2, #93	; 0x5d
 80086ce:	2101      	movs	r1, #1
 80086d0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	225c      	movs	r2, #92	; 0x5c
 80086d6:	2100      	movs	r1, #0
 80086d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80086da:	2323      	movs	r3, #35	; 0x23
 80086dc:	18fb      	adds	r3, r7, r3
 80086de:	781b      	ldrb	r3, [r3, #0]
}
 80086e0:	0018      	movs	r0, r3
 80086e2:	46bd      	mov	sp, r7
 80086e4:	b00a      	add	sp, #40	; 0x28
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	ffffefff 	.word	0xffffefff

080086ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	1dfb      	adds	r3, r7, #7
 80086fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086fc:	f7fc f9a2 	bl	8004a44 <HAL_GetTick>
 8008700:	0002      	movs	r2, r0
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	18d3      	adds	r3, r2, r3
 800870a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800870c:	f7fc f99a 	bl	8004a44 <HAL_GetTick>
 8008710:	0003      	movs	r3, r0
 8008712:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008714:	4b3a      	ldr	r3, [pc, #232]	; (8008800 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	015b      	lsls	r3, r3, #5
 800871a:	0d1b      	lsrs	r3, r3, #20
 800871c:	69fa      	ldr	r2, [r7, #28]
 800871e:	4353      	muls	r3, r2
 8008720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008722:	e058      	b.n	80087d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	d055      	beq.n	80087d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800872a:	f7fc f98b 	bl	8004a44 <HAL_GetTick>
 800872e:	0002      	movs	r2, r0
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	429a      	cmp	r2, r3
 8008738:	d902      	bls.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x54>
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d142      	bne.n	80087c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	21e0      	movs	r1, #224	; 0xe0
 800874c:	438a      	bics	r2, r1
 800874e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	2382      	movs	r3, #130	; 0x82
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	429a      	cmp	r2, r3
 800875a:	d113      	bne.n	8008784 <SPI_WaitFlagStateUntilTimeout+0x98>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	2380      	movs	r3, #128	; 0x80
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	429a      	cmp	r2, r3
 8008766:	d005      	beq.n	8008774 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	2380      	movs	r3, #128	; 0x80
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	429a      	cmp	r2, r3
 8008772:	d107      	bne.n	8008784 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2140      	movs	r1, #64	; 0x40
 8008780:	438a      	bics	r2, r1
 8008782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008788:	2380      	movs	r3, #128	; 0x80
 800878a:	019b      	lsls	r3, r3, #6
 800878c:	429a      	cmp	r2, r3
 800878e:	d110      	bne.n	80087b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	491a      	ldr	r1, [pc, #104]	; (8008804 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800879c:	400a      	ands	r2, r1
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2180      	movs	r1, #128	; 0x80
 80087ac:	0189      	lsls	r1, r1, #6
 80087ae:	430a      	orrs	r2, r1
 80087b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	225d      	movs	r2, #93	; 0x5d
 80087b6:	2101      	movs	r1, #1
 80087b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	225c      	movs	r2, #92	; 0x5c
 80087be:	2100      	movs	r1, #0
 80087c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e017      	b.n	80087f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	4013      	ands	r3, r2
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	425a      	negs	r2, r3
 80087e6:	4153      	adcs	r3, r2
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	001a      	movs	r2, r3
 80087ec:	1dfb      	adds	r3, r7, #7
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d197      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	0018      	movs	r0, r3
 80087f8:	46bd      	mov	sp, r7
 80087fa:	b008      	add	sp, #32
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	20000618 	.word	0x20000618
 8008804:	ffffdfff 	.word	0xffffdfff

08008808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008816:	2317      	movs	r3, #23
 8008818:	18fb      	adds	r3, r7, r3
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800881e:	f7fc f911 	bl	8004a44 <HAL_GetTick>
 8008822:	0002      	movs	r2, r0
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	18d3      	adds	r3, r2, r3
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800882e:	f7fc f909 	bl	8004a44 <HAL_GetTick>
 8008832:	0003      	movs	r3, r0
 8008834:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	330c      	adds	r3, #12
 800883c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800883e:	4b41      	ldr	r3, [pc, #260]	; (8008944 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	0013      	movs	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	189b      	adds	r3, r3, r2
 8008848:	00da      	lsls	r2, r3, #3
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	0d1b      	lsrs	r3, r3, #20
 800884e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008850:	4353      	muls	r3, r2
 8008852:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008854:	e068      	b.n	8008928 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	23c0      	movs	r3, #192	; 0xc0
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	429a      	cmp	r2, r3
 800885e:	d10a      	bne.n	8008876 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	b2da      	uxtb	r2, r3
 800886c:	2117      	movs	r1, #23
 800886e:	187b      	adds	r3, r7, r1
 8008870:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008872:	187b      	adds	r3, r7, r1
 8008874:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	3301      	adds	r3, #1
 800887a:	d055      	beq.n	8008928 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800887c:	f7fc f8e2 	bl	8004a44 <HAL_GetTick>
 8008880:	0002      	movs	r2, r0
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008888:	429a      	cmp	r2, r3
 800888a:	d902      	bls.n	8008892 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	d142      	bne.n	8008918 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	21e0      	movs	r1, #224	; 0xe0
 800889e:	438a      	bics	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	2382      	movs	r3, #130	; 0x82
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d113      	bne.n	80088d6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	2380      	movs	r3, #128	; 0x80
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d005      	beq.n	80088c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	2380      	movs	r3, #128	; 0x80
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d107      	bne.n	80088d6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2140      	movs	r1, #64	; 0x40
 80088d2:	438a      	bics	r2, r1
 80088d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088da:	2380      	movs	r3, #128	; 0x80
 80088dc:	019b      	lsls	r3, r3, #6
 80088de:	429a      	cmp	r2, r3
 80088e0:	d110      	bne.n	8008904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4916      	ldr	r1, [pc, #88]	; (8008948 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80088ee:	400a      	ands	r2, r1
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2180      	movs	r1, #128	; 0x80
 80088fe:	0189      	lsls	r1, r1, #6
 8008900:	430a      	orrs	r2, r1
 8008902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	225d      	movs	r2, #93	; 0x5d
 8008908:	2101      	movs	r1, #1
 800890a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	225c      	movs	r2, #92	; 0x5c
 8008910:	2100      	movs	r1, #0
 8008912:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e010      	b.n	800893a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	3b01      	subs	r3, #1
 8008926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4013      	ands	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d18e      	bne.n	8008856 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	0018      	movs	r0, r3
 800893c:	46bd      	mov	sp, r7
 800893e:	b00a      	add	sp, #40	; 0x28
 8008940:	bd80      	pop	{r7, pc}
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	20000618 	.word	0x20000618
 8008948:	ffffdfff 	.word	0xffffdfff

0800894c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af02      	add	r7, sp, #8
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	2382      	movs	r3, #130	; 0x82
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	429a      	cmp	r2, r3
 8008962:	d113      	bne.n	800898c <SPI_EndRxTransaction+0x40>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	429a      	cmp	r2, r3
 800896e:	d005      	beq.n	800897c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	2380      	movs	r3, #128	; 0x80
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	429a      	cmp	r2, r3
 800897a:	d107      	bne.n	800898c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2140      	movs	r1, #64	; 0x40
 8008988:	438a      	bics	r2, r1
 800898a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	0013      	movs	r3, r2
 8008996:	2200      	movs	r2, #0
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	f7ff fea7 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 800899e:	1e03      	subs	r3, r0, #0
 80089a0:	d007      	beq.n	80089b2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a6:	2220      	movs	r2, #32
 80089a8:	431a      	orrs	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e026      	b.n	8008a00 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	2382      	movs	r3, #130	; 0x82
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d11f      	bne.n	80089fe <SPI_EndRxTransaction+0xb2>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	2380      	movs	r3, #128	; 0x80
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d005      	beq.n	80089d6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	2380      	movs	r3, #128	; 0x80
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d113      	bne.n	80089fe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	23c0      	movs	r3, #192	; 0xc0
 80089da:	00d9      	lsls	r1, r3, #3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	0013      	movs	r3, r2
 80089e4:	2200      	movs	r2, #0
 80089e6:	f7ff ff0f 	bl	8008808 <SPI_WaitFifoStateUntilTimeout>
 80089ea:	1e03      	subs	r3, r0, #0
 80089ec:	d007      	beq.n	80089fe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f2:	2220      	movs	r2, #32
 80089f4:	431a      	orrs	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e000      	b.n	8008a00 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b004      	add	sp, #16
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	23c0      	movs	r3, #192	; 0xc0
 8008a18:	0159      	lsls	r1, r3, #5
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	0013      	movs	r3, r2
 8008a22:	2200      	movs	r2, #0
 8008a24:	f7ff fef0 	bl	8008808 <SPI_WaitFifoStateUntilTimeout>
 8008a28:	1e03      	subs	r3, r0, #0
 8008a2a:	d007      	beq.n	8008a3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a30:	2220      	movs	r2, #32
 8008a32:	431a      	orrs	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e027      	b.n	8008a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	0013      	movs	r3, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	2180      	movs	r1, #128	; 0x80
 8008a4a:	f7ff fe4f 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 8008a4e:	1e03      	subs	r3, r0, #0
 8008a50:	d007      	beq.n	8008a62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a56:	2220      	movs	r2, #32
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e014      	b.n	8008a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	23c0      	movs	r3, #192	; 0xc0
 8008a66:	00d9      	lsls	r1, r3, #3
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	0013      	movs	r3, r2
 8008a70:	2200      	movs	r2, #0
 8008a72:	f7ff fec9 	bl	8008808 <SPI_WaitFifoStateUntilTimeout>
 8008a76:	1e03      	subs	r3, r0, #0
 8008a78:	d007      	beq.n	8008a8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7e:	2220      	movs	r2, #32
 8008a80:	431a      	orrs	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e000      	b.n	8008a8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b004      	add	sp, #16
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	223d      	movs	r2, #61	; 0x3d
 8008aa0:	5c9b      	ldrb	r3, [r3, r2]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d001      	beq.n	8008aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e03b      	b.n	8008b24 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	223d      	movs	r2, #61	; 0x3d
 8008ab0:	2102      	movs	r1, #2
 8008ab2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2101      	movs	r1, #1
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a18      	ldr	r2, [pc, #96]	; (8008b2c <HAL_TIM_Base_Start_IT+0x98>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d00f      	beq.n	8008aee <HAL_TIM_Base_Start_IT+0x5a>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	05db      	lsls	r3, r3, #23
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d009      	beq.n	8008aee <HAL_TIM_Base_Start_IT+0x5a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a14      	ldr	r2, [pc, #80]	; (8008b30 <HAL_TIM_Base_Start_IT+0x9c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <HAL_TIM_Base_Start_IT+0x5a>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a12      	ldr	r2, [pc, #72]	; (8008b34 <HAL_TIM_Base_Start_IT+0xa0>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d111      	bne.n	8008b12 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2207      	movs	r2, #7
 8008af6:	4013      	ands	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b06      	cmp	r3, #6
 8008afe:	d010      	beq.n	8008b22 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b10:	e007      	b.n	8008b22 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	0018      	movs	r0, r3
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b004      	add	sp, #16
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40000400 	.word	0x40000400
 8008b34:	40014000 	.word	0x40014000

08008b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e042      	b.n	8008bd0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	223d      	movs	r2, #61	; 0x3d
 8008b4e:	5c9b      	ldrb	r3, [r3, r2]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d107      	bne.n	8008b66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	223c      	movs	r2, #60	; 0x3c
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	0018      	movs	r0, r3
 8008b62:	f7fb fd39 	bl	80045d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	223d      	movs	r2, #61	; 0x3d
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3304      	adds	r3, #4
 8008b76:	0019      	movs	r1, r3
 8008b78:	0010      	movs	r0, r2
 8008b7a:	f000 fb5d 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2246      	movs	r2, #70	; 0x46
 8008b82:	2101      	movs	r1, #1
 8008b84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	223e      	movs	r2, #62	; 0x3e
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	5499      	strb	r1, [r3, r2]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	223f      	movs	r2, #63	; 0x3f
 8008b92:	2101      	movs	r1, #1
 8008b94:	5499      	strb	r1, [r3, r2]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2240      	movs	r2, #64	; 0x40
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	5499      	strb	r1, [r3, r2]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2241      	movs	r2, #65	; 0x41
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2242      	movs	r2, #66	; 0x42
 8008baa:	2101      	movs	r1, #1
 8008bac:	5499      	strb	r1, [r3, r2]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2243      	movs	r2, #67	; 0x43
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	5499      	strb	r1, [r3, r2]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2244      	movs	r2, #68	; 0x44
 8008bba:	2101      	movs	r1, #1
 8008bbc:	5499      	strb	r1, [r3, r2]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2245      	movs	r2, #69	; 0x45
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	223d      	movs	r2, #61	; 0x3d
 8008bca:	2101      	movs	r1, #1
 8008bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b002      	add	sp, #8
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d108      	bne.n	8008bfa <HAL_TIM_PWM_Start+0x22>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	223e      	movs	r2, #62	; 0x3e
 8008bec:	5c9b      	ldrb	r3, [r3, r2]
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	1e5a      	subs	r2, r3, #1
 8008bf4:	4193      	sbcs	r3, r2
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	e01f      	b.n	8008c3a <HAL_TIM_PWM_Start+0x62>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d108      	bne.n	8008c12 <HAL_TIM_PWM_Start+0x3a>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	223f      	movs	r2, #63	; 0x3f
 8008c04:	5c9b      	ldrb	r3, [r3, r2]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	1e5a      	subs	r2, r3, #1
 8008c0c:	4193      	sbcs	r3, r2
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	e013      	b.n	8008c3a <HAL_TIM_PWM_Start+0x62>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b08      	cmp	r3, #8
 8008c16:	d108      	bne.n	8008c2a <HAL_TIM_PWM_Start+0x52>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2240      	movs	r2, #64	; 0x40
 8008c1c:	5c9b      	ldrb	r3, [r3, r2]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	3b01      	subs	r3, #1
 8008c22:	1e5a      	subs	r2, r3, #1
 8008c24:	4193      	sbcs	r3, r2
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	e007      	b.n	8008c3a <HAL_TIM_PWM_Start+0x62>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2241      	movs	r2, #65	; 0x41
 8008c2e:	5c9b      	ldrb	r3, [r3, r2]
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	1e5a      	subs	r2, r3, #1
 8008c36:	4193      	sbcs	r3, r2
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e074      	b.n	8008d2c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d104      	bne.n	8008c52 <HAL_TIM_PWM_Start+0x7a>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	223e      	movs	r2, #62	; 0x3e
 8008c4c:	2102      	movs	r1, #2
 8008c4e:	5499      	strb	r1, [r3, r2]
 8008c50:	e013      	b.n	8008c7a <HAL_TIM_PWM_Start+0xa2>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d104      	bne.n	8008c62 <HAL_TIM_PWM_Start+0x8a>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	223f      	movs	r2, #63	; 0x3f
 8008c5c:	2102      	movs	r1, #2
 8008c5e:	5499      	strb	r1, [r3, r2]
 8008c60:	e00b      	b.n	8008c7a <HAL_TIM_PWM_Start+0xa2>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d104      	bne.n	8008c72 <HAL_TIM_PWM_Start+0x9a>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2240      	movs	r2, #64	; 0x40
 8008c6c:	2102      	movs	r1, #2
 8008c6e:	5499      	strb	r1, [r3, r2]
 8008c70:	e003      	b.n	8008c7a <HAL_TIM_PWM_Start+0xa2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2241      	movs	r2, #65	; 0x41
 8008c76:	2102      	movs	r1, #2
 8008c78:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	2201      	movs	r2, #1
 8008c82:	0018      	movs	r0, r3
 8008c84:	f000 fd54 	bl	8009730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a29      	ldr	r2, [pc, #164]	; (8008d34 <HAL_TIM_PWM_Start+0x15c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d00e      	beq.n	8008cb0 <HAL_TIM_PWM_Start+0xd8>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a28      	ldr	r2, [pc, #160]	; (8008d38 <HAL_TIM_PWM_Start+0x160>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d009      	beq.n	8008cb0 <HAL_TIM_PWM_Start+0xd8>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a26      	ldr	r2, [pc, #152]	; (8008d3c <HAL_TIM_PWM_Start+0x164>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d004      	beq.n	8008cb0 <HAL_TIM_PWM_Start+0xd8>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a25      	ldr	r2, [pc, #148]	; (8008d40 <HAL_TIM_PWM_Start+0x168>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d101      	bne.n	8008cb4 <HAL_TIM_PWM_Start+0xdc>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <HAL_TIM_PWM_Start+0xde>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2180      	movs	r1, #128	; 0x80
 8008cc6:	0209      	lsls	r1, r1, #8
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a18      	ldr	r2, [pc, #96]	; (8008d34 <HAL_TIM_PWM_Start+0x15c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00f      	beq.n	8008cf6 <HAL_TIM_PWM_Start+0x11e>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	2380      	movs	r3, #128	; 0x80
 8008cdc:	05db      	lsls	r3, r3, #23
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d009      	beq.n	8008cf6 <HAL_TIM_PWM_Start+0x11e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a17      	ldr	r2, [pc, #92]	; (8008d44 <HAL_TIM_PWM_Start+0x16c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d004      	beq.n	8008cf6 <HAL_TIM_PWM_Start+0x11e>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a11      	ldr	r2, [pc, #68]	; (8008d38 <HAL_TIM_PWM_Start+0x160>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d111      	bne.n	8008d1a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	2207      	movs	r2, #7
 8008cfe:	4013      	ands	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b06      	cmp	r3, #6
 8008d06:	d010      	beq.n	8008d2a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2101      	movs	r1, #1
 8008d14:	430a      	orrs	r2, r1
 8008d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d18:	e007      	b.n	8008d2a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2101      	movs	r1, #1
 8008d26:	430a      	orrs	r2, r1
 8008d28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b004      	add	sp, #16
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	40012c00 	.word	0x40012c00
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40014400 	.word	0x40014400
 8008d40:	40014800 	.word	0x40014800
 8008d44:	40000400 	.word	0x40000400

08008d48 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f000 fce8 	bl	8009730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a2f      	ldr	r2, [pc, #188]	; (8008e24 <HAL_TIM_PWM_Stop+0xdc>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00e      	beq.n	8008d88 <HAL_TIM_PWM_Stop+0x40>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a2e      	ldr	r2, [pc, #184]	; (8008e28 <HAL_TIM_PWM_Stop+0xe0>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d009      	beq.n	8008d88 <HAL_TIM_PWM_Stop+0x40>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a2c      	ldr	r2, [pc, #176]	; (8008e2c <HAL_TIM_PWM_Stop+0xe4>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d004      	beq.n	8008d88 <HAL_TIM_PWM_Stop+0x40>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a2b      	ldr	r2, [pc, #172]	; (8008e30 <HAL_TIM_PWM_Stop+0xe8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d101      	bne.n	8008d8c <HAL_TIM_PWM_Stop+0x44>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e000      	b.n	8008d8e <HAL_TIM_PWM_Stop+0x46>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d013      	beq.n	8008dba <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	4a26      	ldr	r2, [pc, #152]	; (8008e34 <HAL_TIM_PWM_Stop+0xec>)
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	d10d      	bne.n	8008dba <HAL_TIM_PWM_Stop+0x72>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	4a24      	ldr	r2, [pc, #144]	; (8008e38 <HAL_TIM_PWM_Stop+0xf0>)
 8008da6:	4013      	ands	r3, r2
 8008da8:	d107      	bne.n	8008dba <HAL_TIM_PWM_Stop+0x72>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4921      	ldr	r1, [pc, #132]	; (8008e3c <HAL_TIM_PWM_Stop+0xf4>)
 8008db6:	400a      	ands	r2, r1
 8008db8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	4a1c      	ldr	r2, [pc, #112]	; (8008e34 <HAL_TIM_PWM_Stop+0xec>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	d10d      	bne.n	8008de2 <HAL_TIM_PWM_Stop+0x9a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	4a1a      	ldr	r2, [pc, #104]	; (8008e38 <HAL_TIM_PWM_Stop+0xf0>)
 8008dce:	4013      	ands	r3, r2
 8008dd0:	d107      	bne.n	8008de2 <HAL_TIM_PWM_Stop+0x9a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2101      	movs	r1, #1
 8008dde:	438a      	bics	r2, r1
 8008de0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <HAL_TIM_PWM_Stop+0xaa>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	223e      	movs	r2, #62	; 0x3e
 8008dec:	2101      	movs	r1, #1
 8008dee:	5499      	strb	r1, [r3, r2]
 8008df0:	e013      	b.n	8008e1a <HAL_TIM_PWM_Stop+0xd2>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_PWM_Stop+0xba>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	223f      	movs	r2, #63	; 0x3f
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	5499      	strb	r1, [r3, r2]
 8008e00:	e00b      	b.n	8008e1a <HAL_TIM_PWM_Stop+0xd2>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Stop+0xca>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2240      	movs	r2, #64	; 0x40
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	5499      	strb	r1, [r3, r2]
 8008e10:	e003      	b.n	8008e1a <HAL_TIM_PWM_Stop+0xd2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2241      	movs	r2, #65	; 0x41
 8008e16:	2101      	movs	r1, #1
 8008e18:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	b002      	add	sp, #8
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	40012c00 	.word	0x40012c00
 8008e28:	40014000 	.word	0x40014000
 8008e2c:	40014400 	.word	0x40014400
 8008e30:	40014800 	.word	0x40014800
 8008e34:	00001111 	.word	0x00001111
 8008e38:	00000444 	.word	0x00000444
 8008e3c:	ffff7fff 	.word	0xffff7fff

08008e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	4013      	ands	r3, r2
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d124      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d11d      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	4252      	negs	r2, r2
 8008e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	d004      	beq.n	8008e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	0018      	movs	r0, r3
 8008e84:	f000 f9c0 	bl	8009208 <HAL_TIM_IC_CaptureCallback>
 8008e88:	e007      	b.n	8008e9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f000 f9b3 	bl	80091f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	0018      	movs	r0, r3
 8008e96:	f000 f9bf 	bl	8009218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d125      	bne.n	8008efa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	2204      	movs	r2, #4
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d11e      	bne.n	8008efa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2205      	movs	r2, #5
 8008ec2:	4252      	negs	r2, r2
 8008ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	23c0      	movs	r3, #192	; 0xc0
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	d004      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	0018      	movs	r0, r3
 8008ede:	f000 f993 	bl	8009208 <HAL_TIM_IC_CaptureCallback>
 8008ee2:	e007      	b.n	8008ef4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f000 f986 	bl	80091f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f000 f992 	bl	8009218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	2208      	movs	r2, #8
 8008f02:	4013      	ands	r3, r2
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d124      	bne.n	8008f52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	2208      	movs	r2, #8
 8008f10:	4013      	ands	r3, r2
 8008f12:	2b08      	cmp	r3, #8
 8008f14:	d11d      	bne.n	8008f52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2209      	movs	r2, #9
 8008f1c:	4252      	negs	r2, r2
 8008f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2204      	movs	r2, #4
 8008f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	4013      	ands	r3, r2
 8008f30:	d004      	beq.n	8008f3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	0018      	movs	r0, r3
 8008f36:	f000 f967 	bl	8009208 <HAL_TIM_IC_CaptureCallback>
 8008f3a:	e007      	b.n	8008f4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f000 f95a 	bl	80091f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	0018      	movs	r0, r3
 8008f48:	f000 f966 	bl	8009218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2210      	movs	r2, #16
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b10      	cmp	r3, #16
 8008f5e:	d125      	bne.n	8008fac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	2210      	movs	r2, #16
 8008f68:	4013      	ands	r3, r2
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d11e      	bne.n	8008fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2211      	movs	r2, #17
 8008f74:	4252      	negs	r2, r2
 8008f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2208      	movs	r2, #8
 8008f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69da      	ldr	r2, [r3, #28]
 8008f84:	23c0      	movs	r3, #192	; 0xc0
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4013      	ands	r3, r2
 8008f8a:	d004      	beq.n	8008f96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	0018      	movs	r0, r3
 8008f90:	f000 f93a 	bl	8009208 <HAL_TIM_IC_CaptureCallback>
 8008f94:	e007      	b.n	8008fa6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f000 f92d 	bl	80091f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f000 f939 	bl	8009218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d10f      	bne.n	8008fda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d108      	bne.n	8008fda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	4252      	negs	r2, r2
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f7f8 fc6f 	bl	80018b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	2280      	movs	r2, #128	; 0x80
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	2b80      	cmp	r3, #128	; 0x80
 8008fe6:	d10f      	bne.n	8009008 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2280      	movs	r2, #128	; 0x80
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	2b80      	cmp	r3, #128	; 0x80
 8008ff4:	d108      	bne.n	8009008 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2281      	movs	r2, #129	; 0x81
 8008ffc:	4252      	negs	r2, r2
 8008ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	0018      	movs	r0, r3
 8009004:	f000 fd18 	bl	8009a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	2240      	movs	r2, #64	; 0x40
 8009010:	4013      	ands	r3, r2
 8009012:	2b40      	cmp	r3, #64	; 0x40
 8009014:	d10f      	bne.n	8009036 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2240      	movs	r2, #64	; 0x40
 800901e:	4013      	ands	r3, r2
 8009020:	2b40      	cmp	r3, #64	; 0x40
 8009022:	d108      	bne.n	8009036 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2241      	movs	r2, #65	; 0x41
 800902a:	4252      	negs	r2, r2
 800902c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	0018      	movs	r0, r3
 8009032:	f000 f8f9 	bl	8009228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2220      	movs	r2, #32
 800903e:	4013      	ands	r3, r2
 8009040:	2b20      	cmp	r3, #32
 8009042:	d10f      	bne.n	8009064 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	4013      	ands	r3, r2
 800904e:	2b20      	cmp	r3, #32
 8009050:	d108      	bne.n	8009064 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2221      	movs	r2, #33	; 0x21
 8009058:	4252      	negs	r2, r2
 800905a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	0018      	movs	r0, r3
 8009060:	f000 fce2 	bl	8009a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009064:	46c0      	nop			; (mov r8, r8)
 8009066:	46bd      	mov	sp, r7
 8009068:	b002      	add	sp, #8
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009078:	2317      	movs	r3, #23
 800907a:	18fb      	adds	r3, r7, r3
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	223c      	movs	r2, #60	; 0x3c
 8009084:	5c9b      	ldrb	r3, [r3, r2]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_TIM_PWM_ConfigChannel+0x22>
 800908a:	2302      	movs	r3, #2
 800908c:	e0ad      	b.n	80091ea <HAL_TIM_PWM_ConfigChannel+0x17e>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	223c      	movs	r2, #60	; 0x3c
 8009092:	2101      	movs	r1, #1
 8009094:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b0c      	cmp	r3, #12
 800909a:	d100      	bne.n	800909e <HAL_TIM_PWM_ConfigChannel+0x32>
 800909c:	e076      	b.n	800918c <HAL_TIM_PWM_ConfigChannel+0x120>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b0c      	cmp	r3, #12
 80090a2:	d900      	bls.n	80090a6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80090a4:	e095      	b.n	80091d2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d04e      	beq.n	800914a <HAL_TIM_PWM_ConfigChannel+0xde>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b08      	cmp	r3, #8
 80090b0:	d900      	bls.n	80090b4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80090b2:	e08e      	b.n	80091d2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d021      	beq.n	8009104 <HAL_TIM_PWM_ConfigChannel+0x98>
 80090c0:	e087      	b.n	80091d2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	0011      	movs	r1, r2
 80090ca:	0018      	movs	r0, r3
 80090cc:	f000 f934 	bl	8009338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699a      	ldr	r2, [r3, #24]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2108      	movs	r1, #8
 80090dc:	430a      	orrs	r2, r1
 80090de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699a      	ldr	r2, [r3, #24]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2104      	movs	r1, #4
 80090ec:	438a      	bics	r2, r1
 80090ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6999      	ldr	r1, [r3, #24]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	691a      	ldr	r2, [r3, #16]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	619a      	str	r2, [r3, #24]
      break;
 8009102:	e06b      	b.n	80091dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	0011      	movs	r1, r2
 800910c:	0018      	movs	r0, r3
 800910e:	f000 f99b 	bl	8009448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	699a      	ldr	r2, [r3, #24]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2180      	movs	r1, #128	; 0x80
 800911e:	0109      	lsls	r1, r1, #4
 8009120:	430a      	orrs	r2, r1
 8009122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4931      	ldr	r1, [pc, #196]	; (80091f4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009130:	400a      	ands	r2, r1
 8009132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6999      	ldr	r1, [r3, #24]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	021a      	lsls	r2, r3, #8
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	619a      	str	r2, [r3, #24]
      break;
 8009148:	e048      	b.n	80091dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	0011      	movs	r1, r2
 8009152:	0018      	movs	r0, r3
 8009154:	f000 f9fc 	bl	8009550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69da      	ldr	r2, [r3, #28]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2108      	movs	r1, #8
 8009164:	430a      	orrs	r2, r1
 8009166:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69da      	ldr	r2, [r3, #28]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2104      	movs	r1, #4
 8009174:	438a      	bics	r2, r1
 8009176:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	69d9      	ldr	r1, [r3, #28]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	691a      	ldr	r2, [r3, #16]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	61da      	str	r2, [r3, #28]
      break;
 800918a:	e027      	b.n	80091dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	0011      	movs	r1, r2
 8009194:	0018      	movs	r0, r3
 8009196:	f000 fa61 	bl	800965c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69da      	ldr	r2, [r3, #28]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2180      	movs	r1, #128	; 0x80
 80091a6:	0109      	lsls	r1, r1, #4
 80091a8:	430a      	orrs	r2, r1
 80091aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69da      	ldr	r2, [r3, #28]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	490f      	ldr	r1, [pc, #60]	; (80091f4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80091b8:	400a      	ands	r2, r1
 80091ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69d9      	ldr	r1, [r3, #28]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	021a      	lsls	r2, r3, #8
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	61da      	str	r2, [r3, #28]
      break;
 80091d0:	e004      	b.n	80091dc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80091d2:	2317      	movs	r3, #23
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	2201      	movs	r2, #1
 80091d8:	701a      	strb	r2, [r3, #0]
      break;
 80091da:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	223c      	movs	r2, #60	; 0x3c
 80091e0:	2100      	movs	r1, #0
 80091e2:	5499      	strb	r1, [r3, r2]

  return status;
 80091e4:	2317      	movs	r3, #23
 80091e6:	18fb      	adds	r3, r7, r3
 80091e8:	781b      	ldrb	r3, [r3, #0]
}
 80091ea:	0018      	movs	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b006      	add	sp, #24
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	fffffbff 	.word	0xfffffbff

080091f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009200:	46c0      	nop			; (mov r8, r8)
 8009202:	46bd      	mov	sp, r7
 8009204:	b002      	add	sp, #8
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009210:	46c0      	nop			; (mov r8, r8)
 8009212:	46bd      	mov	sp, r7
 8009214:	b002      	add	sp, #8
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009220:	46c0      	nop			; (mov r8, r8)
 8009222:	46bd      	mov	sp, r7
 8009224:	b002      	add	sp, #8
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009230:	46c0      	nop			; (mov r8, r8)
 8009232:	46bd      	mov	sp, r7
 8009234:	b002      	add	sp, #8
 8009236:	bd80      	pop	{r7, pc}

08009238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a34      	ldr	r2, [pc, #208]	; (800931c <TIM_Base_SetConfig+0xe4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d008      	beq.n	8009262 <TIM_Base_SetConfig+0x2a>
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	2380      	movs	r3, #128	; 0x80
 8009254:	05db      	lsls	r3, r3, #23
 8009256:	429a      	cmp	r2, r3
 8009258:	d003      	beq.n	8009262 <TIM_Base_SetConfig+0x2a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a30      	ldr	r2, [pc, #192]	; (8009320 <TIM_Base_SetConfig+0xe8>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d108      	bne.n	8009274 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2270      	movs	r2, #112	; 0x70
 8009266:	4393      	bics	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a29      	ldr	r2, [pc, #164]	; (800931c <TIM_Base_SetConfig+0xe4>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d018      	beq.n	80092ae <TIM_Base_SetConfig+0x76>
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	2380      	movs	r3, #128	; 0x80
 8009280:	05db      	lsls	r3, r3, #23
 8009282:	429a      	cmp	r2, r3
 8009284:	d013      	beq.n	80092ae <TIM_Base_SetConfig+0x76>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a25      	ldr	r2, [pc, #148]	; (8009320 <TIM_Base_SetConfig+0xe8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d00f      	beq.n	80092ae <TIM_Base_SetConfig+0x76>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a24      	ldr	r2, [pc, #144]	; (8009324 <TIM_Base_SetConfig+0xec>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d00b      	beq.n	80092ae <TIM_Base_SetConfig+0x76>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a23      	ldr	r2, [pc, #140]	; (8009328 <TIM_Base_SetConfig+0xf0>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d007      	beq.n	80092ae <TIM_Base_SetConfig+0x76>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a22      	ldr	r2, [pc, #136]	; (800932c <TIM_Base_SetConfig+0xf4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d003      	beq.n	80092ae <TIM_Base_SetConfig+0x76>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a21      	ldr	r2, [pc, #132]	; (8009330 <TIM_Base_SetConfig+0xf8>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d108      	bne.n	80092c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4a20      	ldr	r2, [pc, #128]	; (8009334 <TIM_Base_SetConfig+0xfc>)
 80092b2:	4013      	ands	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2280      	movs	r2, #128	; 0x80
 80092c4:	4393      	bics	r3, r2
 80092c6:	001a      	movs	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a0c      	ldr	r2, [pc, #48]	; (800931c <TIM_Base_SetConfig+0xe4>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d00b      	beq.n	8009306 <TIM_Base_SetConfig+0xce>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a0d      	ldr	r2, [pc, #52]	; (8009328 <TIM_Base_SetConfig+0xf0>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d007      	beq.n	8009306 <TIM_Base_SetConfig+0xce>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a0c      	ldr	r2, [pc, #48]	; (800932c <TIM_Base_SetConfig+0xf4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d003      	beq.n	8009306 <TIM_Base_SetConfig+0xce>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a0b      	ldr	r2, [pc, #44]	; (8009330 <TIM_Base_SetConfig+0xf8>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d103      	bne.n	800930e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	691a      	ldr	r2, [r3, #16]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	615a      	str	r2, [r3, #20]
}
 8009314:	46c0      	nop			; (mov r8, r8)
 8009316:	46bd      	mov	sp, r7
 8009318:	b004      	add	sp, #16
 800931a:	bd80      	pop	{r7, pc}
 800931c:	40012c00 	.word	0x40012c00
 8009320:	40000400 	.word	0x40000400
 8009324:	40002000 	.word	0x40002000
 8009328:	40014000 	.word	0x40014000
 800932c:	40014400 	.word	0x40014400
 8009330:	40014800 	.word	0x40014800
 8009334:	fffffcff 	.word	0xfffffcff

08009338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	2201      	movs	r2, #1
 8009348:	4393      	bics	r3, r2
 800934a:	001a      	movs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2270      	movs	r2, #112	; 0x70
 8009366:	4393      	bics	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2203      	movs	r2, #3
 800936e:	4393      	bics	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2202      	movs	r2, #2
 8009380:	4393      	bics	r3, r2
 8009382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	4313      	orrs	r3, r2
 800938c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a27      	ldr	r2, [pc, #156]	; (8009430 <TIM_OC1_SetConfig+0xf8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00b      	beq.n	80093ae <TIM_OC1_SetConfig+0x76>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a26      	ldr	r2, [pc, #152]	; (8009434 <TIM_OC1_SetConfig+0xfc>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d007      	beq.n	80093ae <TIM_OC1_SetConfig+0x76>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a25      	ldr	r2, [pc, #148]	; (8009438 <TIM_OC1_SetConfig+0x100>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d003      	beq.n	80093ae <TIM_OC1_SetConfig+0x76>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a24      	ldr	r2, [pc, #144]	; (800943c <TIM_OC1_SetConfig+0x104>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d10c      	bne.n	80093c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2208      	movs	r2, #8
 80093b2:	4393      	bics	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	4313      	orrs	r3, r2
 80093be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2204      	movs	r2, #4
 80093c4:	4393      	bics	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a19      	ldr	r2, [pc, #100]	; (8009430 <TIM_OC1_SetConfig+0xf8>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00b      	beq.n	80093e8 <TIM_OC1_SetConfig+0xb0>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a18      	ldr	r2, [pc, #96]	; (8009434 <TIM_OC1_SetConfig+0xfc>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_OC1_SetConfig+0xb0>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a17      	ldr	r2, [pc, #92]	; (8009438 <TIM_OC1_SetConfig+0x100>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC1_SetConfig+0xb0>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a16      	ldr	r2, [pc, #88]	; (800943c <TIM_OC1_SetConfig+0x104>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d111      	bne.n	800940c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	4a15      	ldr	r2, [pc, #84]	; (8009440 <TIM_OC1_SetConfig+0x108>)
 80093ec:	4013      	ands	r3, r2
 80093ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	4a14      	ldr	r2, [pc, #80]	; (8009444 <TIM_OC1_SetConfig+0x10c>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	4313      	orrs	r3, r2
 800940a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	621a      	str	r2, [r3, #32]
}
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	46bd      	mov	sp, r7
 800942a:	b006      	add	sp, #24
 800942c:	bd80      	pop	{r7, pc}
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	40012c00 	.word	0x40012c00
 8009434:	40014000 	.word	0x40014000
 8009438:	40014400 	.word	0x40014400
 800943c:	40014800 	.word	0x40014800
 8009440:	fffffeff 	.word	0xfffffeff
 8009444:	fffffdff 	.word	0xfffffdff

08009448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	2210      	movs	r2, #16
 8009458:	4393      	bics	r3, r2
 800945a:	001a      	movs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4a2e      	ldr	r2, [pc, #184]	; (8009530 <TIM_OC2_SetConfig+0xe8>)
 8009476:	4013      	ands	r3, r2
 8009478:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4a2d      	ldr	r2, [pc, #180]	; (8009534 <TIM_OC2_SetConfig+0xec>)
 800947e:	4013      	ands	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	021b      	lsls	r3, r3, #8
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2220      	movs	r2, #32
 8009492:	4393      	bics	r3, r2
 8009494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	4313      	orrs	r3, r2
 80094a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a24      	ldr	r2, [pc, #144]	; (8009538 <TIM_OC2_SetConfig+0xf0>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d10d      	bne.n	80094c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2280      	movs	r2, #128	; 0x80
 80094ae:	4393      	bics	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	011b      	lsls	r3, r3, #4
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2240      	movs	r2, #64	; 0x40
 80094c2:	4393      	bics	r3, r2
 80094c4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1b      	ldr	r2, [pc, #108]	; (8009538 <TIM_OC2_SetConfig+0xf0>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00b      	beq.n	80094e6 <TIM_OC2_SetConfig+0x9e>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a1a      	ldr	r2, [pc, #104]	; (800953c <TIM_OC2_SetConfig+0xf4>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d007      	beq.n	80094e6 <TIM_OC2_SetConfig+0x9e>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a19      	ldr	r2, [pc, #100]	; (8009540 <TIM_OC2_SetConfig+0xf8>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d003      	beq.n	80094e6 <TIM_OC2_SetConfig+0x9e>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a18      	ldr	r2, [pc, #96]	; (8009544 <TIM_OC2_SetConfig+0xfc>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d113      	bne.n	800950e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	4a17      	ldr	r2, [pc, #92]	; (8009548 <TIM_OC2_SetConfig+0x100>)
 80094ea:	4013      	ands	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	4a16      	ldr	r2, [pc, #88]	; (800954c <TIM_OC2_SetConfig+0x104>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	4313      	orrs	r3, r2
 800950c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	621a      	str	r2, [r3, #32]
}
 8009528:	46c0      	nop			; (mov r8, r8)
 800952a:	46bd      	mov	sp, r7
 800952c:	b006      	add	sp, #24
 800952e:	bd80      	pop	{r7, pc}
 8009530:	ffff8fff 	.word	0xffff8fff
 8009534:	fffffcff 	.word	0xfffffcff
 8009538:	40012c00 	.word	0x40012c00
 800953c:	40014000 	.word	0x40014000
 8009540:	40014400 	.word	0x40014400
 8009544:	40014800 	.word	0x40014800
 8009548:	fffffbff 	.word	0xfffffbff
 800954c:	fffff7ff 	.word	0xfffff7ff

08009550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	4a35      	ldr	r2, [pc, #212]	; (8009634 <TIM_OC3_SetConfig+0xe4>)
 8009560:	401a      	ands	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2270      	movs	r2, #112	; 0x70
 800957c:	4393      	bics	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2203      	movs	r2, #3
 8009584:	4393      	bics	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	4a28      	ldr	r2, [pc, #160]	; (8009638 <TIM_OC3_SetConfig+0xe8>)
 8009596:	4013      	ands	r3, r2
 8009598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	021b      	lsls	r3, r3, #8
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a24      	ldr	r2, [pc, #144]	; (800963c <TIM_OC3_SetConfig+0xec>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d10d      	bne.n	80095ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	4a23      	ldr	r2, [pc, #140]	; (8009640 <TIM_OC3_SetConfig+0xf0>)
 80095b2:	4013      	ands	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	4313      	orrs	r3, r2
 80095c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	4a1f      	ldr	r2, [pc, #124]	; (8009644 <TIM_OC3_SetConfig+0xf4>)
 80095c6:	4013      	ands	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a1b      	ldr	r2, [pc, #108]	; (800963c <TIM_OC3_SetConfig+0xec>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d00b      	beq.n	80095ea <TIM_OC3_SetConfig+0x9a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a1c      	ldr	r2, [pc, #112]	; (8009648 <TIM_OC3_SetConfig+0xf8>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d007      	beq.n	80095ea <TIM_OC3_SetConfig+0x9a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a1b      	ldr	r2, [pc, #108]	; (800964c <TIM_OC3_SetConfig+0xfc>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d003      	beq.n	80095ea <TIM_OC3_SetConfig+0x9a>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a1a      	ldr	r2, [pc, #104]	; (8009650 <TIM_OC3_SetConfig+0x100>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d113      	bne.n	8009612 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	4a19      	ldr	r2, [pc, #100]	; (8009654 <TIM_OC3_SetConfig+0x104>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	4a18      	ldr	r2, [pc, #96]	; (8009658 <TIM_OC3_SetConfig+0x108>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	4313      	orrs	r3, r2
 8009610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	621a      	str	r2, [r3, #32]
}
 800962c:	46c0      	nop			; (mov r8, r8)
 800962e:	46bd      	mov	sp, r7
 8009630:	b006      	add	sp, #24
 8009632:	bd80      	pop	{r7, pc}
 8009634:	fffffeff 	.word	0xfffffeff
 8009638:	fffffdff 	.word	0xfffffdff
 800963c:	40012c00 	.word	0x40012c00
 8009640:	fffff7ff 	.word	0xfffff7ff
 8009644:	fffffbff 	.word	0xfffffbff
 8009648:	40014000 	.word	0x40014000
 800964c:	40014400 	.word	0x40014400
 8009650:	40014800 	.word	0x40014800
 8009654:	ffffefff 	.word	0xffffefff
 8009658:	ffffdfff 	.word	0xffffdfff

0800965c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	4a28      	ldr	r2, [pc, #160]	; (800970c <TIM_OC4_SetConfig+0xb0>)
 800966c:	401a      	ands	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4a22      	ldr	r2, [pc, #136]	; (8009710 <TIM_OC4_SetConfig+0xb4>)
 8009688:	4013      	ands	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4a21      	ldr	r2, [pc, #132]	; (8009714 <TIM_OC4_SetConfig+0xb8>)
 8009690:	4013      	ands	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	021b      	lsls	r3, r3, #8
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	4a1d      	ldr	r2, [pc, #116]	; (8009718 <TIM_OC4_SetConfig+0xbc>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	031b      	lsls	r3, r3, #12
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a19      	ldr	r2, [pc, #100]	; (800971c <TIM_OC4_SetConfig+0xc0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00b      	beq.n	80096d4 <TIM_OC4_SetConfig+0x78>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a18      	ldr	r2, [pc, #96]	; (8009720 <TIM_OC4_SetConfig+0xc4>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d007      	beq.n	80096d4 <TIM_OC4_SetConfig+0x78>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a17      	ldr	r2, [pc, #92]	; (8009724 <TIM_OC4_SetConfig+0xc8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_OC4_SetConfig+0x78>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a16      	ldr	r2, [pc, #88]	; (8009728 <TIM_OC4_SetConfig+0xcc>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d109      	bne.n	80096e8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	4a15      	ldr	r2, [pc, #84]	; (800972c <TIM_OC4_SetConfig+0xd0>)
 80096d8:	4013      	ands	r3, r2
 80096da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	019b      	lsls	r3, r3, #6
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	621a      	str	r2, [r3, #32]
}
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	46bd      	mov	sp, r7
 8009706:	b006      	add	sp, #24
 8009708:	bd80      	pop	{r7, pc}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	ffffefff 	.word	0xffffefff
 8009710:	ffff8fff 	.word	0xffff8fff
 8009714:	fffffcff 	.word	0xfffffcff
 8009718:	ffffdfff 	.word	0xffffdfff
 800971c:	40012c00 	.word	0x40012c00
 8009720:	40014000 	.word	0x40014000
 8009724:	40014400 	.word	0x40014400
 8009728:	40014800 	.word	0x40014800
 800972c:	ffffbfff 	.word	0xffffbfff

08009730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	221f      	movs	r2, #31
 8009740:	4013      	ands	r3, r2
 8009742:	2201      	movs	r2, #1
 8009744:	409a      	lsls	r2, r3
 8009746:	0013      	movs	r3, r2
 8009748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	43d2      	mvns	r2, r2
 8009752:	401a      	ands	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a1a      	ldr	r2, [r3, #32]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	211f      	movs	r1, #31
 8009760:	400b      	ands	r3, r1
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4099      	lsls	r1, r3
 8009766:	000b      	movs	r3, r1
 8009768:	431a      	orrs	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	621a      	str	r2, [r3, #32]
}
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	46bd      	mov	sp, r7
 8009772:	b006      	add	sp, #24
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d108      	bne.n	800979a <HAL_TIMEx_PWMN_Start+0x22>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2242      	movs	r2, #66	; 0x42
 800978c:	5c9b      	ldrb	r3, [r3, r2]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	3b01      	subs	r3, #1
 8009792:	1e5a      	subs	r2, r3, #1
 8009794:	4193      	sbcs	r3, r2
 8009796:	b2db      	uxtb	r3, r3
 8009798:	e01f      	b.n	80097da <HAL_TIMEx_PWMN_Start+0x62>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b04      	cmp	r3, #4
 800979e:	d108      	bne.n	80097b2 <HAL_TIMEx_PWMN_Start+0x3a>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2243      	movs	r2, #67	; 0x43
 80097a4:	5c9b      	ldrb	r3, [r3, r2]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	1e5a      	subs	r2, r3, #1
 80097ac:	4193      	sbcs	r3, r2
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	e013      	b.n	80097da <HAL_TIMEx_PWMN_Start+0x62>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d108      	bne.n	80097ca <HAL_TIMEx_PWMN_Start+0x52>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2244      	movs	r2, #68	; 0x44
 80097bc:	5c9b      	ldrb	r3, [r3, r2]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	3b01      	subs	r3, #1
 80097c2:	1e5a      	subs	r2, r3, #1
 80097c4:	4193      	sbcs	r3, r2
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	e007      	b.n	80097da <HAL_TIMEx_PWMN_Start+0x62>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2245      	movs	r2, #69	; 0x45
 80097ce:	5c9b      	ldrb	r3, [r3, r2]
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	1e5a      	subs	r2, r3, #1
 80097d6:	4193      	sbcs	r3, r2
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e05b      	b.n	800989a <HAL_TIMEx_PWMN_Start+0x122>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d104      	bne.n	80097f2 <HAL_TIMEx_PWMN_Start+0x7a>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2242      	movs	r2, #66	; 0x42
 80097ec:	2102      	movs	r1, #2
 80097ee:	5499      	strb	r1, [r3, r2]
 80097f0:	e013      	b.n	800981a <HAL_TIMEx_PWMN_Start+0xa2>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b04      	cmp	r3, #4
 80097f6:	d104      	bne.n	8009802 <HAL_TIMEx_PWMN_Start+0x8a>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2243      	movs	r2, #67	; 0x43
 80097fc:	2102      	movs	r1, #2
 80097fe:	5499      	strb	r1, [r3, r2]
 8009800:	e00b      	b.n	800981a <HAL_TIMEx_PWMN_Start+0xa2>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b08      	cmp	r3, #8
 8009806:	d104      	bne.n	8009812 <HAL_TIMEx_PWMN_Start+0x9a>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2244      	movs	r2, #68	; 0x44
 800980c:	2102      	movs	r1, #2
 800980e:	5499      	strb	r1, [r3, r2]
 8009810:	e003      	b.n	800981a <HAL_TIMEx_PWMN_Start+0xa2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2245      	movs	r2, #69	; 0x45
 8009816:	2102      	movs	r1, #2
 8009818:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	2204      	movs	r2, #4
 8009822:	0018      	movs	r0, r3
 8009824:	f000 f910 	bl	8009a48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2180      	movs	r1, #128	; 0x80
 8009834:	0209      	lsls	r1, r1, #8
 8009836:	430a      	orrs	r2, r1
 8009838:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a19      	ldr	r2, [pc, #100]	; (80098a4 <HAL_TIMEx_PWMN_Start+0x12c>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00f      	beq.n	8009864 <HAL_TIMEx_PWMN_Start+0xec>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	2380      	movs	r3, #128	; 0x80
 800984a:	05db      	lsls	r3, r3, #23
 800984c:	429a      	cmp	r2, r3
 800984e:	d009      	beq.n	8009864 <HAL_TIMEx_PWMN_Start+0xec>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <HAL_TIMEx_PWMN_Start+0x130>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d004      	beq.n	8009864 <HAL_TIMEx_PWMN_Start+0xec>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a13      	ldr	r2, [pc, #76]	; (80098ac <HAL_TIMEx_PWMN_Start+0x134>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d111      	bne.n	8009888 <HAL_TIMEx_PWMN_Start+0x110>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	2207      	movs	r2, #7
 800986c:	4013      	ands	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b06      	cmp	r3, #6
 8009874:	d010      	beq.n	8009898 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2101      	movs	r1, #1
 8009882:	430a      	orrs	r2, r1
 8009884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009886:	e007      	b.n	8009898 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2101      	movs	r1, #1
 8009894:	430a      	orrs	r2, r1
 8009896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	0018      	movs	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	b004      	add	sp, #16
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	40012c00 	.word	0x40012c00
 80098a8:	40000400 	.word	0x40000400
 80098ac:	40014000 	.word	0x40014000

080098b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	223c      	movs	r2, #60	; 0x3c
 80098be:	5c9b      	ldrb	r3, [r3, r2]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e047      	b.n	8009958 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	223c      	movs	r2, #60	; 0x3c
 80098cc:	2101      	movs	r1, #1
 80098ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	223d      	movs	r2, #61	; 0x3d
 80098d4:	2102      	movs	r1, #2
 80098d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2270      	movs	r2, #112	; 0x70
 80098ec:	4393      	bics	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a16      	ldr	r2, [pc, #88]	; (8009960 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d00f      	beq.n	800992c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	2380      	movs	r3, #128	; 0x80
 8009912:	05db      	lsls	r3, r3, #23
 8009914:	429a      	cmp	r2, r3
 8009916:	d009      	beq.n	800992c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a11      	ldr	r2, [pc, #68]	; (8009964 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d004      	beq.n	800992c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a10      	ldr	r2, [pc, #64]	; (8009968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d10c      	bne.n	8009946 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2280      	movs	r2, #128	; 0x80
 8009930:	4393      	bics	r3, r2
 8009932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	4313      	orrs	r3, r2
 800993c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	223d      	movs	r2, #61	; 0x3d
 800994a:	2101      	movs	r1, #1
 800994c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	223c      	movs	r2, #60	; 0x3c
 8009952:	2100      	movs	r1, #0
 8009954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	0018      	movs	r0, r3
 800995a:	46bd      	mov	sp, r7
 800995c:	b004      	add	sp, #16
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40012c00 	.word	0x40012c00
 8009964:	40000400 	.word	0x40000400
 8009968:	40014000 	.word	0x40014000

0800996c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	223c      	movs	r2, #60	; 0x3c
 800997e:	5c9b      	ldrb	r3, [r3, r2]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009984:	2302      	movs	r3, #2
 8009986:	e03e      	b.n	8009a06 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	223c      	movs	r2, #60	; 0x3c
 800998c:	2101      	movs	r1, #1
 800998e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	22ff      	movs	r2, #255	; 0xff
 8009994:	4393      	bics	r3, r2
 8009996:	001a      	movs	r2, r3
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	4313      	orrs	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a1b      	ldr	r2, [pc, #108]	; (8009a10 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80099a4:	401a      	ands	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4a18      	ldr	r2, [pc, #96]	; (8009a14 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80099b2:	401a      	ands	r2, r3
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4a16      	ldr	r2, [pc, #88]	; (8009a18 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80099c0:	401a      	ands	r2, r3
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	4a13      	ldr	r2, [pc, #76]	; (8009a1c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80099ce:	401a      	ands	r2, r3
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4a11      	ldr	r2, [pc, #68]	; (8009a20 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80099dc:	401a      	ands	r2, r3
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80099ea:	401a      	ands	r2, r3
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	223c      	movs	r2, #60	; 0x3c
 8009a00:	2100      	movs	r1, #0
 8009a02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	0018      	movs	r0, r3
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	b004      	add	sp, #16
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	fffffcff 	.word	0xfffffcff
 8009a14:	fffffbff 	.word	0xfffffbff
 8009a18:	fffff7ff 	.word	0xfffff7ff
 8009a1c:	ffffefff 	.word	0xffffefff
 8009a20:	ffffdfff 	.word	0xffffdfff
 8009a24:	ffffbfff 	.word	0xffffbfff

08009a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a30:	46c0      	nop			; (mov r8, r8)
 8009a32:	46bd      	mov	sp, r7
 8009a34:	b002      	add	sp, #8
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a40:	46c0      	nop			; (mov r8, r8)
 8009a42:	46bd      	mov	sp, r7
 8009a44:	b002      	add	sp, #8
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	221f      	movs	r2, #31
 8009a58:	4013      	ands	r3, r2
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	409a      	lsls	r2, r3
 8009a5e:	0013      	movs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	43d2      	mvns	r2, r2
 8009a6a:	401a      	ands	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6a1a      	ldr	r2, [r3, #32]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	211f      	movs	r1, #31
 8009a78:	400b      	ands	r3, r1
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4099      	lsls	r1, r3
 8009a7e:	000b      	movs	r3, r1
 8009a80:	431a      	orrs	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	621a      	str	r2, [r3, #32]
}
 8009a86:	46c0      	nop			; (mov r8, r8)
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	b006      	add	sp, #24
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e044      	b.n	8009b2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d107      	bne.n	8009aba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2274      	movs	r2, #116	; 0x74
 8009aae:	2100      	movs	r1, #0
 8009ab0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f7fa fe59 	bl	800476c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2224      	movs	r2, #36	; 0x24
 8009abe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2101      	movs	r1, #1
 8009acc:	438a      	bics	r2, r1
 8009ace:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f000 f8da 	bl	8009c8c <UART_SetConfig>
 8009ad8:	0003      	movs	r3, r0
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e024      	b.n	8009b2c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	0018      	movs	r0, r3
 8009aee:	f000 fa0d 	bl	8009f0c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	490d      	ldr	r1, [pc, #52]	; (8009b34 <HAL_UART_Init+0xa4>)
 8009afe:	400a      	ands	r2, r1
 8009b00:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	212a      	movs	r1, #42	; 0x2a
 8009b0e:	438a      	bics	r2, r1
 8009b10:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	0018      	movs	r0, r3
 8009b26:	f000 faa5 	bl	800a074 <UART_CheckIdleState>
 8009b2a:	0003      	movs	r3, r0
}
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	b002      	add	sp, #8
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	ffffb7ff 	.word	0xffffb7ff

08009b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	; 0x28
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	1dbb      	adds	r3, r7, #6
 8009b46:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	d000      	beq.n	8009b52 <HAL_UART_Transmit+0x1a>
 8009b50:	e096      	b.n	8009c80 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d003      	beq.n	8009b60 <HAL_UART_Transmit+0x28>
 8009b58:	1dbb      	adds	r3, r7, #6
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e08e      	b.n	8009c82 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	2380      	movs	r3, #128	; 0x80
 8009b6a:	015b      	lsls	r3, r3, #5
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d109      	bne.n	8009b84 <HAL_UART_Transmit+0x4c>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d105      	bne.n	8009b84 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d001      	beq.n	8009b84 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e07e      	b.n	8009c82 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2274      	movs	r2, #116	; 0x74
 8009b88:	5c9b      	ldrb	r3, [r3, r2]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d101      	bne.n	8009b92 <HAL_UART_Transmit+0x5a>
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e077      	b.n	8009c82 <HAL_UART_Transmit+0x14a>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2274      	movs	r2, #116	; 0x74
 8009b96:	2101      	movs	r1, #1
 8009b98:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2280      	movs	r2, #128	; 0x80
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2221      	movs	r2, #33	; 0x21
 8009ba6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ba8:	f7fa ff4c 	bl	8004a44 <HAL_GetTick>
 8009bac:	0003      	movs	r3, r0
 8009bae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	1dba      	adds	r2, r7, #6
 8009bb4:	2150      	movs	r1, #80	; 0x50
 8009bb6:	8812      	ldrh	r2, [r2, #0]
 8009bb8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	1dba      	adds	r2, r7, #6
 8009bbe:	2152      	movs	r1, #82	; 0x52
 8009bc0:	8812      	ldrh	r2, [r2, #0]
 8009bc2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	2380      	movs	r3, #128	; 0x80
 8009bca:	015b      	lsls	r3, r3, #5
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d108      	bne.n	8009be2 <HAL_UART_Transmit+0xaa>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	e003      	b.n	8009bea <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2274      	movs	r2, #116	; 0x74
 8009bee:	2100      	movs	r1, #0
 8009bf0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009bf2:	e02d      	b.n	8009c50 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	0013      	movs	r3, r2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2180      	movs	r1, #128	; 0x80
 8009c02:	f000 fa7f 	bl	800a104 <UART_WaitOnFlagUntilTimeout>
 8009c06:	1e03      	subs	r3, r0, #0
 8009c08:	d001      	beq.n	8009c0e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e039      	b.n	8009c82 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10b      	bne.n	8009c2c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	881a      	ldrh	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	05d2      	lsls	r2, r2, #23
 8009c1e:	0dd2      	lsrs	r2, r2, #23
 8009c20:	b292      	uxth	r2, r2
 8009c22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	3302      	adds	r3, #2
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	e008      	b.n	8009c3e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	b292      	uxth	r2, r2
 8009c36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2252      	movs	r2, #82	; 0x52
 8009c42:	5a9b      	ldrh	r3, [r3, r2]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	3b01      	subs	r3, #1
 8009c48:	b299      	uxth	r1, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2252      	movs	r2, #82	; 0x52
 8009c4e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2252      	movs	r2, #82	; 0x52
 8009c54:	5a9b      	ldrh	r3, [r3, r2]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1cb      	bne.n	8009bf4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	0013      	movs	r3, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	2140      	movs	r1, #64	; 0x40
 8009c6a:	f000 fa4b 	bl	800a104 <UART_WaitOnFlagUntilTimeout>
 8009c6e:	1e03      	subs	r3, r0, #0
 8009c70:	d001      	beq.n	8009c76 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e005      	b.n	8009c82 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e000      	b.n	8009c82 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009c80:	2302      	movs	r3, #2
  }
}
 8009c82:	0018      	movs	r0, r3
 8009c84:	46bd      	mov	sp, r7
 8009c86:	b008      	add	sp, #32
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c94:	231e      	movs	r3, #30
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	431a      	orrs	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	69db      	ldr	r3, [r3, #28]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a8d      	ldr	r2, [pc, #564]	; (8009ef0 <UART_SetConfig+0x264>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	0019      	movs	r1, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	4a88      	ldr	r2, [pc, #544]	; (8009ef4 <UART_SetConfig+0x268>)
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	0019      	movs	r1, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68da      	ldr	r2, [r3, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	4a7f      	ldr	r2, [pc, #508]	; (8009ef8 <UART_SetConfig+0x26c>)
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	0019      	movs	r1, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a7b      	ldr	r2, [pc, #492]	; (8009efc <UART_SetConfig+0x270>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d127      	bne.n	8009d62 <UART_SetConfig+0xd6>
 8009d12:	4b7b      	ldr	r3, [pc, #492]	; (8009f00 <UART_SetConfig+0x274>)
 8009d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d16:	2203      	movs	r2, #3
 8009d18:	4013      	ands	r3, r2
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d00d      	beq.n	8009d3a <UART_SetConfig+0xae>
 8009d1e:	d81b      	bhi.n	8009d58 <UART_SetConfig+0xcc>
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d014      	beq.n	8009d4e <UART_SetConfig+0xc2>
 8009d24:	d818      	bhi.n	8009d58 <UART_SetConfig+0xcc>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <UART_SetConfig+0xa4>
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d00a      	beq.n	8009d44 <UART_SetConfig+0xb8>
 8009d2e:	e013      	b.n	8009d58 <UART_SetConfig+0xcc>
 8009d30:	231f      	movs	r3, #31
 8009d32:	18fb      	adds	r3, r7, r3
 8009d34:	2200      	movs	r2, #0
 8009d36:	701a      	strb	r2, [r3, #0]
 8009d38:	e021      	b.n	8009d7e <UART_SetConfig+0xf2>
 8009d3a:	231f      	movs	r3, #31
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	2202      	movs	r2, #2
 8009d40:	701a      	strb	r2, [r3, #0]
 8009d42:	e01c      	b.n	8009d7e <UART_SetConfig+0xf2>
 8009d44:	231f      	movs	r3, #31
 8009d46:	18fb      	adds	r3, r7, r3
 8009d48:	2204      	movs	r2, #4
 8009d4a:	701a      	strb	r2, [r3, #0]
 8009d4c:	e017      	b.n	8009d7e <UART_SetConfig+0xf2>
 8009d4e:	231f      	movs	r3, #31
 8009d50:	18fb      	adds	r3, r7, r3
 8009d52:	2208      	movs	r2, #8
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	e012      	b.n	8009d7e <UART_SetConfig+0xf2>
 8009d58:	231f      	movs	r3, #31
 8009d5a:	18fb      	adds	r3, r7, r3
 8009d5c:	2210      	movs	r2, #16
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	e00d      	b.n	8009d7e <UART_SetConfig+0xf2>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a67      	ldr	r2, [pc, #412]	; (8009f04 <UART_SetConfig+0x278>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d104      	bne.n	8009d76 <UART_SetConfig+0xea>
 8009d6c:	231f      	movs	r3, #31
 8009d6e:	18fb      	adds	r3, r7, r3
 8009d70:	2200      	movs	r2, #0
 8009d72:	701a      	strb	r2, [r3, #0]
 8009d74:	e003      	b.n	8009d7e <UART_SetConfig+0xf2>
 8009d76:	231f      	movs	r3, #31
 8009d78:	18fb      	adds	r3, r7, r3
 8009d7a:	2210      	movs	r2, #16
 8009d7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69da      	ldr	r2, [r3, #28]
 8009d82:	2380      	movs	r3, #128	; 0x80
 8009d84:	021b      	lsls	r3, r3, #8
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d15d      	bne.n	8009e46 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8009d8a:	231f      	movs	r3, #31
 8009d8c:	18fb      	adds	r3, r7, r3
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d015      	beq.n	8009dc0 <UART_SetConfig+0x134>
 8009d94:	dc18      	bgt.n	8009dc8 <UART_SetConfig+0x13c>
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d00d      	beq.n	8009db6 <UART_SetConfig+0x12a>
 8009d9a:	dc15      	bgt.n	8009dc8 <UART_SetConfig+0x13c>
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <UART_SetConfig+0x11a>
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d005      	beq.n	8009db0 <UART_SetConfig+0x124>
 8009da4:	e010      	b.n	8009dc8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009da6:	f7fd febf 	bl	8007b28 <HAL_RCC_GetPCLK1Freq>
 8009daa:	0003      	movs	r3, r0
 8009dac:	61bb      	str	r3, [r7, #24]
        break;
 8009dae:	e012      	b.n	8009dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009db0:	4b55      	ldr	r3, [pc, #340]	; (8009f08 <UART_SetConfig+0x27c>)
 8009db2:	61bb      	str	r3, [r7, #24]
        break;
 8009db4:	e00f      	b.n	8009dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009db6:	f7fd fe49 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8009dba:	0003      	movs	r3, r0
 8009dbc:	61bb      	str	r3, [r7, #24]
        break;
 8009dbe:	e00a      	b.n	8009dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dc0:	2380      	movs	r3, #128	; 0x80
 8009dc2:	021b      	lsls	r3, r3, #8
 8009dc4:	61bb      	str	r3, [r7, #24]
        break;
 8009dc6:	e006      	b.n	8009dd6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dcc:	231e      	movs	r3, #30
 8009dce:	18fb      	adds	r3, r7, r3
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	701a      	strb	r2, [r3, #0]
        break;
 8009dd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d100      	bne.n	8009dde <UART_SetConfig+0x152>
 8009ddc:	e07b      	b.n	8009ed6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	005a      	lsls	r2, r3, #1
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	18d2      	adds	r2, r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	0019      	movs	r1, r3
 8009df0:	0010      	movs	r0, r2
 8009df2:	f7f6 f99b 	bl	800012c <__udivsi3>
 8009df6:	0003      	movs	r3, r0
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	2b0f      	cmp	r3, #15
 8009e00:	d91c      	bls.n	8009e3c <UART_SetConfig+0x1b0>
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	2380      	movs	r3, #128	; 0x80
 8009e06:	025b      	lsls	r3, r3, #9
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d217      	bcs.n	8009e3c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	200e      	movs	r0, #14
 8009e12:	183b      	adds	r3, r7, r0
 8009e14:	210f      	movs	r1, #15
 8009e16:	438a      	bics	r2, r1
 8009e18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	085b      	lsrs	r3, r3, #1
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	2207      	movs	r2, #7
 8009e22:	4013      	ands	r3, r2
 8009e24:	b299      	uxth	r1, r3
 8009e26:	183b      	adds	r3, r7, r0
 8009e28:	183a      	adds	r2, r7, r0
 8009e2a:	8812      	ldrh	r2, [r2, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	183a      	adds	r2, r7, r0
 8009e36:	8812      	ldrh	r2, [r2, #0]
 8009e38:	60da      	str	r2, [r3, #12]
 8009e3a:	e04c      	b.n	8009ed6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8009e3c:	231e      	movs	r3, #30
 8009e3e:	18fb      	adds	r3, r7, r3
 8009e40:	2201      	movs	r2, #1
 8009e42:	701a      	strb	r2, [r3, #0]
 8009e44:	e047      	b.n	8009ed6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e46:	231f      	movs	r3, #31
 8009e48:	18fb      	adds	r3, r7, r3
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d015      	beq.n	8009e7c <UART_SetConfig+0x1f0>
 8009e50:	dc18      	bgt.n	8009e84 <UART_SetConfig+0x1f8>
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d00d      	beq.n	8009e72 <UART_SetConfig+0x1e6>
 8009e56:	dc15      	bgt.n	8009e84 <UART_SetConfig+0x1f8>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <UART_SetConfig+0x1d6>
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d005      	beq.n	8009e6c <UART_SetConfig+0x1e0>
 8009e60:	e010      	b.n	8009e84 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e62:	f7fd fe61 	bl	8007b28 <HAL_RCC_GetPCLK1Freq>
 8009e66:	0003      	movs	r3, r0
 8009e68:	61bb      	str	r3, [r7, #24]
        break;
 8009e6a:	e012      	b.n	8009e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e6c:	4b26      	ldr	r3, [pc, #152]	; (8009f08 <UART_SetConfig+0x27c>)
 8009e6e:	61bb      	str	r3, [r7, #24]
        break;
 8009e70:	e00f      	b.n	8009e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e72:	f7fd fdeb 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8009e76:	0003      	movs	r3, r0
 8009e78:	61bb      	str	r3, [r7, #24]
        break;
 8009e7a:	e00a      	b.n	8009e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e7c:	2380      	movs	r3, #128	; 0x80
 8009e7e:	021b      	lsls	r3, r3, #8
 8009e80:	61bb      	str	r3, [r7, #24]
        break;
 8009e82:	e006      	b.n	8009e92 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e88:	231e      	movs	r3, #30
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	701a      	strb	r2, [r3, #0]
        break;
 8009e90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d01e      	beq.n	8009ed6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	085a      	lsrs	r2, r3, #1
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	18d2      	adds	r2, r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	0019      	movs	r1, r3
 8009ea8:	0010      	movs	r0, r2
 8009eaa:	f7f6 f93f 	bl	800012c <__udivsi3>
 8009eae:	0003      	movs	r3, r0
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b0f      	cmp	r3, #15
 8009eb8:	d909      	bls.n	8009ece <UART_SetConfig+0x242>
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	2380      	movs	r3, #128	; 0x80
 8009ebe:	025b      	lsls	r3, r3, #9
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d204      	bcs.n	8009ece <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	60da      	str	r2, [r3, #12]
 8009ecc:	e003      	b.n	8009ed6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8009ece:	231e      	movs	r3, #30
 8009ed0:	18fb      	adds	r3, r7, r3
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ee2:	231e      	movs	r3, #30
 8009ee4:	18fb      	adds	r3, r7, r3
 8009ee6:	781b      	ldrb	r3, [r3, #0]
}
 8009ee8:	0018      	movs	r0, r3
 8009eea:	46bd      	mov	sp, r7
 8009eec:	b008      	add	sp, #32
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	ffff69f3 	.word	0xffff69f3
 8009ef4:	ffffcfff 	.word	0xffffcfff
 8009ef8:	fffff4ff 	.word	0xfffff4ff
 8009efc:	40013800 	.word	0x40013800
 8009f00:	40021000 	.word	0x40021000
 8009f04:	40004400 	.word	0x40004400
 8009f08:	007a1200 	.word	0x007a1200

08009f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	2201      	movs	r2, #1
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	d00b      	beq.n	8009f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4a4a      	ldr	r2, [pc, #296]	; (800a050 <UART_AdvFeatureConfig+0x144>)
 8009f26:	4013      	ands	r3, r2
 8009f28:	0019      	movs	r1, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	d00b      	beq.n	8009f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	4a43      	ldr	r2, [pc, #268]	; (800a054 <UART_AdvFeatureConfig+0x148>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	0019      	movs	r1, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2204      	movs	r2, #4
 8009f5e:	4013      	ands	r3, r2
 8009f60:	d00b      	beq.n	8009f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	4a3b      	ldr	r2, [pc, #236]	; (800a058 <UART_AdvFeatureConfig+0x14c>)
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	0019      	movs	r1, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7e:	2208      	movs	r2, #8
 8009f80:	4013      	ands	r3, r2
 8009f82:	d00b      	beq.n	8009f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	4a34      	ldr	r2, [pc, #208]	; (800a05c <UART_AdvFeatureConfig+0x150>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	0019      	movs	r1, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	2210      	movs	r2, #16
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	d00b      	beq.n	8009fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	4a2c      	ldr	r2, [pc, #176]	; (800a060 <UART_AdvFeatureConfig+0x154>)
 8009fae:	4013      	ands	r3, r2
 8009fb0:	0019      	movs	r1, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	d00b      	beq.n	8009fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	4a25      	ldr	r2, [pc, #148]	; (800a064 <UART_AdvFeatureConfig+0x158>)
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	0019      	movs	r1, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	2240      	movs	r2, #64	; 0x40
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	d01d      	beq.n	800a026 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	4a1d      	ldr	r2, [pc, #116]	; (800a068 <UART_AdvFeatureConfig+0x15c>)
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	0019      	movs	r1, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a006:	2380      	movs	r3, #128	; 0x80
 800a008:	035b      	lsls	r3, r3, #13
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d10b      	bne.n	800a026 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	4a15      	ldr	r2, [pc, #84]	; (800a06c <UART_AdvFeatureConfig+0x160>)
 800a016:	4013      	ands	r3, r2
 800a018:	0019      	movs	r1, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	2280      	movs	r2, #128	; 0x80
 800a02c:	4013      	ands	r3, r2
 800a02e:	d00b      	beq.n	800a048 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	4a0e      	ldr	r2, [pc, #56]	; (800a070 <UART_AdvFeatureConfig+0x164>)
 800a038:	4013      	ands	r3, r2
 800a03a:	0019      	movs	r1, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	605a      	str	r2, [r3, #4]
  }
}
 800a048:	46c0      	nop			; (mov r8, r8)
 800a04a:	46bd      	mov	sp, r7
 800a04c:	b002      	add	sp, #8
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	fffdffff 	.word	0xfffdffff
 800a054:	fffeffff 	.word	0xfffeffff
 800a058:	fffbffff 	.word	0xfffbffff
 800a05c:	ffff7fff 	.word	0xffff7fff
 800a060:	ffffefff 	.word	0xffffefff
 800a064:	ffffdfff 	.word	0xffffdfff
 800a068:	ffefffff 	.word	0xffefffff
 800a06c:	ff9fffff 	.word	0xff9fffff
 800a070:	fff7ffff 	.word	0xfff7ffff

0800a074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af02      	add	r7, sp, #8
 800a07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2280      	movs	r2, #128	; 0x80
 800a080:	2100      	movs	r1, #0
 800a082:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a084:	f7fa fcde 	bl	8004a44 <HAL_GetTick>
 800a088:	0003      	movs	r3, r0
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2208      	movs	r2, #8
 800a094:	4013      	ands	r3, r2
 800a096:	2b08      	cmp	r3, #8
 800a098:	d10c      	bne.n	800a0b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2280      	movs	r2, #128	; 0x80
 800a09e:	0391      	lsls	r1, r2, #14
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	4a17      	ldr	r2, [pc, #92]	; (800a100 <UART_CheckIdleState+0x8c>)
 800a0a4:	9200      	str	r2, [sp, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f000 f82c 	bl	800a104 <UART_WaitOnFlagUntilTimeout>
 800a0ac:	1e03      	subs	r3, r0, #0
 800a0ae:	d001      	beq.n	800a0b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e021      	b.n	800a0f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2204      	movs	r2, #4
 800a0bc:	4013      	ands	r3, r2
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d10c      	bne.n	800a0dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2280      	movs	r2, #128	; 0x80
 800a0c6:	03d1      	lsls	r1, r2, #15
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4a0d      	ldr	r2, [pc, #52]	; (800a100 <UART_CheckIdleState+0x8c>)
 800a0cc:	9200      	str	r2, [sp, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f000 f818 	bl	800a104 <UART_WaitOnFlagUntilTimeout>
 800a0d4:	1e03      	subs	r3, r0, #0
 800a0d6:	d001      	beq.n	800a0dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e00d      	b.n	800a0f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2220      	movs	r2, #32
 800a0e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2274      	movs	r2, #116	; 0x74
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b004      	add	sp, #16
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	01ffffff 	.word	0x01ffffff

0800a104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b094      	sub	sp, #80	; 0x50
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	1dfb      	adds	r3, r7, #7
 800a112:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a114:	e0a3      	b.n	800a25e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a118:	3301      	adds	r3, #1
 800a11a:	d100      	bne.n	800a11e <UART_WaitOnFlagUntilTimeout+0x1a>
 800a11c:	e09f      	b.n	800a25e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a11e:	f7fa fc91 	bl	8004a44 <HAL_GetTick>
 800a122:	0002      	movs	r2, r0
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d302      	bcc.n	800a134 <UART_WaitOnFlagUntilTimeout+0x30>
 800a12e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a130:	2b00      	cmp	r3, #0
 800a132:	d13d      	bne.n	800a1b0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a134:	f3ef 8310 	mrs	r3, PRIMASK
 800a138:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a13c:	647b      	str	r3, [r7, #68]	; 0x44
 800a13e:	2301      	movs	r3, #1
 800a140:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	f383 8810 	msr	PRIMASK, r3
}
 800a148:	46c0      	nop			; (mov r8, r8)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	494c      	ldr	r1, [pc, #304]	; (800a288 <UART_WaitOnFlagUntilTimeout+0x184>)
 800a156:	400a      	ands	r2, r1
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a15c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	f383 8810 	msr	PRIMASK, r3
}
 800a164:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a166:	f3ef 8310 	mrs	r3, PRIMASK
 800a16a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800a16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a16e:	643b      	str	r3, [r7, #64]	; 0x40
 800a170:	2301      	movs	r3, #1
 800a172:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	f383 8810 	msr	PRIMASK, r3
}
 800a17a:	46c0      	nop			; (mov r8, r8)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2101      	movs	r1, #1
 800a188:	438a      	bics	r2, r1
 800a18a:	609a      	str	r2, [r3, #8]
 800a18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a192:	f383 8810 	msr	PRIMASK, r3
}
 800a196:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2220      	movs	r2, #32
 800a19c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2274      	movs	r2, #116	; 0x74
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e067      	b.n	800a280 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	d050      	beq.n	800a25e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	69da      	ldr	r2, [r3, #28]
 800a1c2:	2380      	movs	r3, #128	; 0x80
 800a1c4:	011b      	lsls	r3, r3, #4
 800a1c6:	401a      	ands	r2, r3
 800a1c8:	2380      	movs	r3, #128	; 0x80
 800a1ca:	011b      	lsls	r3, r3, #4
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d146      	bne.n	800a25e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2280      	movs	r2, #128	; 0x80
 800a1d6:	0112      	lsls	r2, r2, #4
 800a1d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1da:	f3ef 8310 	mrs	r3, PRIMASK
 800a1de:	613b      	str	r3, [r7, #16]
  return(result);
 800a1e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f383 8810 	msr	PRIMASK, r3
}
 800a1ee:	46c0      	nop			; (mov r8, r8)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4923      	ldr	r1, [pc, #140]	; (800a288 <UART_WaitOnFlagUntilTimeout+0x184>)
 800a1fc:	400a      	ands	r2, r1
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a202:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	f383 8810 	msr	PRIMASK, r3
}
 800a20a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a20c:	f3ef 8310 	mrs	r3, PRIMASK
 800a210:	61fb      	str	r3, [r7, #28]
  return(result);
 800a212:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a214:	64bb      	str	r3, [r7, #72]	; 0x48
 800a216:	2301      	movs	r3, #1
 800a218:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	f383 8810 	msr	PRIMASK, r3
}
 800a220:	46c0      	nop			; (mov r8, r8)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2101      	movs	r1, #1
 800a22e:	438a      	bics	r2, r1
 800a230:	609a      	str	r2, [r3, #8]
 800a232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a234:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	f383 8810 	msr	PRIMASK, r3
}
 800a23c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2220      	movs	r2, #32
 800a242:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2220      	movs	r2, #32
 800a248:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2280      	movs	r2, #128	; 0x80
 800a24e:	2120      	movs	r1, #32
 800a250:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2274      	movs	r2, #116	; 0x74
 800a256:	2100      	movs	r1, #0
 800a258:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e010      	b.n	800a280 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	4013      	ands	r3, r2
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	425a      	negs	r2, r3
 800a26e:	4153      	adcs	r3, r2
 800a270:	b2db      	uxtb	r3, r3
 800a272:	001a      	movs	r2, r3
 800a274:	1dfb      	adds	r3, r7, #7
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d100      	bne.n	800a27e <UART_WaitOnFlagUntilTimeout+0x17a>
 800a27c:	e74b      	b.n	800a116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	0018      	movs	r0, r3
 800a282:	46bd      	mov	sp, r7
 800a284:	b014      	add	sp, #80	; 0x50
 800a286:	bd80      	pop	{r7, pc}
 800a288:	fffffe5f 	.word	0xfffffe5f

0800a28c <__errno>:
 800a28c:	4b01      	ldr	r3, [pc, #4]	; (800a294 <__errno+0x8>)
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	4770      	bx	lr
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	20000624 	.word	0x20000624

0800a298 <__libc_init_array>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	2600      	movs	r6, #0
 800a29c:	4d0c      	ldr	r5, [pc, #48]	; (800a2d0 <__libc_init_array+0x38>)
 800a29e:	4c0d      	ldr	r4, [pc, #52]	; (800a2d4 <__libc_init_array+0x3c>)
 800a2a0:	1b64      	subs	r4, r4, r5
 800a2a2:	10a4      	asrs	r4, r4, #2
 800a2a4:	42a6      	cmp	r6, r4
 800a2a6:	d109      	bne.n	800a2bc <__libc_init_array+0x24>
 800a2a8:	2600      	movs	r6, #0
 800a2aa:	f000 fc9f 	bl	800abec <_init>
 800a2ae:	4d0a      	ldr	r5, [pc, #40]	; (800a2d8 <__libc_init_array+0x40>)
 800a2b0:	4c0a      	ldr	r4, [pc, #40]	; (800a2dc <__libc_init_array+0x44>)
 800a2b2:	1b64      	subs	r4, r4, r5
 800a2b4:	10a4      	asrs	r4, r4, #2
 800a2b6:	42a6      	cmp	r6, r4
 800a2b8:	d105      	bne.n	800a2c6 <__libc_init_array+0x2e>
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	00b3      	lsls	r3, r6, #2
 800a2be:	58eb      	ldr	r3, [r5, r3]
 800a2c0:	4798      	blx	r3
 800a2c2:	3601      	adds	r6, #1
 800a2c4:	e7ee      	b.n	800a2a4 <__libc_init_array+0xc>
 800a2c6:	00b3      	lsls	r3, r6, #2
 800a2c8:	58eb      	ldr	r3, [r5, r3]
 800a2ca:	4798      	blx	r3
 800a2cc:	3601      	adds	r6, #1
 800a2ce:	e7f2      	b.n	800a2b6 <__libc_init_array+0x1e>
 800a2d0:	0800bb38 	.word	0x0800bb38
 800a2d4:	0800bb38 	.word	0x0800bb38
 800a2d8:	0800bb38 	.word	0x0800bb38
 800a2dc:	0800bb3c 	.word	0x0800bb3c

0800a2e0 <memset>:
 800a2e0:	0003      	movs	r3, r0
 800a2e2:	1882      	adds	r2, r0, r2
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d100      	bne.n	800a2ea <memset+0xa>
 800a2e8:	4770      	bx	lr
 800a2ea:	7019      	strb	r1, [r3, #0]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	e7f9      	b.n	800a2e4 <memset+0x4>

0800a2f0 <siprintf>:
 800a2f0:	b40e      	push	{r1, r2, r3}
 800a2f2:	b500      	push	{lr}
 800a2f4:	490b      	ldr	r1, [pc, #44]	; (800a324 <siprintf+0x34>)
 800a2f6:	b09c      	sub	sp, #112	; 0x70
 800a2f8:	ab1d      	add	r3, sp, #116	; 0x74
 800a2fa:	9002      	str	r0, [sp, #8]
 800a2fc:	9006      	str	r0, [sp, #24]
 800a2fe:	9107      	str	r1, [sp, #28]
 800a300:	9104      	str	r1, [sp, #16]
 800a302:	4809      	ldr	r0, [pc, #36]	; (800a328 <siprintf+0x38>)
 800a304:	4909      	ldr	r1, [pc, #36]	; (800a32c <siprintf+0x3c>)
 800a306:	cb04      	ldmia	r3!, {r2}
 800a308:	9105      	str	r1, [sp, #20]
 800a30a:	6800      	ldr	r0, [r0, #0]
 800a30c:	a902      	add	r1, sp, #8
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	f000 f884 	bl	800a41c <_svfiprintf_r>
 800a314:	2300      	movs	r3, #0
 800a316:	9a02      	ldr	r2, [sp, #8]
 800a318:	7013      	strb	r3, [r2, #0]
 800a31a:	b01c      	add	sp, #112	; 0x70
 800a31c:	bc08      	pop	{r3}
 800a31e:	b003      	add	sp, #12
 800a320:	4718      	bx	r3
 800a322:	46c0      	nop			; (mov r8, r8)
 800a324:	7fffffff 	.word	0x7fffffff
 800a328:	20000624 	.word	0x20000624
 800a32c:	ffff0208 	.word	0xffff0208

0800a330 <strncpy>:
 800a330:	0003      	movs	r3, r0
 800a332:	b530      	push	{r4, r5, lr}
 800a334:	001d      	movs	r5, r3
 800a336:	2a00      	cmp	r2, #0
 800a338:	d006      	beq.n	800a348 <strncpy+0x18>
 800a33a:	780c      	ldrb	r4, [r1, #0]
 800a33c:	3a01      	subs	r2, #1
 800a33e:	3301      	adds	r3, #1
 800a340:	702c      	strb	r4, [r5, #0]
 800a342:	3101      	adds	r1, #1
 800a344:	2c00      	cmp	r4, #0
 800a346:	d1f5      	bne.n	800a334 <strncpy+0x4>
 800a348:	2100      	movs	r1, #0
 800a34a:	189a      	adds	r2, r3, r2
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d100      	bne.n	800a352 <strncpy+0x22>
 800a350:	bd30      	pop	{r4, r5, pc}
 800a352:	7019      	strb	r1, [r3, #0]
 800a354:	3301      	adds	r3, #1
 800a356:	e7f9      	b.n	800a34c <strncpy+0x1c>

0800a358 <__ssputs_r>:
 800a358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a35a:	688e      	ldr	r6, [r1, #8]
 800a35c:	b085      	sub	sp, #20
 800a35e:	0007      	movs	r7, r0
 800a360:	000c      	movs	r4, r1
 800a362:	9203      	str	r2, [sp, #12]
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	429e      	cmp	r6, r3
 800a368:	d83c      	bhi.n	800a3e4 <__ssputs_r+0x8c>
 800a36a:	2390      	movs	r3, #144	; 0x90
 800a36c:	898a      	ldrh	r2, [r1, #12]
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	421a      	tst	r2, r3
 800a372:	d034      	beq.n	800a3de <__ssputs_r+0x86>
 800a374:	6909      	ldr	r1, [r1, #16]
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	6960      	ldr	r0, [r4, #20]
 800a37a:	1a5b      	subs	r3, r3, r1
 800a37c:	9302      	str	r3, [sp, #8]
 800a37e:	2303      	movs	r3, #3
 800a380:	4343      	muls	r3, r0
 800a382:	0fdd      	lsrs	r5, r3, #31
 800a384:	18ed      	adds	r5, r5, r3
 800a386:	9b01      	ldr	r3, [sp, #4]
 800a388:	9802      	ldr	r0, [sp, #8]
 800a38a:	3301      	adds	r3, #1
 800a38c:	181b      	adds	r3, r3, r0
 800a38e:	106d      	asrs	r5, r5, #1
 800a390:	42ab      	cmp	r3, r5
 800a392:	d900      	bls.n	800a396 <__ssputs_r+0x3e>
 800a394:	001d      	movs	r5, r3
 800a396:	0553      	lsls	r3, r2, #21
 800a398:	d532      	bpl.n	800a400 <__ssputs_r+0xa8>
 800a39a:	0029      	movs	r1, r5
 800a39c:	0038      	movs	r0, r7
 800a39e:	f000 fb53 	bl	800aa48 <_malloc_r>
 800a3a2:	1e06      	subs	r6, r0, #0
 800a3a4:	d109      	bne.n	800a3ba <__ssputs_r+0x62>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	603b      	str	r3, [r7, #0]
 800a3aa:	2340      	movs	r3, #64	; 0x40
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	89a2      	ldrh	r2, [r4, #12]
 800a3b0:	4240      	negs	r0, r0
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	b005      	add	sp, #20
 800a3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ba:	9a02      	ldr	r2, [sp, #8]
 800a3bc:	6921      	ldr	r1, [r4, #16]
 800a3be:	f000 faba 	bl	800a936 <memcpy>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	4a14      	ldr	r2, [pc, #80]	; (800a418 <__ssputs_r+0xc0>)
 800a3c6:	401a      	ands	r2, r3
 800a3c8:	2380      	movs	r3, #128	; 0x80
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	81a3      	strh	r3, [r4, #12]
 800a3ce:	9b02      	ldr	r3, [sp, #8]
 800a3d0:	6126      	str	r6, [r4, #16]
 800a3d2:	18f6      	adds	r6, r6, r3
 800a3d4:	6026      	str	r6, [r4, #0]
 800a3d6:	6165      	str	r5, [r4, #20]
 800a3d8:	9e01      	ldr	r6, [sp, #4]
 800a3da:	1aed      	subs	r5, r5, r3
 800a3dc:	60a5      	str	r5, [r4, #8]
 800a3de:	9b01      	ldr	r3, [sp, #4]
 800a3e0:	429e      	cmp	r6, r3
 800a3e2:	d900      	bls.n	800a3e6 <__ssputs_r+0x8e>
 800a3e4:	9e01      	ldr	r6, [sp, #4]
 800a3e6:	0032      	movs	r2, r6
 800a3e8:	9903      	ldr	r1, [sp, #12]
 800a3ea:	6820      	ldr	r0, [r4, #0]
 800a3ec:	f000 faac 	bl	800a948 <memmove>
 800a3f0:	68a3      	ldr	r3, [r4, #8]
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	1b9b      	subs	r3, r3, r6
 800a3f6:	60a3      	str	r3, [r4, #8]
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	199e      	adds	r6, r3, r6
 800a3fc:	6026      	str	r6, [r4, #0]
 800a3fe:	e7da      	b.n	800a3b6 <__ssputs_r+0x5e>
 800a400:	002a      	movs	r2, r5
 800a402:	0038      	movs	r0, r7
 800a404:	f000 fb96 	bl	800ab34 <_realloc_r>
 800a408:	1e06      	subs	r6, r0, #0
 800a40a:	d1e0      	bne.n	800a3ce <__ssputs_r+0x76>
 800a40c:	0038      	movs	r0, r7
 800a40e:	6921      	ldr	r1, [r4, #16]
 800a410:	f000 faae 	bl	800a970 <_free_r>
 800a414:	e7c7      	b.n	800a3a6 <__ssputs_r+0x4e>
 800a416:	46c0      	nop			; (mov r8, r8)
 800a418:	fffffb7f 	.word	0xfffffb7f

0800a41c <_svfiprintf_r>:
 800a41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a41e:	b0a1      	sub	sp, #132	; 0x84
 800a420:	9003      	str	r0, [sp, #12]
 800a422:	001d      	movs	r5, r3
 800a424:	898b      	ldrh	r3, [r1, #12]
 800a426:	000f      	movs	r7, r1
 800a428:	0016      	movs	r6, r2
 800a42a:	061b      	lsls	r3, r3, #24
 800a42c:	d511      	bpl.n	800a452 <_svfiprintf_r+0x36>
 800a42e:	690b      	ldr	r3, [r1, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10e      	bne.n	800a452 <_svfiprintf_r+0x36>
 800a434:	2140      	movs	r1, #64	; 0x40
 800a436:	f000 fb07 	bl	800aa48 <_malloc_r>
 800a43a:	6038      	str	r0, [r7, #0]
 800a43c:	6138      	str	r0, [r7, #16]
 800a43e:	2800      	cmp	r0, #0
 800a440:	d105      	bne.n	800a44e <_svfiprintf_r+0x32>
 800a442:	230c      	movs	r3, #12
 800a444:	9a03      	ldr	r2, [sp, #12]
 800a446:	3801      	subs	r0, #1
 800a448:	6013      	str	r3, [r2, #0]
 800a44a:	b021      	add	sp, #132	; 0x84
 800a44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a44e:	2340      	movs	r3, #64	; 0x40
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	2300      	movs	r3, #0
 800a454:	ac08      	add	r4, sp, #32
 800a456:	6163      	str	r3, [r4, #20]
 800a458:	3320      	adds	r3, #32
 800a45a:	7663      	strb	r3, [r4, #25]
 800a45c:	3310      	adds	r3, #16
 800a45e:	76a3      	strb	r3, [r4, #26]
 800a460:	9507      	str	r5, [sp, #28]
 800a462:	0035      	movs	r5, r6
 800a464:	782b      	ldrb	r3, [r5, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <_svfiprintf_r+0x52>
 800a46a:	2b25      	cmp	r3, #37	; 0x25
 800a46c:	d147      	bne.n	800a4fe <_svfiprintf_r+0xe2>
 800a46e:	1bab      	subs	r3, r5, r6
 800a470:	9305      	str	r3, [sp, #20]
 800a472:	42b5      	cmp	r5, r6
 800a474:	d00c      	beq.n	800a490 <_svfiprintf_r+0x74>
 800a476:	0032      	movs	r2, r6
 800a478:	0039      	movs	r1, r7
 800a47a:	9803      	ldr	r0, [sp, #12]
 800a47c:	f7ff ff6c 	bl	800a358 <__ssputs_r>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d100      	bne.n	800a486 <_svfiprintf_r+0x6a>
 800a484:	e0ae      	b.n	800a5e4 <_svfiprintf_r+0x1c8>
 800a486:	6962      	ldr	r2, [r4, #20]
 800a488:	9b05      	ldr	r3, [sp, #20]
 800a48a:	4694      	mov	ip, r2
 800a48c:	4463      	add	r3, ip
 800a48e:	6163      	str	r3, [r4, #20]
 800a490:	782b      	ldrb	r3, [r5, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d100      	bne.n	800a498 <_svfiprintf_r+0x7c>
 800a496:	e0a5      	b.n	800a5e4 <_svfiprintf_r+0x1c8>
 800a498:	2201      	movs	r2, #1
 800a49a:	2300      	movs	r3, #0
 800a49c:	4252      	negs	r2, r2
 800a49e:	6062      	str	r2, [r4, #4]
 800a4a0:	a904      	add	r1, sp, #16
 800a4a2:	3254      	adds	r2, #84	; 0x54
 800a4a4:	1852      	adds	r2, r2, r1
 800a4a6:	1c6e      	adds	r6, r5, #1
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	60e3      	str	r3, [r4, #12]
 800a4ac:	60a3      	str	r3, [r4, #8]
 800a4ae:	7013      	strb	r3, [r2, #0]
 800a4b0:	65a3      	str	r3, [r4, #88]	; 0x58
 800a4b2:	2205      	movs	r2, #5
 800a4b4:	7831      	ldrb	r1, [r6, #0]
 800a4b6:	4854      	ldr	r0, [pc, #336]	; (800a608 <_svfiprintf_r+0x1ec>)
 800a4b8:	f000 fa32 	bl	800a920 <memchr>
 800a4bc:	1c75      	adds	r5, r6, #1
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d11f      	bne.n	800a502 <_svfiprintf_r+0xe6>
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	06d3      	lsls	r3, r2, #27
 800a4c6:	d504      	bpl.n	800a4d2 <_svfiprintf_r+0xb6>
 800a4c8:	2353      	movs	r3, #83	; 0x53
 800a4ca:	a904      	add	r1, sp, #16
 800a4cc:	185b      	adds	r3, r3, r1
 800a4ce:	2120      	movs	r1, #32
 800a4d0:	7019      	strb	r1, [r3, #0]
 800a4d2:	0713      	lsls	r3, r2, #28
 800a4d4:	d504      	bpl.n	800a4e0 <_svfiprintf_r+0xc4>
 800a4d6:	2353      	movs	r3, #83	; 0x53
 800a4d8:	a904      	add	r1, sp, #16
 800a4da:	185b      	adds	r3, r3, r1
 800a4dc:	212b      	movs	r1, #43	; 0x2b
 800a4de:	7019      	strb	r1, [r3, #0]
 800a4e0:	7833      	ldrb	r3, [r6, #0]
 800a4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e4:	d016      	beq.n	800a514 <_svfiprintf_r+0xf8>
 800a4e6:	0035      	movs	r5, r6
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	200a      	movs	r0, #10
 800a4ec:	68e3      	ldr	r3, [r4, #12]
 800a4ee:	782a      	ldrb	r2, [r5, #0]
 800a4f0:	1c6e      	adds	r6, r5, #1
 800a4f2:	3a30      	subs	r2, #48	; 0x30
 800a4f4:	2a09      	cmp	r2, #9
 800a4f6:	d94e      	bls.n	800a596 <_svfiprintf_r+0x17a>
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	d111      	bne.n	800a520 <_svfiprintf_r+0x104>
 800a4fc:	e017      	b.n	800a52e <_svfiprintf_r+0x112>
 800a4fe:	3501      	adds	r5, #1
 800a500:	e7b0      	b.n	800a464 <_svfiprintf_r+0x48>
 800a502:	4b41      	ldr	r3, [pc, #260]	; (800a608 <_svfiprintf_r+0x1ec>)
 800a504:	6822      	ldr	r2, [r4, #0]
 800a506:	1ac0      	subs	r0, r0, r3
 800a508:	2301      	movs	r3, #1
 800a50a:	4083      	lsls	r3, r0
 800a50c:	4313      	orrs	r3, r2
 800a50e:	002e      	movs	r6, r5
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	e7ce      	b.n	800a4b2 <_svfiprintf_r+0x96>
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	1d19      	adds	r1, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9107      	str	r1, [sp, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	db01      	blt.n	800a524 <_svfiprintf_r+0x108>
 800a520:	930b      	str	r3, [sp, #44]	; 0x2c
 800a522:	e004      	b.n	800a52e <_svfiprintf_r+0x112>
 800a524:	425b      	negs	r3, r3
 800a526:	60e3      	str	r3, [r4, #12]
 800a528:	2302      	movs	r3, #2
 800a52a:	4313      	orrs	r3, r2
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	782b      	ldrb	r3, [r5, #0]
 800a530:	2b2e      	cmp	r3, #46	; 0x2e
 800a532:	d10a      	bne.n	800a54a <_svfiprintf_r+0x12e>
 800a534:	786b      	ldrb	r3, [r5, #1]
 800a536:	2b2a      	cmp	r3, #42	; 0x2a
 800a538:	d135      	bne.n	800a5a6 <_svfiprintf_r+0x18a>
 800a53a:	9b07      	ldr	r3, [sp, #28]
 800a53c:	3502      	adds	r5, #2
 800a53e:	1d1a      	adds	r2, r3, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	9207      	str	r2, [sp, #28]
 800a544:	2b00      	cmp	r3, #0
 800a546:	db2b      	blt.n	800a5a0 <_svfiprintf_r+0x184>
 800a548:	9309      	str	r3, [sp, #36]	; 0x24
 800a54a:	4e30      	ldr	r6, [pc, #192]	; (800a60c <_svfiprintf_r+0x1f0>)
 800a54c:	2203      	movs	r2, #3
 800a54e:	0030      	movs	r0, r6
 800a550:	7829      	ldrb	r1, [r5, #0]
 800a552:	f000 f9e5 	bl	800a920 <memchr>
 800a556:	2800      	cmp	r0, #0
 800a558:	d006      	beq.n	800a568 <_svfiprintf_r+0x14c>
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	1b80      	subs	r0, r0, r6
 800a55e:	4083      	lsls	r3, r0
 800a560:	6822      	ldr	r2, [r4, #0]
 800a562:	3501      	adds	r5, #1
 800a564:	4313      	orrs	r3, r2
 800a566:	6023      	str	r3, [r4, #0]
 800a568:	7829      	ldrb	r1, [r5, #0]
 800a56a:	2206      	movs	r2, #6
 800a56c:	4828      	ldr	r0, [pc, #160]	; (800a610 <_svfiprintf_r+0x1f4>)
 800a56e:	1c6e      	adds	r6, r5, #1
 800a570:	7621      	strb	r1, [r4, #24]
 800a572:	f000 f9d5 	bl	800a920 <memchr>
 800a576:	2800      	cmp	r0, #0
 800a578:	d03c      	beq.n	800a5f4 <_svfiprintf_r+0x1d8>
 800a57a:	4b26      	ldr	r3, [pc, #152]	; (800a614 <_svfiprintf_r+0x1f8>)
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d125      	bne.n	800a5cc <_svfiprintf_r+0x1b0>
 800a580:	2207      	movs	r2, #7
 800a582:	9b07      	ldr	r3, [sp, #28]
 800a584:	3307      	adds	r3, #7
 800a586:	4393      	bics	r3, r2
 800a588:	3308      	adds	r3, #8
 800a58a:	9307      	str	r3, [sp, #28]
 800a58c:	6963      	ldr	r3, [r4, #20]
 800a58e:	9a04      	ldr	r2, [sp, #16]
 800a590:	189b      	adds	r3, r3, r2
 800a592:	6163      	str	r3, [r4, #20]
 800a594:	e765      	b.n	800a462 <_svfiprintf_r+0x46>
 800a596:	4343      	muls	r3, r0
 800a598:	0035      	movs	r5, r6
 800a59a:	2101      	movs	r1, #1
 800a59c:	189b      	adds	r3, r3, r2
 800a59e:	e7a6      	b.n	800a4ee <_svfiprintf_r+0xd2>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	425b      	negs	r3, r3
 800a5a4:	e7d0      	b.n	800a548 <_svfiprintf_r+0x12c>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	200a      	movs	r0, #10
 800a5aa:	001a      	movs	r2, r3
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	6063      	str	r3, [r4, #4]
 800a5b0:	7829      	ldrb	r1, [r5, #0]
 800a5b2:	1c6e      	adds	r6, r5, #1
 800a5b4:	3930      	subs	r1, #48	; 0x30
 800a5b6:	2909      	cmp	r1, #9
 800a5b8:	d903      	bls.n	800a5c2 <_svfiprintf_r+0x1a6>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d0c5      	beq.n	800a54a <_svfiprintf_r+0x12e>
 800a5be:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c0:	e7c3      	b.n	800a54a <_svfiprintf_r+0x12e>
 800a5c2:	4342      	muls	r2, r0
 800a5c4:	0035      	movs	r5, r6
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	1852      	adds	r2, r2, r1
 800a5ca:	e7f1      	b.n	800a5b0 <_svfiprintf_r+0x194>
 800a5cc:	ab07      	add	r3, sp, #28
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	003a      	movs	r2, r7
 800a5d2:	0021      	movs	r1, r4
 800a5d4:	4b10      	ldr	r3, [pc, #64]	; (800a618 <_svfiprintf_r+0x1fc>)
 800a5d6:	9803      	ldr	r0, [sp, #12]
 800a5d8:	e000      	b.n	800a5dc <_svfiprintf_r+0x1c0>
 800a5da:	bf00      	nop
 800a5dc:	9004      	str	r0, [sp, #16]
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	d1d3      	bne.n	800a58c <_svfiprintf_r+0x170>
 800a5e4:	89bb      	ldrh	r3, [r7, #12]
 800a5e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a5e8:	065b      	lsls	r3, r3, #25
 800a5ea:	d400      	bmi.n	800a5ee <_svfiprintf_r+0x1d2>
 800a5ec:	e72d      	b.n	800a44a <_svfiprintf_r+0x2e>
 800a5ee:	2001      	movs	r0, #1
 800a5f0:	4240      	negs	r0, r0
 800a5f2:	e72a      	b.n	800a44a <_svfiprintf_r+0x2e>
 800a5f4:	ab07      	add	r3, sp, #28
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	003a      	movs	r2, r7
 800a5fa:	0021      	movs	r1, r4
 800a5fc:	4b06      	ldr	r3, [pc, #24]	; (800a618 <_svfiprintf_r+0x1fc>)
 800a5fe:	9803      	ldr	r0, [sp, #12]
 800a600:	f000 f87c 	bl	800a6fc <_printf_i>
 800a604:	e7ea      	b.n	800a5dc <_svfiprintf_r+0x1c0>
 800a606:	46c0      	nop			; (mov r8, r8)
 800a608:	0800bb04 	.word	0x0800bb04
 800a60c:	0800bb0a 	.word	0x0800bb0a
 800a610:	0800bb0e 	.word	0x0800bb0e
 800a614:	00000000 	.word	0x00000000
 800a618:	0800a359 	.word	0x0800a359

0800a61c <_printf_common>:
 800a61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a61e:	0015      	movs	r5, r2
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	688a      	ldr	r2, [r1, #8]
 800a624:	690b      	ldr	r3, [r1, #16]
 800a626:	000c      	movs	r4, r1
 800a628:	9000      	str	r0, [sp, #0]
 800a62a:	4293      	cmp	r3, r2
 800a62c:	da00      	bge.n	800a630 <_printf_common+0x14>
 800a62e:	0013      	movs	r3, r2
 800a630:	0022      	movs	r2, r4
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	3243      	adds	r2, #67	; 0x43
 800a636:	7812      	ldrb	r2, [r2, #0]
 800a638:	2a00      	cmp	r2, #0
 800a63a:	d001      	beq.n	800a640 <_printf_common+0x24>
 800a63c:	3301      	adds	r3, #1
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	069b      	lsls	r3, r3, #26
 800a644:	d502      	bpl.n	800a64c <_printf_common+0x30>
 800a646:	682b      	ldr	r3, [r5, #0]
 800a648:	3302      	adds	r3, #2
 800a64a:	602b      	str	r3, [r5, #0]
 800a64c:	6822      	ldr	r2, [r4, #0]
 800a64e:	2306      	movs	r3, #6
 800a650:	0017      	movs	r7, r2
 800a652:	401f      	ands	r7, r3
 800a654:	421a      	tst	r2, r3
 800a656:	d027      	beq.n	800a6a8 <_printf_common+0x8c>
 800a658:	0023      	movs	r3, r4
 800a65a:	3343      	adds	r3, #67	; 0x43
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	1e5a      	subs	r2, r3, #1
 800a660:	4193      	sbcs	r3, r2
 800a662:	6822      	ldr	r2, [r4, #0]
 800a664:	0692      	lsls	r2, r2, #26
 800a666:	d430      	bmi.n	800a6ca <_printf_common+0xae>
 800a668:	0022      	movs	r2, r4
 800a66a:	9901      	ldr	r1, [sp, #4]
 800a66c:	9800      	ldr	r0, [sp, #0]
 800a66e:	9e08      	ldr	r6, [sp, #32]
 800a670:	3243      	adds	r2, #67	; 0x43
 800a672:	47b0      	blx	r6
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d025      	beq.n	800a6c4 <_printf_common+0xa8>
 800a678:	2306      	movs	r3, #6
 800a67a:	6820      	ldr	r0, [r4, #0]
 800a67c:	682a      	ldr	r2, [r5, #0]
 800a67e:	68e1      	ldr	r1, [r4, #12]
 800a680:	2500      	movs	r5, #0
 800a682:	4003      	ands	r3, r0
 800a684:	2b04      	cmp	r3, #4
 800a686:	d103      	bne.n	800a690 <_printf_common+0x74>
 800a688:	1a8d      	subs	r5, r1, r2
 800a68a:	43eb      	mvns	r3, r5
 800a68c:	17db      	asrs	r3, r3, #31
 800a68e:	401d      	ands	r5, r3
 800a690:	68a3      	ldr	r3, [r4, #8]
 800a692:	6922      	ldr	r2, [r4, #16]
 800a694:	4293      	cmp	r3, r2
 800a696:	dd01      	ble.n	800a69c <_printf_common+0x80>
 800a698:	1a9b      	subs	r3, r3, r2
 800a69a:	18ed      	adds	r5, r5, r3
 800a69c:	2700      	movs	r7, #0
 800a69e:	42bd      	cmp	r5, r7
 800a6a0:	d120      	bne.n	800a6e4 <_printf_common+0xc8>
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e010      	b.n	800a6c8 <_printf_common+0xac>
 800a6a6:	3701      	adds	r7, #1
 800a6a8:	68e3      	ldr	r3, [r4, #12]
 800a6aa:	682a      	ldr	r2, [r5, #0]
 800a6ac:	1a9b      	subs	r3, r3, r2
 800a6ae:	42bb      	cmp	r3, r7
 800a6b0:	ddd2      	ble.n	800a658 <_printf_common+0x3c>
 800a6b2:	0022      	movs	r2, r4
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	9901      	ldr	r1, [sp, #4]
 800a6b8:	9800      	ldr	r0, [sp, #0]
 800a6ba:	9e08      	ldr	r6, [sp, #32]
 800a6bc:	3219      	adds	r2, #25
 800a6be:	47b0      	blx	r6
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d1f0      	bne.n	800a6a6 <_printf_common+0x8a>
 800a6c4:	2001      	movs	r0, #1
 800a6c6:	4240      	negs	r0, r0
 800a6c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6ca:	2030      	movs	r0, #48	; 0x30
 800a6cc:	18e1      	adds	r1, r4, r3
 800a6ce:	3143      	adds	r1, #67	; 0x43
 800a6d0:	7008      	strb	r0, [r1, #0]
 800a6d2:	0021      	movs	r1, r4
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	3145      	adds	r1, #69	; 0x45
 800a6d8:	7809      	ldrb	r1, [r1, #0]
 800a6da:	18a2      	adds	r2, r4, r2
 800a6dc:	3243      	adds	r2, #67	; 0x43
 800a6de:	3302      	adds	r3, #2
 800a6e0:	7011      	strb	r1, [r2, #0]
 800a6e2:	e7c1      	b.n	800a668 <_printf_common+0x4c>
 800a6e4:	0022      	movs	r2, r4
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	9901      	ldr	r1, [sp, #4]
 800a6ea:	9800      	ldr	r0, [sp, #0]
 800a6ec:	9e08      	ldr	r6, [sp, #32]
 800a6ee:	321a      	adds	r2, #26
 800a6f0:	47b0      	blx	r6
 800a6f2:	1c43      	adds	r3, r0, #1
 800a6f4:	d0e6      	beq.n	800a6c4 <_printf_common+0xa8>
 800a6f6:	3701      	adds	r7, #1
 800a6f8:	e7d1      	b.n	800a69e <_printf_common+0x82>
	...

0800a6fc <_printf_i>:
 800a6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fe:	b08b      	sub	sp, #44	; 0x2c
 800a700:	9206      	str	r2, [sp, #24]
 800a702:	000a      	movs	r2, r1
 800a704:	3243      	adds	r2, #67	; 0x43
 800a706:	9307      	str	r3, [sp, #28]
 800a708:	9005      	str	r0, [sp, #20]
 800a70a:	9204      	str	r2, [sp, #16]
 800a70c:	7e0a      	ldrb	r2, [r1, #24]
 800a70e:	000c      	movs	r4, r1
 800a710:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a712:	2a78      	cmp	r2, #120	; 0x78
 800a714:	d807      	bhi.n	800a726 <_printf_i+0x2a>
 800a716:	2a62      	cmp	r2, #98	; 0x62
 800a718:	d809      	bhi.n	800a72e <_printf_i+0x32>
 800a71a:	2a00      	cmp	r2, #0
 800a71c:	d100      	bne.n	800a720 <_printf_i+0x24>
 800a71e:	e0c1      	b.n	800a8a4 <_printf_i+0x1a8>
 800a720:	2a58      	cmp	r2, #88	; 0x58
 800a722:	d100      	bne.n	800a726 <_printf_i+0x2a>
 800a724:	e08c      	b.n	800a840 <_printf_i+0x144>
 800a726:	0026      	movs	r6, r4
 800a728:	3642      	adds	r6, #66	; 0x42
 800a72a:	7032      	strb	r2, [r6, #0]
 800a72c:	e022      	b.n	800a774 <_printf_i+0x78>
 800a72e:	0010      	movs	r0, r2
 800a730:	3863      	subs	r0, #99	; 0x63
 800a732:	2815      	cmp	r0, #21
 800a734:	d8f7      	bhi.n	800a726 <_printf_i+0x2a>
 800a736:	f7f5 fcef 	bl	8000118 <__gnu_thumb1_case_shi>
 800a73a:	0016      	.short	0x0016
 800a73c:	fff6001f 	.word	0xfff6001f
 800a740:	fff6fff6 	.word	0xfff6fff6
 800a744:	001ffff6 	.word	0x001ffff6
 800a748:	fff6fff6 	.word	0xfff6fff6
 800a74c:	fff6fff6 	.word	0xfff6fff6
 800a750:	003600a8 	.word	0x003600a8
 800a754:	fff6009a 	.word	0xfff6009a
 800a758:	00b9fff6 	.word	0x00b9fff6
 800a75c:	0036fff6 	.word	0x0036fff6
 800a760:	fff6fff6 	.word	0xfff6fff6
 800a764:	009e      	.short	0x009e
 800a766:	0026      	movs	r6, r4
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	3642      	adds	r6, #66	; 0x42
 800a76c:	1d11      	adds	r1, r2, #4
 800a76e:	6019      	str	r1, [r3, #0]
 800a770:	6813      	ldr	r3, [r2, #0]
 800a772:	7033      	strb	r3, [r6, #0]
 800a774:	2301      	movs	r3, #1
 800a776:	e0a7      	b.n	800a8c8 <_printf_i+0x1cc>
 800a778:	6808      	ldr	r0, [r1, #0]
 800a77a:	6819      	ldr	r1, [r3, #0]
 800a77c:	1d0a      	adds	r2, r1, #4
 800a77e:	0605      	lsls	r5, r0, #24
 800a780:	d50b      	bpl.n	800a79a <_printf_i+0x9e>
 800a782:	680d      	ldr	r5, [r1, #0]
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	2d00      	cmp	r5, #0
 800a788:	da03      	bge.n	800a792 <_printf_i+0x96>
 800a78a:	232d      	movs	r3, #45	; 0x2d
 800a78c:	9a04      	ldr	r2, [sp, #16]
 800a78e:	426d      	negs	r5, r5
 800a790:	7013      	strb	r3, [r2, #0]
 800a792:	4b61      	ldr	r3, [pc, #388]	; (800a918 <_printf_i+0x21c>)
 800a794:	270a      	movs	r7, #10
 800a796:	9303      	str	r3, [sp, #12]
 800a798:	e01b      	b.n	800a7d2 <_printf_i+0xd6>
 800a79a:	680d      	ldr	r5, [r1, #0]
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	0641      	lsls	r1, r0, #25
 800a7a0:	d5f1      	bpl.n	800a786 <_printf_i+0x8a>
 800a7a2:	b22d      	sxth	r5, r5
 800a7a4:	e7ef      	b.n	800a786 <_printf_i+0x8a>
 800a7a6:	680d      	ldr	r5, [r1, #0]
 800a7a8:	6819      	ldr	r1, [r3, #0]
 800a7aa:	1d08      	adds	r0, r1, #4
 800a7ac:	6018      	str	r0, [r3, #0]
 800a7ae:	062e      	lsls	r6, r5, #24
 800a7b0:	d501      	bpl.n	800a7b6 <_printf_i+0xba>
 800a7b2:	680d      	ldr	r5, [r1, #0]
 800a7b4:	e003      	b.n	800a7be <_printf_i+0xc2>
 800a7b6:	066d      	lsls	r5, r5, #25
 800a7b8:	d5fb      	bpl.n	800a7b2 <_printf_i+0xb6>
 800a7ba:	680d      	ldr	r5, [r1, #0]
 800a7bc:	b2ad      	uxth	r5, r5
 800a7be:	4b56      	ldr	r3, [pc, #344]	; (800a918 <_printf_i+0x21c>)
 800a7c0:	2708      	movs	r7, #8
 800a7c2:	9303      	str	r3, [sp, #12]
 800a7c4:	2a6f      	cmp	r2, #111	; 0x6f
 800a7c6:	d000      	beq.n	800a7ca <_printf_i+0xce>
 800a7c8:	3702      	adds	r7, #2
 800a7ca:	0023      	movs	r3, r4
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	3343      	adds	r3, #67	; 0x43
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	6863      	ldr	r3, [r4, #4]
 800a7d4:	60a3      	str	r3, [r4, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	db03      	blt.n	800a7e2 <_printf_i+0xe6>
 800a7da:	2204      	movs	r2, #4
 800a7dc:	6821      	ldr	r1, [r4, #0]
 800a7de:	4391      	bics	r1, r2
 800a7e0:	6021      	str	r1, [r4, #0]
 800a7e2:	2d00      	cmp	r5, #0
 800a7e4:	d102      	bne.n	800a7ec <_printf_i+0xf0>
 800a7e6:	9e04      	ldr	r6, [sp, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00c      	beq.n	800a806 <_printf_i+0x10a>
 800a7ec:	9e04      	ldr	r6, [sp, #16]
 800a7ee:	0028      	movs	r0, r5
 800a7f0:	0039      	movs	r1, r7
 800a7f2:	f7f5 fd21 	bl	8000238 <__aeabi_uidivmod>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	3e01      	subs	r6, #1
 800a7fa:	5c5b      	ldrb	r3, [r3, r1]
 800a7fc:	7033      	strb	r3, [r6, #0]
 800a7fe:	002b      	movs	r3, r5
 800a800:	0005      	movs	r5, r0
 800a802:	429f      	cmp	r7, r3
 800a804:	d9f3      	bls.n	800a7ee <_printf_i+0xf2>
 800a806:	2f08      	cmp	r7, #8
 800a808:	d109      	bne.n	800a81e <_printf_i+0x122>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	07db      	lsls	r3, r3, #31
 800a80e:	d506      	bpl.n	800a81e <_printf_i+0x122>
 800a810:	6863      	ldr	r3, [r4, #4]
 800a812:	6922      	ldr	r2, [r4, #16]
 800a814:	4293      	cmp	r3, r2
 800a816:	dc02      	bgt.n	800a81e <_printf_i+0x122>
 800a818:	2330      	movs	r3, #48	; 0x30
 800a81a:	3e01      	subs	r6, #1
 800a81c:	7033      	strb	r3, [r6, #0]
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	1b9b      	subs	r3, r3, r6
 800a822:	6123      	str	r3, [r4, #16]
 800a824:	9b07      	ldr	r3, [sp, #28]
 800a826:	0021      	movs	r1, r4
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	9805      	ldr	r0, [sp, #20]
 800a82c:	9b06      	ldr	r3, [sp, #24]
 800a82e:	aa09      	add	r2, sp, #36	; 0x24
 800a830:	f7ff fef4 	bl	800a61c <_printf_common>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d14c      	bne.n	800a8d2 <_printf_i+0x1d6>
 800a838:	2001      	movs	r0, #1
 800a83a:	4240      	negs	r0, r0
 800a83c:	b00b      	add	sp, #44	; 0x2c
 800a83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a840:	3145      	adds	r1, #69	; 0x45
 800a842:	700a      	strb	r2, [r1, #0]
 800a844:	4a34      	ldr	r2, [pc, #208]	; (800a918 <_printf_i+0x21c>)
 800a846:	9203      	str	r2, [sp, #12]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	6821      	ldr	r1, [r4, #0]
 800a84c:	ca20      	ldmia	r2!, {r5}
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	0608      	lsls	r0, r1, #24
 800a852:	d516      	bpl.n	800a882 <_printf_i+0x186>
 800a854:	07cb      	lsls	r3, r1, #31
 800a856:	d502      	bpl.n	800a85e <_printf_i+0x162>
 800a858:	2320      	movs	r3, #32
 800a85a:	4319      	orrs	r1, r3
 800a85c:	6021      	str	r1, [r4, #0]
 800a85e:	2710      	movs	r7, #16
 800a860:	2d00      	cmp	r5, #0
 800a862:	d1b2      	bne.n	800a7ca <_printf_i+0xce>
 800a864:	2320      	movs	r3, #32
 800a866:	6822      	ldr	r2, [r4, #0]
 800a868:	439a      	bics	r2, r3
 800a86a:	6022      	str	r2, [r4, #0]
 800a86c:	e7ad      	b.n	800a7ca <_printf_i+0xce>
 800a86e:	2220      	movs	r2, #32
 800a870:	6809      	ldr	r1, [r1, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	6022      	str	r2, [r4, #0]
 800a876:	0022      	movs	r2, r4
 800a878:	2178      	movs	r1, #120	; 0x78
 800a87a:	3245      	adds	r2, #69	; 0x45
 800a87c:	7011      	strb	r1, [r2, #0]
 800a87e:	4a27      	ldr	r2, [pc, #156]	; (800a91c <_printf_i+0x220>)
 800a880:	e7e1      	b.n	800a846 <_printf_i+0x14a>
 800a882:	0648      	lsls	r0, r1, #25
 800a884:	d5e6      	bpl.n	800a854 <_printf_i+0x158>
 800a886:	b2ad      	uxth	r5, r5
 800a888:	e7e4      	b.n	800a854 <_printf_i+0x158>
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	680d      	ldr	r5, [r1, #0]
 800a88e:	1d10      	adds	r0, r2, #4
 800a890:	6949      	ldr	r1, [r1, #20]
 800a892:	6018      	str	r0, [r3, #0]
 800a894:	6813      	ldr	r3, [r2, #0]
 800a896:	062e      	lsls	r6, r5, #24
 800a898:	d501      	bpl.n	800a89e <_printf_i+0x1a2>
 800a89a:	6019      	str	r1, [r3, #0]
 800a89c:	e002      	b.n	800a8a4 <_printf_i+0x1a8>
 800a89e:	066d      	lsls	r5, r5, #25
 800a8a0:	d5fb      	bpl.n	800a89a <_printf_i+0x19e>
 800a8a2:	8019      	strh	r1, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9e04      	ldr	r6, [sp, #16]
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	e7bb      	b.n	800a824 <_printf_i+0x128>
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	1d11      	adds	r1, r2, #4
 800a8b0:	6019      	str	r1, [r3, #0]
 800a8b2:	6816      	ldr	r6, [r2, #0]
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	0030      	movs	r0, r6
 800a8b8:	6862      	ldr	r2, [r4, #4]
 800a8ba:	f000 f831 	bl	800a920 <memchr>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d001      	beq.n	800a8c6 <_printf_i+0x1ca>
 800a8c2:	1b80      	subs	r0, r0, r6
 800a8c4:	6060      	str	r0, [r4, #4]
 800a8c6:	6863      	ldr	r3, [r4, #4]
 800a8c8:	6123      	str	r3, [r4, #16]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9a04      	ldr	r2, [sp, #16]
 800a8ce:	7013      	strb	r3, [r2, #0]
 800a8d0:	e7a8      	b.n	800a824 <_printf_i+0x128>
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	0032      	movs	r2, r6
 800a8d6:	9906      	ldr	r1, [sp, #24]
 800a8d8:	9805      	ldr	r0, [sp, #20]
 800a8da:	9d07      	ldr	r5, [sp, #28]
 800a8dc:	47a8      	blx	r5
 800a8de:	1c43      	adds	r3, r0, #1
 800a8e0:	d0aa      	beq.n	800a838 <_printf_i+0x13c>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	079b      	lsls	r3, r3, #30
 800a8e6:	d415      	bmi.n	800a914 <_printf_i+0x218>
 800a8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ea:	68e0      	ldr	r0, [r4, #12]
 800a8ec:	4298      	cmp	r0, r3
 800a8ee:	daa5      	bge.n	800a83c <_printf_i+0x140>
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	e7a3      	b.n	800a83c <_printf_i+0x140>
 800a8f4:	0022      	movs	r2, r4
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	9906      	ldr	r1, [sp, #24]
 800a8fa:	9805      	ldr	r0, [sp, #20]
 800a8fc:	9e07      	ldr	r6, [sp, #28]
 800a8fe:	3219      	adds	r2, #25
 800a900:	47b0      	blx	r6
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d098      	beq.n	800a838 <_printf_i+0x13c>
 800a906:	3501      	adds	r5, #1
 800a908:	68e3      	ldr	r3, [r4, #12]
 800a90a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a90c:	1a9b      	subs	r3, r3, r2
 800a90e:	42ab      	cmp	r3, r5
 800a910:	dcf0      	bgt.n	800a8f4 <_printf_i+0x1f8>
 800a912:	e7e9      	b.n	800a8e8 <_printf_i+0x1ec>
 800a914:	2500      	movs	r5, #0
 800a916:	e7f7      	b.n	800a908 <_printf_i+0x20c>
 800a918:	0800bb15 	.word	0x0800bb15
 800a91c:	0800bb26 	.word	0x0800bb26

0800a920 <memchr>:
 800a920:	b2c9      	uxtb	r1, r1
 800a922:	1882      	adds	r2, r0, r2
 800a924:	4290      	cmp	r0, r2
 800a926:	d101      	bne.n	800a92c <memchr+0xc>
 800a928:	2000      	movs	r0, #0
 800a92a:	4770      	bx	lr
 800a92c:	7803      	ldrb	r3, [r0, #0]
 800a92e:	428b      	cmp	r3, r1
 800a930:	d0fb      	beq.n	800a92a <memchr+0xa>
 800a932:	3001      	adds	r0, #1
 800a934:	e7f6      	b.n	800a924 <memchr+0x4>

0800a936 <memcpy>:
 800a936:	2300      	movs	r3, #0
 800a938:	b510      	push	{r4, lr}
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d100      	bne.n	800a940 <memcpy+0xa>
 800a93e:	bd10      	pop	{r4, pc}
 800a940:	5ccc      	ldrb	r4, [r1, r3]
 800a942:	54c4      	strb	r4, [r0, r3]
 800a944:	3301      	adds	r3, #1
 800a946:	e7f8      	b.n	800a93a <memcpy+0x4>

0800a948 <memmove>:
 800a948:	b510      	push	{r4, lr}
 800a94a:	4288      	cmp	r0, r1
 800a94c:	d902      	bls.n	800a954 <memmove+0xc>
 800a94e:	188b      	adds	r3, r1, r2
 800a950:	4298      	cmp	r0, r3
 800a952:	d303      	bcc.n	800a95c <memmove+0x14>
 800a954:	2300      	movs	r3, #0
 800a956:	e007      	b.n	800a968 <memmove+0x20>
 800a958:	5c8b      	ldrb	r3, [r1, r2]
 800a95a:	5483      	strb	r3, [r0, r2]
 800a95c:	3a01      	subs	r2, #1
 800a95e:	d2fb      	bcs.n	800a958 <memmove+0x10>
 800a960:	bd10      	pop	{r4, pc}
 800a962:	5ccc      	ldrb	r4, [r1, r3]
 800a964:	54c4      	strb	r4, [r0, r3]
 800a966:	3301      	adds	r3, #1
 800a968:	429a      	cmp	r2, r3
 800a96a:	d1fa      	bne.n	800a962 <memmove+0x1a>
 800a96c:	e7f8      	b.n	800a960 <memmove+0x18>
	...

0800a970 <_free_r>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	0005      	movs	r5, r0
 800a974:	2900      	cmp	r1, #0
 800a976:	d010      	beq.n	800a99a <_free_r+0x2a>
 800a978:	1f0c      	subs	r4, r1, #4
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	da00      	bge.n	800a982 <_free_r+0x12>
 800a980:	18e4      	adds	r4, r4, r3
 800a982:	0028      	movs	r0, r5
 800a984:	f000 f918 	bl	800abb8 <__malloc_lock>
 800a988:	4a1d      	ldr	r2, [pc, #116]	; (800aa00 <_free_r+0x90>)
 800a98a:	6813      	ldr	r3, [r2, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d105      	bne.n	800a99c <_free_r+0x2c>
 800a990:	6063      	str	r3, [r4, #4]
 800a992:	6014      	str	r4, [r2, #0]
 800a994:	0028      	movs	r0, r5
 800a996:	f000 f917 	bl	800abc8 <__malloc_unlock>
 800a99a:	bd70      	pop	{r4, r5, r6, pc}
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	d908      	bls.n	800a9b2 <_free_r+0x42>
 800a9a0:	6821      	ldr	r1, [r4, #0]
 800a9a2:	1860      	adds	r0, r4, r1
 800a9a4:	4283      	cmp	r3, r0
 800a9a6:	d1f3      	bne.n	800a990 <_free_r+0x20>
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	1841      	adds	r1, r0, r1
 800a9ae:	6021      	str	r1, [r4, #0]
 800a9b0:	e7ee      	b.n	800a990 <_free_r+0x20>
 800a9b2:	001a      	movs	r2, r3
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <_free_r+0x4e>
 800a9ba:	42a3      	cmp	r3, r4
 800a9bc:	d9f9      	bls.n	800a9b2 <_free_r+0x42>
 800a9be:	6811      	ldr	r1, [r2, #0]
 800a9c0:	1850      	adds	r0, r2, r1
 800a9c2:	42a0      	cmp	r0, r4
 800a9c4:	d10b      	bne.n	800a9de <_free_r+0x6e>
 800a9c6:	6820      	ldr	r0, [r4, #0]
 800a9c8:	1809      	adds	r1, r1, r0
 800a9ca:	1850      	adds	r0, r2, r1
 800a9cc:	6011      	str	r1, [r2, #0]
 800a9ce:	4283      	cmp	r3, r0
 800a9d0:	d1e0      	bne.n	800a994 <_free_r+0x24>
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	1841      	adds	r1, r0, r1
 800a9d8:	6011      	str	r1, [r2, #0]
 800a9da:	6053      	str	r3, [r2, #4]
 800a9dc:	e7da      	b.n	800a994 <_free_r+0x24>
 800a9de:	42a0      	cmp	r0, r4
 800a9e0:	d902      	bls.n	800a9e8 <_free_r+0x78>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	602b      	str	r3, [r5, #0]
 800a9e6:	e7d5      	b.n	800a994 <_free_r+0x24>
 800a9e8:	6821      	ldr	r1, [r4, #0]
 800a9ea:	1860      	adds	r0, r4, r1
 800a9ec:	4283      	cmp	r3, r0
 800a9ee:	d103      	bne.n	800a9f8 <_free_r+0x88>
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	1841      	adds	r1, r0, r1
 800a9f6:	6021      	str	r1, [r4, #0]
 800a9f8:	6063      	str	r3, [r4, #4]
 800a9fa:	6054      	str	r4, [r2, #4]
 800a9fc:	e7ca      	b.n	800a994 <_free_r+0x24>
 800a9fe:	46c0      	nop			; (mov r8, r8)
 800aa00:	20000b80 	.word	0x20000b80

0800aa04 <sbrk_aligned>:
 800aa04:	b570      	push	{r4, r5, r6, lr}
 800aa06:	4e0f      	ldr	r6, [pc, #60]	; (800aa44 <sbrk_aligned+0x40>)
 800aa08:	000d      	movs	r5, r1
 800aa0a:	6831      	ldr	r1, [r6, #0]
 800aa0c:	0004      	movs	r4, r0
 800aa0e:	2900      	cmp	r1, #0
 800aa10:	d102      	bne.n	800aa18 <sbrk_aligned+0x14>
 800aa12:	f000 f8bf 	bl	800ab94 <_sbrk_r>
 800aa16:	6030      	str	r0, [r6, #0]
 800aa18:	0029      	movs	r1, r5
 800aa1a:	0020      	movs	r0, r4
 800aa1c:	f000 f8ba 	bl	800ab94 <_sbrk_r>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d00a      	beq.n	800aa3a <sbrk_aligned+0x36>
 800aa24:	2303      	movs	r3, #3
 800aa26:	1cc5      	adds	r5, r0, #3
 800aa28:	439d      	bics	r5, r3
 800aa2a:	42a8      	cmp	r0, r5
 800aa2c:	d007      	beq.n	800aa3e <sbrk_aligned+0x3a>
 800aa2e:	1a29      	subs	r1, r5, r0
 800aa30:	0020      	movs	r0, r4
 800aa32:	f000 f8af 	bl	800ab94 <_sbrk_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d101      	bne.n	800aa3e <sbrk_aligned+0x3a>
 800aa3a:	2501      	movs	r5, #1
 800aa3c:	426d      	negs	r5, r5
 800aa3e:	0028      	movs	r0, r5
 800aa40:	bd70      	pop	{r4, r5, r6, pc}
 800aa42:	46c0      	nop			; (mov r8, r8)
 800aa44:	20000b84 	.word	0x20000b84

0800aa48 <_malloc_r>:
 800aa48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	1ccb      	adds	r3, r1, #3
 800aa4e:	4393      	bics	r3, r2
 800aa50:	3308      	adds	r3, #8
 800aa52:	0006      	movs	r6, r0
 800aa54:	001f      	movs	r7, r3
 800aa56:	2b0c      	cmp	r3, #12
 800aa58:	d232      	bcs.n	800aac0 <_malloc_r+0x78>
 800aa5a:	270c      	movs	r7, #12
 800aa5c:	42b9      	cmp	r1, r7
 800aa5e:	d831      	bhi.n	800aac4 <_malloc_r+0x7c>
 800aa60:	0030      	movs	r0, r6
 800aa62:	f000 f8a9 	bl	800abb8 <__malloc_lock>
 800aa66:	4d32      	ldr	r5, [pc, #200]	; (800ab30 <_malloc_r+0xe8>)
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	001c      	movs	r4, r3
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	d12e      	bne.n	800aace <_malloc_r+0x86>
 800aa70:	0039      	movs	r1, r7
 800aa72:	0030      	movs	r0, r6
 800aa74:	f7ff ffc6 	bl	800aa04 <sbrk_aligned>
 800aa78:	0004      	movs	r4, r0
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	d11e      	bne.n	800aabc <_malloc_r+0x74>
 800aa7e:	682c      	ldr	r4, [r5, #0]
 800aa80:	0025      	movs	r5, r4
 800aa82:	2d00      	cmp	r5, #0
 800aa84:	d14a      	bne.n	800ab1c <_malloc_r+0xd4>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	0029      	movs	r1, r5
 800aa8a:	18e3      	adds	r3, r4, r3
 800aa8c:	0030      	movs	r0, r6
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	f000 f880 	bl	800ab94 <_sbrk_r>
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	4283      	cmp	r3, r0
 800aa98:	d143      	bne.n	800ab22 <_malloc_r+0xda>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	3703      	adds	r7, #3
 800aa9e:	1aff      	subs	r7, r7, r3
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	439f      	bics	r7, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	2f0c      	cmp	r7, #12
 800aaa8:	d200      	bcs.n	800aaac <_malloc_r+0x64>
 800aaaa:	270c      	movs	r7, #12
 800aaac:	0039      	movs	r1, r7
 800aaae:	0030      	movs	r0, r6
 800aab0:	f7ff ffa8 	bl	800aa04 <sbrk_aligned>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d034      	beq.n	800ab22 <_malloc_r+0xda>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	19df      	adds	r7, r3, r7
 800aabc:	6027      	str	r7, [r4, #0]
 800aabe:	e013      	b.n	800aae8 <_malloc_r+0xa0>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dacb      	bge.n	800aa5c <_malloc_r+0x14>
 800aac4:	230c      	movs	r3, #12
 800aac6:	2500      	movs	r5, #0
 800aac8:	6033      	str	r3, [r6, #0]
 800aaca:	0028      	movs	r0, r5
 800aacc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aace:	6822      	ldr	r2, [r4, #0]
 800aad0:	1bd1      	subs	r1, r2, r7
 800aad2:	d420      	bmi.n	800ab16 <_malloc_r+0xce>
 800aad4:	290b      	cmp	r1, #11
 800aad6:	d917      	bls.n	800ab08 <_malloc_r+0xc0>
 800aad8:	19e2      	adds	r2, r4, r7
 800aada:	6027      	str	r7, [r4, #0]
 800aadc:	42a3      	cmp	r3, r4
 800aade:	d111      	bne.n	800ab04 <_malloc_r+0xbc>
 800aae0:	602a      	str	r2, [r5, #0]
 800aae2:	6863      	ldr	r3, [r4, #4]
 800aae4:	6011      	str	r1, [r2, #0]
 800aae6:	6053      	str	r3, [r2, #4]
 800aae8:	0030      	movs	r0, r6
 800aaea:	0025      	movs	r5, r4
 800aaec:	f000 f86c 	bl	800abc8 <__malloc_unlock>
 800aaf0:	2207      	movs	r2, #7
 800aaf2:	350b      	adds	r5, #11
 800aaf4:	1d23      	adds	r3, r4, #4
 800aaf6:	4395      	bics	r5, r2
 800aaf8:	1aea      	subs	r2, r5, r3
 800aafa:	429d      	cmp	r5, r3
 800aafc:	d0e5      	beq.n	800aaca <_malloc_r+0x82>
 800aafe:	1b5b      	subs	r3, r3, r5
 800ab00:	50a3      	str	r3, [r4, r2]
 800ab02:	e7e2      	b.n	800aaca <_malloc_r+0x82>
 800ab04:	605a      	str	r2, [r3, #4]
 800ab06:	e7ec      	b.n	800aae2 <_malloc_r+0x9a>
 800ab08:	6862      	ldr	r2, [r4, #4]
 800ab0a:	42a3      	cmp	r3, r4
 800ab0c:	d101      	bne.n	800ab12 <_malloc_r+0xca>
 800ab0e:	602a      	str	r2, [r5, #0]
 800ab10:	e7ea      	b.n	800aae8 <_malloc_r+0xa0>
 800ab12:	605a      	str	r2, [r3, #4]
 800ab14:	e7e8      	b.n	800aae8 <_malloc_r+0xa0>
 800ab16:	0023      	movs	r3, r4
 800ab18:	6864      	ldr	r4, [r4, #4]
 800ab1a:	e7a7      	b.n	800aa6c <_malloc_r+0x24>
 800ab1c:	002c      	movs	r4, r5
 800ab1e:	686d      	ldr	r5, [r5, #4]
 800ab20:	e7af      	b.n	800aa82 <_malloc_r+0x3a>
 800ab22:	230c      	movs	r3, #12
 800ab24:	0030      	movs	r0, r6
 800ab26:	6033      	str	r3, [r6, #0]
 800ab28:	f000 f84e 	bl	800abc8 <__malloc_unlock>
 800ab2c:	e7cd      	b.n	800aaca <_malloc_r+0x82>
 800ab2e:	46c0      	nop			; (mov r8, r8)
 800ab30:	20000b80 	.word	0x20000b80

0800ab34 <_realloc_r>:
 800ab34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab36:	0007      	movs	r7, r0
 800ab38:	000e      	movs	r6, r1
 800ab3a:	0014      	movs	r4, r2
 800ab3c:	2900      	cmp	r1, #0
 800ab3e:	d105      	bne.n	800ab4c <_realloc_r+0x18>
 800ab40:	0011      	movs	r1, r2
 800ab42:	f7ff ff81 	bl	800aa48 <_malloc_r>
 800ab46:	0005      	movs	r5, r0
 800ab48:	0028      	movs	r0, r5
 800ab4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab4c:	2a00      	cmp	r2, #0
 800ab4e:	d103      	bne.n	800ab58 <_realloc_r+0x24>
 800ab50:	f7ff ff0e 	bl	800a970 <_free_r>
 800ab54:	0025      	movs	r5, r4
 800ab56:	e7f7      	b.n	800ab48 <_realloc_r+0x14>
 800ab58:	f000 f83e 	bl	800abd8 <_malloc_usable_size_r>
 800ab5c:	9001      	str	r0, [sp, #4]
 800ab5e:	4284      	cmp	r4, r0
 800ab60:	d803      	bhi.n	800ab6a <_realloc_r+0x36>
 800ab62:	0035      	movs	r5, r6
 800ab64:	0843      	lsrs	r3, r0, #1
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	d3ee      	bcc.n	800ab48 <_realloc_r+0x14>
 800ab6a:	0021      	movs	r1, r4
 800ab6c:	0038      	movs	r0, r7
 800ab6e:	f7ff ff6b 	bl	800aa48 <_malloc_r>
 800ab72:	1e05      	subs	r5, r0, #0
 800ab74:	d0e8      	beq.n	800ab48 <_realloc_r+0x14>
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	0022      	movs	r2, r4
 800ab7a:	429c      	cmp	r4, r3
 800ab7c:	d900      	bls.n	800ab80 <_realloc_r+0x4c>
 800ab7e:	001a      	movs	r2, r3
 800ab80:	0031      	movs	r1, r6
 800ab82:	0028      	movs	r0, r5
 800ab84:	f7ff fed7 	bl	800a936 <memcpy>
 800ab88:	0031      	movs	r1, r6
 800ab8a:	0038      	movs	r0, r7
 800ab8c:	f7ff fef0 	bl	800a970 <_free_r>
 800ab90:	e7da      	b.n	800ab48 <_realloc_r+0x14>
	...

0800ab94 <_sbrk_r>:
 800ab94:	2300      	movs	r3, #0
 800ab96:	b570      	push	{r4, r5, r6, lr}
 800ab98:	4d06      	ldr	r5, [pc, #24]	; (800abb4 <_sbrk_r+0x20>)
 800ab9a:	0004      	movs	r4, r0
 800ab9c:	0008      	movs	r0, r1
 800ab9e:	602b      	str	r3, [r5, #0]
 800aba0:	f7f9 fe90 	bl	80048c4 <_sbrk>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d103      	bne.n	800abb0 <_sbrk_r+0x1c>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d000      	beq.n	800abb0 <_sbrk_r+0x1c>
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	bd70      	pop	{r4, r5, r6, pc}
 800abb2:	46c0      	nop			; (mov r8, r8)
 800abb4:	20000b88 	.word	0x20000b88

0800abb8 <__malloc_lock>:
 800abb8:	b510      	push	{r4, lr}
 800abba:	4802      	ldr	r0, [pc, #8]	; (800abc4 <__malloc_lock+0xc>)
 800abbc:	f000 f814 	bl	800abe8 <__retarget_lock_acquire_recursive>
 800abc0:	bd10      	pop	{r4, pc}
 800abc2:	46c0      	nop			; (mov r8, r8)
 800abc4:	20000b8c 	.word	0x20000b8c

0800abc8 <__malloc_unlock>:
 800abc8:	b510      	push	{r4, lr}
 800abca:	4802      	ldr	r0, [pc, #8]	; (800abd4 <__malloc_unlock+0xc>)
 800abcc:	f000 f80d 	bl	800abea <__retarget_lock_release_recursive>
 800abd0:	bd10      	pop	{r4, pc}
 800abd2:	46c0      	nop			; (mov r8, r8)
 800abd4:	20000b8c 	.word	0x20000b8c

0800abd8 <_malloc_usable_size_r>:
 800abd8:	1f0b      	subs	r3, r1, #4
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	1f18      	subs	r0, r3, #4
 800abde:	2b00      	cmp	r3, #0
 800abe0:	da01      	bge.n	800abe6 <_malloc_usable_size_r+0xe>
 800abe2:	580b      	ldr	r3, [r1, r0]
 800abe4:	18c0      	adds	r0, r0, r3
 800abe6:	4770      	bx	lr

0800abe8 <__retarget_lock_acquire_recursive>:
 800abe8:	4770      	bx	lr

0800abea <__retarget_lock_release_recursive>:
 800abea:	4770      	bx	lr

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
